
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORnonassocEQUALEQUALNOTEQnonassocLDLDEQGDGDEQleftPLUSMINUSleftMULTIPLYDIVIDEMODULOrightNOTAND COMMA DIVIDE ELSE ELSE_IF EQUALEQUAL EQUALS FALSE FLOAT FLOAT_TYPE GD GDEQ IF INT INT_TYPE LBRACE LD LDEQ LPAREN MINUS MODULO MULTIPLY NAME NEWLINE NOT NOTEQ OR PLUS PRINT RBRACE READ RETURN RPAREN START STOP STRING STRING_TYPE TRUE VOID_TYPE WHILE\n    start : language\n          | empty\n    \n    language : language NEWLINE line\n             | line\n    \n    line : expression\n         | var_assign\n         | func_assign\n         | iterative\n         | conditional\n         | output\n         | input\n         | empty\n    \n    func_assign     :   datatype NAME LPAREN parameters RPAREN START NEWLINE language return_stmt STOP\n    \n    return_stmt     :   RETURN expression NEWLINE\n                    |   RETURN NEWLINE\n                    |   empty\n\n    \n\n    parameters      :   first_param\n                    |   empty\n    \n    first_param     :   datatype NAME COMMA first_param\n                    |   datatype NAME\n\n    \n\n    datatype    :   INT_TYPE\n                |   FLOAT_TYPE\n                |   STRING_TYPE\n                |   VOID_TYPE\n    \n    input : READ LPAREN NAME RPAREN\n    \n    output : output_print\n    \n    output_print : PRINT LPAREN expression RPAREN\n    \n    expression : NAME\n    \n    var_assign : datatype NAME EQUALS expression\n               | NAME EQUALS expression\n    \n    expression : expression_operation\n    \n    expression_operation : expression MULTIPLY expression\n                         | expression DIVIDE expression\n                         | expression MODULO expression\n                         | expression PLUS expression\n                         | expression MINUS expression\n                         | expression LD expression\n                         | expression LDEQ expression\n                         | expression GD expression\n                         | expression GDEQ expression\n                         | expression EQUALEQUAL expression\n                         | expression NOTEQ expression\n                         | expression AND expression\n                         | expression OR expression\n    \n    expression_operation : NOT expression\n    \n    expression : INT\n               | FLOAT\n               | STRING\n               | TRUE\n               | FALSE\n    \n    expression : LBRACE int_type_array RBRACE\n    \n    expression : LBRACE float_type_array RBRACE\n    \n    expression : LBRACE string_type_array RBRACE\n    \n    expression : LBRACE bool_type_array RBRACE\n    \n    int_type_array : empty\n                   | INT int_type_array\n    \n    float_type_array : empty\n                     | FLOAT float_type_array\n    \n    string_type_array : empty\n                      | STRING string_type_array\n    \n    bool_type_array : empty\n                      | TRUE bool_type_array\n                      | FALSE bool_type_array\n    \n    expression : LPAREN expression RPAREN\n    \n    conditional : IF expression START NEWLINE language STOP else_if_blocks else_block \n    \n    else_if_blocks : empty\n                   | else_if_blocks else_if_block\n    \n    else_if_block : ELSE_IF expression START NEWLINE language STOP\n    \n    else_block : ELSE START NEWLINE language STOP\n               | empty\n    \n    iterative : WHILE expression START NEWLINE language STOP\n    \n    empty : \n\n    '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,24,32,58,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,101,108,109,116,117,120,121,123,124,126,133,141,143,],[-72,0,-1,-2,-4,-5,-6,-7,-8,-9,-10,-11,-28,-31,-46,-47,-48,-49,-50,-26,-72,-28,-45,-3,-12,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-30,-51,-52,-53,-54,-64,-29,-25,-27,-71,-72,-72,-66,-65,-67,-70,-13,-69,-68,]),'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,24,32,58,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,97,98,101,106,107,108,109,112,113,115,116,117,119,120,121,122,123,124,126,129,131,133,134,136,137,139,140,141,142,143,],[-72,32,-12,-4,-5,-6,-7,-8,-9,-10,-11,-28,-31,-46,-47,-48,-49,-50,-26,-72,-28,-45,-3,-12,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-30,-51,-52,-53,-54,-64,106,107,-29,-72,-72,-25,-27,32,32,119,-71,-72,-72,-72,-66,32,-65,-67,-70,135,136,-13,138,-72,140,32,-72,-69,32,-68,]),'NAME':([0,20,21,22,23,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,62,64,95,102,106,107,119,127,129,136,140,],[12,58,59,58,58,58,-21,-22,-23,-24,12,58,58,58,58,58,58,58,58,58,58,58,58,58,58,99,58,58,110,12,12,12,58,58,12,12,]),'INT':([0,19,20,22,23,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,52,64,95,106,107,119,127,129,136,140,],[14,52,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,52,14,14,14,14,14,14,14,14,14,]),'FLOAT':([0,19,20,22,23,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,53,64,95,106,107,119,127,129,136,140,],[15,53,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,53,15,15,15,15,15,15,15,15,15,]),'STRING':([0,19,20,22,23,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,54,64,95,106,107,119,127,129,136,140,],[16,54,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,54,16,16,16,16,16,16,16,16,16,]),'TRUE':([0,19,20,22,23,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,55,56,64,95,106,107,119,127,129,136,140,],[17,55,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,55,55,17,17,17,17,17,17,17,17,17,]),'FALSE':([0,19,20,22,23,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,55,56,64,95,106,107,119,127,129,136,140,],[18,56,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,56,56,18,18,18,18,18,18,18,18,18,]),'LBRACE':([0,20,22,23,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,64,95,106,107,119,127,129,136,140,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'LPAREN':([0,20,22,23,25,26,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,59,64,95,106,107,119,127,129,136,140,],[20,20,20,20,62,20,64,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,96,20,20,20,20,20,20,20,20,20,]),'WHILE':([0,32,106,107,119,136,140,],[22,22,22,22,22,22,22,]),'IF':([0,32,106,107,119,136,140,],[23,23,23,23,23,23,23,]),'READ':([0,32,106,107,119,136,140,],[25,25,25,25,25,25,25,]),'NOT':([0,20,22,23,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,64,95,106,107,119,127,129,136,140,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'INT_TYPE':([0,32,96,106,107,114,119,136,140,],[27,27,27,27,27,27,27,27,27,]),'FLOAT_TYPE':([0,32,96,106,107,114,119,136,140,],[28,28,28,28,28,28,28,28,28,]),'STRING_TYPE':([0,32,96,106,107,114,119,136,140,],[29,29,29,29,29,29,29,29,29,]),'VOID_TYPE':([0,32,96,106,107,114,119,136,140,],[30,30,30,30,30,30,30,30,30,]),'PRINT':([0,32,106,107,119,136,140,],[31,31,31,31,31,31,31,]),'STOP':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,24,32,58,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,101,106,107,108,109,112,113,116,117,119,120,121,122,123,124,126,128,130,133,135,136,138,139,140,141,142,143,],[-4,-5,-6,-7,-8,-9,-10,-11,-28,-31,-46,-47,-48,-49,-50,-26,-72,-28,-45,-3,-12,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-30,-51,-52,-53,-54,-64,-29,-72,-72,-25,-27,116,117,-71,-72,-72,-72,-66,-72,-65,-67,-70,133,-16,-13,-15,-72,-14,141,-72,-69,143,-68,]),'RETURN':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,24,32,58,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,101,108,109,116,117,119,120,121,122,123,124,126,133,141,143,],[-4,-5,-6,-7,-8,-9,-10,-11,-28,-31,-46,-47,-48,-49,-50,-26,-72,-28,-45,-3,-12,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-30,-51,-52,-53,-54,-64,-29,-25,-27,-71,-72,-72,-72,-66,129,-65,-67,-70,-13,-69,-68,]),'MULTIPLY':([5,12,13,14,15,16,17,18,57,58,60,61,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,100,101,132,134,],[33,-28,-31,-46,-47,-48,-49,-50,33,-28,33,33,-45,-32,-33,-34,33,33,33,33,33,33,33,33,33,33,33,-51,-52,-53,-54,-64,33,33,33,33,]),'DIVIDE':([5,12,13,14,15,16,17,18,57,58,60,61,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,100,101,132,134,],[34,-28,-31,-46,-47,-48,-49,-50,34,-28,34,34,-45,-32,-33,-34,34,34,34,34,34,34,34,34,34,34,34,-51,-52,-53,-54,-64,34,34,34,34,]),'MODULO':([5,12,13,14,15,16,17,18,57,58,60,61,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,100,101,132,134,],[35,-28,-31,-46,-47,-48,-49,-50,35,-28,35,35,-45,-32,-33,-34,35,35,35,35,35,35,35,35,35,35,35,-51,-52,-53,-54,-64,35,35,35,35,]),'PLUS':([5,12,13,14,15,16,17,18,57,58,60,61,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,100,101,132,134,],[36,-28,-31,-46,-47,-48,-49,-50,36,-28,36,36,-45,-32,-33,-34,-35,-36,36,36,36,36,36,36,36,36,36,-51,-52,-53,-54,-64,36,36,36,36,]),'MINUS':([5,12,13,14,15,16,17,18,57,58,60,61,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,100,101,132,134,],[37,-28,-31,-46,-47,-48,-49,-50,37,-28,37,37,-45,-32,-33,-34,-35,-36,37,37,37,37,37,37,37,37,37,-51,-52,-53,-54,-64,37,37,37,37,]),'LD':([5,12,13,14,15,16,17,18,57,58,60,61,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,100,101,132,134,],[38,-28,-31,-46,-47,-48,-49,-50,38,-28,38,38,-45,-32,-33,-34,-35,-36,None,None,None,None,38,38,38,38,38,-51,-52,-53,-54,-64,38,38,38,38,]),'LDEQ':([5,12,13,14,15,16,17,18,57,58,60,61,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,100,101,132,134,],[39,-28,-31,-46,-47,-48,-49,-50,39,-28,39,39,-45,-32,-33,-34,-35,-36,None,None,None,None,39,39,39,39,39,-51,-52,-53,-54,-64,39,39,39,39,]),'GD':([5,12,13,14,15,16,17,18,57,58,60,61,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,100,101,132,134,],[40,-28,-31,-46,-47,-48,-49,-50,40,-28,40,40,-45,-32,-33,-34,-35,-36,None,None,None,None,40,40,40,40,40,-51,-52,-53,-54,-64,40,40,40,40,]),'GDEQ':([5,12,13,14,15,16,17,18,57,58,60,61,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,100,101,132,134,],[41,-28,-31,-46,-47,-48,-49,-50,41,-28,41,41,-45,-32,-33,-34,-35,-36,None,None,None,None,41,41,41,41,41,-51,-52,-53,-54,-64,41,41,41,41,]),'EQUALEQUAL':([5,12,13,14,15,16,17,18,57,58,60,61,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,100,101,132,134,],[42,-28,-31,-46,-47,-48,-49,-50,42,-28,42,42,-45,-32,-33,-34,-35,-36,-37,-38,-39,-40,None,None,42,42,42,-51,-52,-53,-54,-64,42,42,42,42,]),'NOTEQ':([5,12,13,14,15,16,17,18,57,58,60,61,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,100,101,132,134,],[43,-28,-31,-46,-47,-48,-49,-50,43,-28,43,43,-45,-32,-33,-34,-35,-36,-37,-38,-39,-40,None,None,43,43,43,-51,-52,-53,-54,-64,43,43,43,43,]),'AND':([5,12,13,14,15,16,17,18,57,58,60,61,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,100,101,132,134,],[44,-28,-31,-46,-47,-48,-49,-50,44,-28,44,44,-45,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,44,-51,-52,-53,-54,-64,44,44,44,44,]),'OR':([5,12,13,14,15,16,17,18,57,58,60,61,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94,100,101,132,134,],[45,-28,-31,-46,-47,-48,-49,-50,45,-28,45,45,-45,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,45,-51,-52,-53,-54,-64,45,45,45,45,]),'EQUALS':([12,59,],[46,95,]),'RPAREN':([13,14,15,16,17,18,57,58,63,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,83,84,94,96,99,100,103,104,105,110,118,],[-31,-46,-47,-48,-49,-50,94,-28,-45,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-51,-52,-53,-54,-64,-72,108,109,111,-17,-18,-20,-19,]),'START':([13,14,15,16,17,18,58,60,61,63,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,83,84,94,111,125,132,],[-31,-46,-47,-48,-49,-50,-28,97,98,-45,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-51,-52,-53,-54,-64,115,131,137,]),'RBRACE':([19,47,48,49,50,51,52,53,54,55,56,85,86,87,88,89,90,91,92,93,],[-72,81,82,83,84,-55,-72,-72,-72,-72,-72,-56,-55,-58,-57,-60,-59,-62,-61,-63,]),'COMMA':([110,],[114,]),'ELSE':([117,120,121,124,143,],[-72,125,-66,-67,-68,]),'ELSE_IF':([117,120,121,124,143,],[-72,127,-66,-67,-68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'language':([0,106,107,119,136,140,],[2,112,113,122,139,142,]),'empty':([0,19,32,52,53,54,55,56,96,106,107,117,119,120,122,136,140,],[3,51,66,86,88,90,92,92,105,66,66,121,66,126,130,66,66,]),'line':([0,32,106,107,119,136,140,],[4,65,4,4,4,4,4,]),'expression':([0,20,22,23,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,64,95,106,107,119,127,129,136,140,],[5,57,60,61,63,5,67,68,69,70,71,72,73,74,75,76,77,78,79,80,100,101,5,5,5,132,134,5,5,]),'var_assign':([0,32,106,107,119,136,140,],[6,6,6,6,6,6,6,]),'func_assign':([0,32,106,107,119,136,140,],[7,7,7,7,7,7,7,]),'iterative':([0,32,106,107,119,136,140,],[8,8,8,8,8,8,8,]),'conditional':([0,32,106,107,119,136,140,],[9,9,9,9,9,9,9,]),'output':([0,32,106,107,119,136,140,],[10,10,10,10,10,10,10,]),'input':([0,32,106,107,119,136,140,],[11,11,11,11,11,11,11,]),'expression_operation':([0,20,22,23,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,64,95,106,107,119,127,129,136,140,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'datatype':([0,32,96,106,107,114,119,136,140,],[21,21,102,21,21,102,21,21,21,]),'output_print':([0,32,106,107,119,136,140,],[24,24,24,24,24,24,24,]),'int_type_array':([19,52,],[47,85,]),'float_type_array':([19,53,],[48,87,]),'string_type_array':([19,54,],[49,89,]),'bool_type_array':([19,55,56,],[50,91,93,]),'parameters':([96,],[103,]),'first_param':([96,114,],[104,118,]),'else_if_blocks':([117,],[120,]),'else_block':([120,],[123,]),'else_if_block':([120,],[124,]),'return_stmt':([122,],[128,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> language','start',1,'p_start','uwulyzer.py',137),
  ('start -> empty','start',1,'p_start','uwulyzer.py',138),
  ('language -> language NEWLINE line','language',3,'p_language','uwulyzer.py',167),
  ('language -> line','language',1,'p_language','uwulyzer.py',168),
  ('line -> expression','line',1,'p_line','uwulyzer.py',190),
  ('line -> var_assign','line',1,'p_line','uwulyzer.py',191),
  ('line -> func_assign','line',1,'p_line','uwulyzer.py',192),
  ('line -> iterative','line',1,'p_line','uwulyzer.py',193),
  ('line -> conditional','line',1,'p_line','uwulyzer.py',194),
  ('line -> output','line',1,'p_line','uwulyzer.py',195),
  ('line -> input','line',1,'p_line','uwulyzer.py',196),
  ('line -> empty','line',1,'p_line','uwulyzer.py',197),
  ('func_assign -> datatype NAME LPAREN parameters RPAREN START NEWLINE language return_stmt STOP','func_assign',10,'p_func_assign','uwulyzer.py',206),
  ('return_stmt -> RETURN expression NEWLINE','return_stmt',3,'p_return_stmt','uwulyzer.py',214),
  ('return_stmt -> RETURN NEWLINE','return_stmt',2,'p_return_stmt','uwulyzer.py',215),
  ('return_stmt -> empty','return_stmt',1,'p_return_stmt','uwulyzer.py',216),
  ('parameters -> first_param','parameters',1,'p_parameters','uwulyzer.py',230),
  ('parameters -> empty','parameters',1,'p_parameters','uwulyzer.py',231),
  ('first_param -> datatype NAME COMMA first_param','first_param',4,'p_first_param','uwulyzer.py',239),
  ('first_param -> datatype NAME','first_param',2,'p_first_param','uwulyzer.py',240),
  ('datatype -> INT_TYPE','datatype',1,'p_datatype','uwulyzer.py',253),
  ('datatype -> FLOAT_TYPE','datatype',1,'p_datatype','uwulyzer.py',254),
  ('datatype -> STRING_TYPE','datatype',1,'p_datatype','uwulyzer.py',255),
  ('datatype -> VOID_TYPE','datatype',1,'p_datatype','uwulyzer.py',256),
  ('input -> READ LPAREN NAME RPAREN','input',4,'p_input','uwulyzer.py',263),
  ('output -> output_print','output',1,'p_output','uwulyzer.py',273),
  ('output_print -> PRINT LPAREN expression RPAREN','output_print',4,'p_output_print','uwulyzer.py',283),
  ('expression -> NAME','expression',1,'p_expression_var_assign','uwulyzer.py',293),
  ('var_assign -> datatype NAME EQUALS expression','var_assign',4,'p_var_assign','uwulyzer.py',302),
  ('var_assign -> NAME EQUALS expression','var_assign',3,'p_var_assign','uwulyzer.py',303),
  ('expression -> expression_operation','expression',1,'p_expression','uwulyzer.py',312),
  ('expression_operation -> expression MULTIPLY expression','expression_operation',3,'p_expression_operation','uwulyzer.py',321),
  ('expression_operation -> expression DIVIDE expression','expression_operation',3,'p_expression_operation','uwulyzer.py',322),
  ('expression_operation -> expression MODULO expression','expression_operation',3,'p_expression_operation','uwulyzer.py',323),
  ('expression_operation -> expression PLUS expression','expression_operation',3,'p_expression_operation','uwulyzer.py',324),
  ('expression_operation -> expression MINUS expression','expression_operation',3,'p_expression_operation','uwulyzer.py',325),
  ('expression_operation -> expression LD expression','expression_operation',3,'p_expression_operation','uwulyzer.py',326),
  ('expression_operation -> expression LDEQ expression','expression_operation',3,'p_expression_operation','uwulyzer.py',327),
  ('expression_operation -> expression GD expression','expression_operation',3,'p_expression_operation','uwulyzer.py',328),
  ('expression_operation -> expression GDEQ expression','expression_operation',3,'p_expression_operation','uwulyzer.py',329),
  ('expression_operation -> expression EQUALEQUAL expression','expression_operation',3,'p_expression_operation','uwulyzer.py',330),
  ('expression_operation -> expression NOTEQ expression','expression_operation',3,'p_expression_operation','uwulyzer.py',331),
  ('expression_operation -> expression AND expression','expression_operation',3,'p_expression_operation','uwulyzer.py',332),
  ('expression_operation -> expression OR expression','expression_operation',3,'p_expression_operation','uwulyzer.py',333),
  ('expression_operation -> NOT expression','expression_operation',2,'p_expression_operation_not','uwulyzer.py',340),
  ('expression -> INT','expression',1,'p_expression_data_type','uwulyzer.py',348),
  ('expression -> FLOAT','expression',1,'p_expression_data_type','uwulyzer.py',349),
  ('expression -> STRING','expression',1,'p_expression_data_type','uwulyzer.py',350),
  ('expression -> TRUE','expression',1,'p_expression_data_type','uwulyzer.py',351),
  ('expression -> FALSE','expression',1,'p_expression_data_type','uwulyzer.py',352),
  ('expression -> LBRACE int_type_array RBRACE','expression',3,'p_expression_int_array','uwulyzer.py',359),
  ('expression -> LBRACE float_type_array RBRACE','expression',3,'p_expression_float_array','uwulyzer.py',366),
  ('expression -> LBRACE string_type_array RBRACE','expression',3,'p_expression_string_array','uwulyzer.py',373),
  ('expression -> LBRACE bool_type_array RBRACE','expression',3,'p_expression_bool_array','uwulyzer.py',380),
  ('int_type_array -> empty','int_type_array',1,'p_int_type_array','uwulyzer.py',388),
  ('int_type_array -> INT int_type_array','int_type_array',2,'p_int_type_array','uwulyzer.py',389),
  ('float_type_array -> empty','float_type_array',1,'p_float_type_array','uwulyzer.py',402),
  ('float_type_array -> FLOAT float_type_array','float_type_array',2,'p_float_type_array','uwulyzer.py',403),
  ('string_type_array -> empty','string_type_array',1,'p_string_type_array','uwulyzer.py',416),
  ('string_type_array -> STRING string_type_array','string_type_array',2,'p_string_type_array','uwulyzer.py',417),
  ('bool_type_array -> empty','bool_type_array',1,'p_bool_type_array','uwulyzer.py',430),
  ('bool_type_array -> TRUE bool_type_array','bool_type_array',2,'p_bool_type_array','uwulyzer.py',431),
  ('bool_type_array -> FALSE bool_type_array','bool_type_array',2,'p_bool_type_array','uwulyzer.py',432),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parenthesis','uwulyzer.py',447),
  ('conditional -> IF expression START NEWLINE language STOP else_if_blocks else_block','conditional',8,'p_conditional','uwulyzer.py',456),
  ('else_if_blocks -> empty','else_if_blocks',1,'p_else_if_blocks','uwulyzer.py',465),
  ('else_if_blocks -> else_if_blocks else_if_block','else_if_blocks',2,'p_else_if_blocks','uwulyzer.py',466),
  ('else_if_block -> ELSE_IF expression START NEWLINE language STOP','else_if_block',6,'p_else_if_block','uwulyzer.py',481),
  ('else_block -> ELSE START NEWLINE language STOP','else_block',5,'p_else_block','uwulyzer.py',490),
  ('else_block -> empty','else_block',1,'p_else_block','uwulyzer.py',491),
  ('iterative -> WHILE expression START NEWLINE language STOP','iterative',6,'p_iterative','uwulyzer.py',504),
  ('empty -> <empty>','empty',0,'p_empty','uwulyzer.py',518),
]
