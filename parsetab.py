
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORnonassocEQUALEQUALNOTEQnonassocLDLDEQGDGDEQleftPLUSMINUSleftMULTIPLYDIVIDEMODULOrightNOTAND COMMA DIVIDE ELSE ELSE_IF EQUALEQUAL EQUALS FALSE FLOAT FLOAT_TYPE GD GDEQ IF INT INT_TYPE LBRACE LD LDEQ LPAREN MINUS MODULO MULTIPLY NAME NEWLINE NOT NOTEQ OR PLUS PRINT RBRACE READ RETURN RPAREN START STOP STRING STRING_TYPE TRUE VOID_TYPE WHILE\n    start : language\n          | empty\n    \n    language : language NEWLINE line\n             | line\n    \n    line : expression\n         | var_assign\n         | func_assign\n         | iterative\n         | conditional\n         | func_call\n         | output\n         | input\n         | empty\n    \n    func_call : NAME LPAREN pars RPAREN\n    \n    pars : expression\n         | expression COMMA expression\n    \n    func_assign     :   datatype NAME LPAREN parameters RPAREN START NEWLINE language return_stmt STOP\n    \n    return_stmt     :   RETURN expression NEWLINE\n                    |   RETURN NEWLINE\n                    |   empty\n\n    \n\n    parameters      :   first_param\n                    |   empty\n    \n    first_param     :   datatype NAME COMMA first_param\n                    |   datatype NAME\n\n    \n\n    datatype    :   INT_TYPE\n                |   FLOAT_TYPE\n                |   STRING_TYPE\n                |   VOID_TYPE\n    \n    input : READ LPAREN NAME RPAREN\n    \n    output : output_print\n    \n    output_print : PRINT LPAREN expression RPAREN\n    \n    expression : NAME\n    \n    var_assign : datatype NAME EQUALS expression\n               | NAME EQUALS expression\n    \n    expression : math\n\n    \n    expression : str\n\n    \n    math : math MULTIPLY math\n         | math DIVIDE math\n         | math MODULO math\n         | math PLUS math\n         | math MINUS math\n         | math LD math\n         | math LDEQ math\n         | math GD math\n         | math GDEQ math\n         | math EQUALEQUAL math\n         | math NOTEQ math\n         | math AND math\n         | math OR math\n         | NOT math\n         | MINUS math\n\n    \n    math    : INT\n            | FLOAT\n            | TRUE\n            | FALSE\n    \n    str  : str PLUS str\n         | str LD str\n         | str LDEQ str\n         | str GD str\n         | str GDEQ str\n         | str EQUALEQUAL str\n         | str NOTEQ str\n\n    \n    str     : STRING\n    \n    math : NAME\n    \n    str : NAME\n    \n    expression : LBRACE int_type_array RBRACE\n    \n    expression : LBRACE string_type_array RBRACE\n    \n    int_type_array : math\n                   | math COMMA int_type_array \n    \n    string_type_array : str\n                      | str COMMA string_type_array\n    \n    math : LPAREN math RPAREN\n    \n    str : LPAREN str RPAREN\n    \n    conditional : IF expression START NEWLINE language STOP else_if_blocks else_block \n    \n    else_if_blocks : empty\n                   | else_if_block else_if_blocks\n    \n    else_if_block : ELSE_IF expression START NEWLINE language STOP\n    \n    else_block : ELSE START NEWLINE language STOP\n               | empty\n    \n    iterative : WHILE expression START NEWLINE language STOP\n    \n    empty : \n\n    '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,25,26,27,28,29,35,67,70,71,73,75,76,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,108,109,114,118,125,126,134,135,138,139,140,143,145,146,153,161,162,],[-81,0,-1,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-32,-35,-36,-30,-52,-53,-54,-55,-63,-81,-32,-51,-64,-50,-3,-13,-34,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-56,-65,-57,-58,-59,-60,-61,-62,-66,-67,-72,-73,-14,-33,-29,-31,-80,-81,-81,-75,-81,-74,-79,-76,-17,-78,-77,]),'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,25,26,27,28,29,35,67,70,71,73,75,76,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,108,109,110,111,114,118,123,124,125,126,130,131,133,134,135,137,138,139,140,142,143,145,146,149,151,152,153,154,156,157,159,160,161,162,],[-81,35,-13,-4,-5,-6,-7,-8,-9,-10,-11,-12,-32,-35,-36,-30,-52,-53,-54,-55,-63,-81,-32,-51,-64,-50,-3,-13,-34,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-56,-65,-57,-58,-59,-60,-61,-62,-66,-67,-72,-73,123,124,-14,-33,-81,-81,-29,-31,35,35,137,-80,-81,-81,-81,-75,-81,35,-74,-79,-76,155,156,157,-17,158,-81,-81,35,35,-78,-77,]),'NAME':([0,16,17,18,19,20,23,24,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,69,72,74,95,104,105,106,115,119,123,124,137,141,149,156,157,],[13,62,63,62,67,67,71,71,-25,-26,-27,-28,13,67,67,71,71,71,71,71,71,71,71,71,71,71,71,71,94,94,94,94,94,94,94,112,71,67,94,71,94,67,67,128,13,13,13,67,67,13,13,]),'LBRACE':([0,19,20,35,36,37,74,106,115,123,124,137,141,149,156,157,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'WHILE':([0,35,123,124,137,156,157,],[19,19,19,19,19,19,19,]),'IF':([0,35,123,124,137,156,157,],[20,20,20,20,20,20,20,]),'READ':([0,35,123,124,137,156,157,],[22,22,22,22,22,22,22,]),'NOT':([0,16,18,19,20,23,24,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,72,74,104,106,115,123,124,137,141,149,156,157,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'MINUS':([0,13,14,16,18,19,20,23,24,25,26,27,28,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,60,62,64,67,70,71,72,73,74,80,81,82,83,84,85,86,87,88,89,90,91,92,104,106,108,115,123,124,137,141,149,156,157,],[23,-64,42,23,23,23,23,23,23,-52,-53,-54,-55,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,42,-64,42,-64,-51,-64,23,-50,23,-37,-38,-39,-40,-41,42,42,42,42,42,42,42,42,23,23,-72,23,23,23,23,23,23,23,23,]),'INT':([0,16,18,19,20,23,24,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,72,74,104,106,115,123,124,137,141,149,156,157,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'FLOAT':([0,16,18,19,20,23,24,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,72,74,104,106,115,123,124,137,141,149,156,157,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'TRUE':([0,16,18,19,20,23,24,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,72,74,104,106,115,123,124,137,141,149,156,157,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'FALSE':([0,16,18,19,20,23,24,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,72,74,104,106,115,123,124,137,141,149,156,157,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'LPAREN':([0,13,16,18,19,20,22,23,24,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,72,74,95,104,105,106,115,123,124,137,141,149,156,157,],[18,37,18,18,18,18,69,72,72,74,18,18,18,72,72,72,72,72,72,72,72,72,72,72,72,72,95,95,95,95,95,95,95,107,72,18,95,72,95,18,18,18,18,18,18,18,18,18,]),'STRING':([0,16,18,19,20,35,36,37,51,52,53,54,55,56,57,74,95,105,106,115,123,124,137,141,149,156,157,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'INT_TYPE':([0,35,107,123,124,132,137,156,157,],[30,30,30,30,30,30,30,30,30,]),'FLOAT_TYPE':([0,35,107,123,124,132,137,156,157,],[31,31,31,31,31,31,31,31,31,]),'STRING_TYPE':([0,35,107,123,124,132,137,156,157,],[32,32,32,32,32,32,32,32,32,]),'VOID_TYPE':([0,35,107,123,124,132,137,156,157,],[33,33,33,33,33,33,33,33,33,]),'PRINT':([0,35,123,124,137,156,157,],[34,34,34,34,34,34,34,]),'STOP':([4,5,6,7,8,9,10,11,12,13,14,15,21,25,26,27,28,29,35,67,70,71,73,75,76,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,108,109,114,118,123,124,125,126,130,131,134,135,137,138,139,140,142,143,145,146,148,150,153,155,156,157,158,159,160,161,162,],[-4,-5,-6,-7,-8,-9,-10,-11,-12,-32,-35,-36,-30,-52,-53,-54,-55,-63,-81,-32,-51,-64,-50,-3,-13,-34,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-56,-65,-57,-58,-59,-60,-61,-62,-66,-67,-72,-73,-14,-33,-81,-81,-29,-31,134,135,-80,-81,-81,-81,-75,-81,-81,-74,-79,-76,153,-20,-17,-19,-81,-81,-18,161,162,-78,-77,]),'RETURN':([4,5,6,7,8,9,10,11,12,13,14,15,21,25,26,27,28,29,35,67,70,71,73,75,76,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,108,109,114,118,125,126,134,135,137,138,139,140,142,143,145,146,153,161,162,],[-4,-5,-6,-7,-8,-9,-10,-11,-12,-32,-35,-36,-30,-52,-53,-54,-55,-63,-81,-32,-51,-64,-50,-3,-13,-34,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-56,-65,-57,-58,-59,-60,-61,-62,-66,-67,-72,-73,-14,-33,-29,-31,-80,-81,-81,-81,-75,-81,149,-74,-79,-76,-17,-78,-77,]),'EQUALS':([13,63,],[36,106,]),'MULTIPLY':([13,14,25,26,27,28,60,62,64,67,70,71,73,80,81,82,83,84,85,86,87,88,89,90,91,92,108,],[-64,38,-52,-53,-54,-55,38,-64,38,-64,38,-64,-50,-37,-38,-39,38,38,38,38,38,38,38,38,38,38,-72,]),'DIVIDE':([13,14,25,26,27,28,60,62,64,67,70,71,73,80,81,82,83,84,85,86,87,88,89,90,91,92,108,],[-64,39,-52,-53,-54,-55,39,-64,39,-64,39,-64,-50,-37,-38,-39,39,39,39,39,39,39,39,39,39,39,-72,]),'MODULO':([13,14,25,26,27,28,60,62,64,67,70,71,73,80,81,82,83,84,85,86,87,88,89,90,91,92,108,],[-64,40,-52,-53,-54,-55,40,-64,40,-64,40,-64,-50,-37,-38,-39,40,40,40,40,40,40,40,40,40,40,-72,]),'PLUS':([13,14,15,25,26,27,28,29,60,61,62,64,65,67,70,71,73,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,108,109,],[-64,41,51,-52,-53,-54,-55,-63,41,51,-64,41,51,-64,-51,-64,-50,-37,-38,-39,-40,-41,41,41,41,41,41,41,41,41,-56,-65,51,51,51,51,51,51,-72,-73,]),'LD':([13,14,15,25,26,27,28,29,60,61,62,64,65,67,70,71,73,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,108,109,],[-64,43,52,-52,-53,-54,-55,-63,43,52,-64,43,52,-64,-51,-64,-50,-37,-38,-39,-40,-41,None,None,None,None,43,43,43,43,-56,-65,None,None,None,None,52,52,-72,-73,]),'LDEQ':([13,14,15,25,26,27,28,29,60,61,62,64,65,67,70,71,73,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,108,109,],[-64,44,53,-52,-53,-54,-55,-63,44,53,-64,44,53,-64,-51,-64,-50,-37,-38,-39,-40,-41,None,None,None,None,44,44,44,44,-56,-65,None,None,None,None,53,53,-72,-73,]),'GD':([13,14,15,25,26,27,28,29,60,61,62,64,65,67,70,71,73,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,108,109,],[-64,45,54,-52,-53,-54,-55,-63,45,54,-64,45,54,-64,-51,-64,-50,-37,-38,-39,-40,-41,None,None,None,None,45,45,45,45,-56,-65,None,None,None,None,54,54,-72,-73,]),'GDEQ':([13,14,15,25,26,27,28,29,60,61,62,64,65,67,70,71,73,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,108,109,],[-64,46,55,-52,-53,-54,-55,-63,46,55,-64,46,55,-64,-51,-64,-50,-37,-38,-39,-40,-41,None,None,None,None,46,46,46,46,-56,-65,None,None,None,None,55,55,-72,-73,]),'EQUALEQUAL':([13,14,15,25,26,27,28,29,60,61,62,64,65,67,70,71,73,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,108,109,],[-64,47,56,-52,-53,-54,-55,-63,47,56,-64,47,56,-64,-51,-64,-50,-37,-38,-39,-40,-41,-42,-43,-44,-45,None,None,47,47,-56,-65,-57,-58,-59,-60,None,None,-72,-73,]),'NOTEQ':([13,14,15,25,26,27,28,29,60,61,62,64,65,67,70,71,73,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,108,109,],[-64,48,57,-52,-53,-54,-55,-63,48,57,-64,48,57,-64,-51,-64,-50,-37,-38,-39,-40,-41,-42,-43,-44,-45,None,None,48,48,-56,-65,-57,-58,-59,-60,None,None,-72,-73,]),'AND':([13,14,25,26,27,28,60,62,64,67,70,71,73,80,81,82,83,84,85,86,87,88,89,90,91,92,108,],[-64,49,-52,-53,-54,-55,49,-64,49,-64,-51,-64,-50,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-72,]),'OR':([13,14,25,26,27,28,60,62,64,67,70,71,73,80,81,82,83,84,85,86,87,88,89,90,91,92,108,],[-64,50,-52,-53,-54,-55,50,-64,50,-64,-51,-64,-50,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-72,]),'START':([14,15,25,26,27,28,29,66,67,68,70,71,73,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,108,109,129,144,147,],[-35,-36,-52,-53,-54,-55,-63,110,-32,111,-51,-64,-50,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-56,-65,-57,-58,-59,-60,-61,-62,-66,-67,-72,-73,133,151,152,]),'COMMA':([14,15,25,26,27,28,29,60,61,62,67,70,71,73,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,108,109,128,],[-35,-36,-52,-53,-54,-55,-63,104,105,-64,-32,-51,-64,-50,115,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-56,-65,-57,-58,-59,-60,-61,-62,-66,-67,-72,-73,132,]),'RPAREN':([14,15,25,26,27,28,29,62,64,65,67,70,71,73,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,107,108,109,112,113,120,121,122,127,128,136,],[-35,-36,-52,-53,-54,-55,-63,-64,108,109,-32,-51,-64,-50,114,-15,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-56,-65,-57,-58,-59,-60,-61,-62,-66,-67,-81,-72,-73,125,126,129,-21,-22,-16,-24,-23,]),'RBRACE':([25,26,27,28,29,58,59,60,61,62,70,71,73,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,108,109,116,117,],[-52,-53,-54,-55,-63,102,103,-68,-70,-64,-51,-64,-50,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-56,-65,-57,-58,-59,-60,-61,-62,-72,-73,-69,-71,]),'ELSE':([135,138,139,140,146,162,],[-81,144,-75,-81,-76,-77,]),'ELSE_IF':([135,140,162,],[141,141,-77,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'language':([0,123,124,137,156,157,],[2,130,131,142,159,160,]),'empty':([0,35,107,123,124,135,137,138,140,142,156,157,],[3,76,122,76,76,139,76,145,139,150,76,76,]),'line':([0,35,123,124,137,156,157,],[4,75,4,4,4,4,4,]),'expression':([0,19,20,35,36,37,74,106,115,123,124,137,141,149,156,157,],[5,66,68,5,77,79,113,118,127,5,5,5,147,154,5,5,]),'var_assign':([0,35,123,124,137,156,157,],[6,6,6,6,6,6,6,]),'func_assign':([0,35,123,124,137,156,157,],[7,7,7,7,7,7,7,]),'iterative':([0,35,123,124,137,156,157,],[8,8,8,8,8,8,8,]),'conditional':([0,35,123,124,137,156,157,],[9,9,9,9,9,9,9,]),'func_call':([0,35,123,124,137,156,157,],[10,10,10,10,10,10,10,]),'output':([0,35,123,124,137,156,157,],[11,11,11,11,11,11,11,]),'input':([0,35,123,124,137,156,157,],[12,12,12,12,12,12,12,]),'math':([0,16,18,19,20,23,24,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,72,74,104,106,115,123,124,137,141,149,156,157,],[14,60,64,14,14,70,73,14,14,14,80,81,82,83,84,85,86,87,88,89,90,91,92,64,14,60,14,14,14,14,14,14,14,14,14,]),'str':([0,16,18,19,20,35,36,37,51,52,53,54,55,56,57,74,95,105,106,115,123,124,137,141,149,156,157,],[15,61,65,15,15,15,15,15,93,96,97,98,99,100,101,15,65,61,15,15,15,15,15,15,15,15,15,]),'datatype':([0,35,107,123,124,132,137,156,157,],[17,17,119,17,17,119,17,17,17,]),'output_print':([0,35,123,124,137,156,157,],[21,21,21,21,21,21,21,]),'int_type_array':([16,104,],[58,116,]),'string_type_array':([16,105,],[59,117,]),'pars':([37,],[78,]),'parameters':([107,],[120,]),'first_param':([107,132,],[121,136,]),'else_if_blocks':([135,140,],[138,146,]),'else_if_block':([135,140,],[140,140,]),'else_block':([138,],[143,]),'return_stmt':([142,],[148,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> language','start',1,'p_start','uwulyzer.py',146),
  ('start -> empty','start',1,'p_start','uwulyzer.py',147),
  ('language -> language NEWLINE line','language',3,'p_language','uwulyzer.py',191),
  ('language -> line','language',1,'p_language','uwulyzer.py',192),
  ('line -> expression','line',1,'p_line','uwulyzer.py',208),
  ('line -> var_assign','line',1,'p_line','uwulyzer.py',209),
  ('line -> func_assign','line',1,'p_line','uwulyzer.py',210),
  ('line -> iterative','line',1,'p_line','uwulyzer.py',211),
  ('line -> conditional','line',1,'p_line','uwulyzer.py',212),
  ('line -> func_call','line',1,'p_line','uwulyzer.py',213),
  ('line -> output','line',1,'p_line','uwulyzer.py',214),
  ('line -> input','line',1,'p_line','uwulyzer.py',215),
  ('line -> empty','line',1,'p_line','uwulyzer.py',216),
  ('func_call -> NAME LPAREN pars RPAREN','func_call',4,'p_func_call','uwulyzer.py',224),
  ('pars -> expression','pars',1,'p_pars','uwulyzer.py',230),
  ('pars -> expression COMMA expression','pars',3,'p_pars','uwulyzer.py',231),
  ('func_assign -> datatype NAME LPAREN parameters RPAREN START NEWLINE language return_stmt STOP','func_assign',10,'p_func_assign','uwulyzer.py',241),
  ('return_stmt -> RETURN expression NEWLINE','return_stmt',3,'p_return_stmt','uwulyzer.py',249),
  ('return_stmt -> RETURN NEWLINE','return_stmt',2,'p_return_stmt','uwulyzer.py',250),
  ('return_stmt -> empty','return_stmt',1,'p_return_stmt','uwulyzer.py',251),
  ('parameters -> first_param','parameters',1,'p_parameters','uwulyzer.py',266),
  ('parameters -> empty','parameters',1,'p_parameters','uwulyzer.py',267),
  ('first_param -> datatype NAME COMMA first_param','first_param',4,'p_first_param','uwulyzer.py',274),
  ('first_param -> datatype NAME','first_param',2,'p_first_param','uwulyzer.py',275),
  ('datatype -> INT_TYPE','datatype',1,'p_datatype','uwulyzer.py',287),
  ('datatype -> FLOAT_TYPE','datatype',1,'p_datatype','uwulyzer.py',288),
  ('datatype -> STRING_TYPE','datatype',1,'p_datatype','uwulyzer.py',289),
  ('datatype -> VOID_TYPE','datatype',1,'p_datatype','uwulyzer.py',290),
  ('input -> READ LPAREN NAME RPAREN','input',4,'p_input','uwulyzer.py',296),
  ('output -> output_print','output',1,'p_output','uwulyzer.py',305),
  ('output_print -> PRINT LPAREN expression RPAREN','output_print',4,'p_output_print','uwulyzer.py',314),
  ('expression -> NAME','expression',1,'p_expression_var_assign','uwulyzer.py',323),
  ('var_assign -> datatype NAME EQUALS expression','var_assign',4,'p_var_assign','uwulyzer.py',331),
  ('var_assign -> NAME EQUALS expression','var_assign',3,'p_var_assign','uwulyzer.py',332),
  ('expression -> math','expression',1,'p_expression_to_int','uwulyzer.py',347),
  ('expression -> str','expression',1,'p_expression_to_str','uwulyzer.py',356),
  ('math -> math MULTIPLY math','math',3,'p_math','uwulyzer.py',363),
  ('math -> math DIVIDE math','math',3,'p_math','uwulyzer.py',364),
  ('math -> math MODULO math','math',3,'p_math','uwulyzer.py',365),
  ('math -> math PLUS math','math',3,'p_math','uwulyzer.py',366),
  ('math -> math MINUS math','math',3,'p_math','uwulyzer.py',367),
  ('math -> math LD math','math',3,'p_math','uwulyzer.py',368),
  ('math -> math LDEQ math','math',3,'p_math','uwulyzer.py',369),
  ('math -> math GD math','math',3,'p_math','uwulyzer.py',370),
  ('math -> math GDEQ math','math',3,'p_math','uwulyzer.py',371),
  ('math -> math EQUALEQUAL math','math',3,'p_math','uwulyzer.py',372),
  ('math -> math NOTEQ math','math',3,'p_math','uwulyzer.py',373),
  ('math -> math AND math','math',3,'p_math','uwulyzer.py',374),
  ('math -> math OR math','math',3,'p_math','uwulyzer.py',375),
  ('math -> NOT math','math',2,'p_math','uwulyzer.py',376),
  ('math -> MINUS math','math',2,'p_math','uwulyzer.py',377),
  ('math -> INT','math',1,'p_math_expression_expression_data_type','uwulyzer.py',387),
  ('math -> FLOAT','math',1,'p_math_expression_expression_data_type','uwulyzer.py',388),
  ('math -> TRUE','math',1,'p_math_expression_expression_data_type','uwulyzer.py',389),
  ('math -> FALSE','math',1,'p_math_expression_expression_data_type','uwulyzer.py',390),
  ('str -> str PLUS str','str',3,'p_str','uwulyzer.py',397),
  ('str -> str LD str','str',3,'p_str','uwulyzer.py',398),
  ('str -> str LDEQ str','str',3,'p_str','uwulyzer.py',399),
  ('str -> str GD str','str',3,'p_str','uwulyzer.py',400),
  ('str -> str GDEQ str','str',3,'p_str','uwulyzer.py',401),
  ('str -> str EQUALEQUAL str','str',3,'p_str','uwulyzer.py',402),
  ('str -> str NOTEQ str','str',3,'p_str','uwulyzer.py',403),
  ('str -> STRING','str',1,'p_str_datatype','uwulyzer.py',411),
  ('math -> NAME','math',1,'p_math_var','uwulyzer.py',417),
  ('str -> NAME','str',1,'p_str_var','uwulyzer.py',423),
  ('expression -> LBRACE int_type_array RBRACE','expression',3,'p_expression_int_array','uwulyzer.py',430),
  ('expression -> LBRACE string_type_array RBRACE','expression',3,'p_expression_string_array','uwulyzer.py',437),
  ('int_type_array -> math','int_type_array',1,'p_math_type_array','uwulyzer.py',444),
  ('int_type_array -> math COMMA int_type_array','int_type_array',3,'p_math_type_array','uwulyzer.py',445),
  ('string_type_array -> str','string_type_array',1,'p_string_type_array','uwulyzer.py',459),
  ('string_type_array -> str COMMA string_type_array','string_type_array',3,'p_string_type_array','uwulyzer.py',460),
  ('math -> LPAREN math RPAREN','math',3,'p_math_parenthesis','uwulyzer.py',493),
  ('str -> LPAREN str RPAREN','str',3,'p_str_parenthesis','uwulyzer.py',499),
  ('conditional -> IF expression START NEWLINE language STOP else_if_blocks else_block','conditional',8,'p_conditional','uwulyzer.py',507),
  ('else_if_blocks -> empty','else_if_blocks',1,'p_else_if_blocks','uwulyzer.py',515),
  ('else_if_blocks -> else_if_block else_if_blocks','else_if_blocks',2,'p_else_if_blocks','uwulyzer.py',516),
  ('else_if_block -> ELSE_IF expression START NEWLINE language STOP','else_if_block',6,'p_else_if_block','uwulyzer.py',527),
  ('else_block -> ELSE START NEWLINE language STOP','else_block',5,'p_else_block','uwulyzer.py',535),
  ('else_block -> empty','else_block',1,'p_else_block','uwulyzer.py',536),
  ('iterative -> WHILE expression START NEWLINE language STOP','iterative',6,'p_iterative','uwulyzer.py',547),
  ('empty -> <empty>','empty',0,'p_empty','uwulyzer.py',560),
]
