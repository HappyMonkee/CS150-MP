Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> language
Rule 2     start -> empty
Rule 3     language -> language NEWLINE line
Rule 4     language -> line
Rule 5     line -> expression
Rule 6     line -> var_assign
Rule 7     line -> func_assign
Rule 8     line -> iterative
Rule 9     line -> conditional
Rule 10    line -> output
Rule 11    line -> input
Rule 12    line -> empty
Rule 13    func_assign -> datatype NAME LPAREN parameters RPAREN START NEWLINE language return_stmt STOP
Rule 14    return_stmt -> RETURN expression NEWLINE
Rule 15    return_stmt -> RETURN NEWLINE
Rule 16    return_stmt -> empty
Rule 17    parameters -> first_param
Rule 18    parameters -> empty
Rule 19    first_param -> datatype NAME COMMA first_param
Rule 20    first_param -> datatype NAME
Rule 21    datatype -> INT_TYPE
Rule 22    datatype -> FLOAT_TYPE
Rule 23    datatype -> STRING_TYPE
Rule 24    datatype -> VOID_TYPE
Rule 25    input -> READ LPAREN NAME RPAREN
Rule 26    output -> output_print
Rule 27    output_print -> PRINT LPAREN expression RPAREN
Rule 28    expression -> NAME
Rule 29    var_assign -> datatype NAME EQUALS expression
Rule 30    var_assign -> NAME EQUALS expression
Rule 31    expression -> expression_operation
Rule 32    expression_operation -> expression MULTIPLY expression
Rule 33    expression_operation -> expression DIVIDE expression
Rule 34    expression_operation -> expression MODULO expression
Rule 35    expression_operation -> expression PLUS expression
Rule 36    expression_operation -> expression MINUS expression
Rule 37    expression_operation -> expression LD expression
Rule 38    expression_operation -> expression LDEQ expression
Rule 39    expression_operation -> expression GD expression
Rule 40    expression_operation -> expression GDEQ expression
Rule 41    expression_operation -> expression EQUALEQUAL expression
Rule 42    expression_operation -> expression NOTEQ expression
Rule 43    expression_operation -> expression AND expression
Rule 44    expression_operation -> expression OR expression
Rule 45    expression_operation -> NOT expression
Rule 46    expression -> INT
Rule 47    expression -> FLOAT
Rule 48    expression -> STRING
Rule 49    expression -> TRUE
Rule 50    expression -> FALSE
Rule 51    expression -> LBRACE int_type_array RBRACE
Rule 52    expression -> LBRACE float_type_array RBRACE
Rule 53    expression -> LBRACE string_type_array RBRACE
Rule 54    expression -> LBRACE bool_type_array RBRACE
Rule 55    int_type_array -> empty
Rule 56    int_type_array -> INT int_type_array
Rule 57    float_type_array -> empty
Rule 58    float_type_array -> FLOAT float_type_array
Rule 59    string_type_array -> empty
Rule 60    string_type_array -> STRING string_type_array
Rule 61    bool_type_array -> empty
Rule 62    bool_type_array -> TRUE bool_type_array
Rule 63    bool_type_array -> FALSE bool_type_array
Rule 64    expression -> LPAREN expression RPAREN
Rule 65    conditional -> IF expression START NEWLINE language STOP else_if_blocks else_block
Rule 66    else_if_blocks -> empty
Rule 67    else_if_blocks -> else_if_blocks else_if_block
Rule 68    else_if_block -> ELSE_IF expression START NEWLINE language STOP
Rule 69    else_block -> ELSE START NEWLINE language STOP
Rule 70    else_block -> empty
Rule 71    iterative -> WHILE expression START NEWLINE language STOP
Rule 72    empty -> <empty>

Terminals, with rules where they appear

AND                  : 43
COMMA                : 19
DIVIDE               : 33
ELSE                 : 69
ELSE_IF              : 68
EQUALEQUAL           : 41
EQUALS               : 29 30
FALSE                : 50 63
FLOAT                : 47 58
FLOAT_TYPE           : 22
GD                   : 39
GDEQ                 : 40
IF                   : 65
INT                  : 46 56
INT_TYPE             : 21
LBRACE               : 51 52 53 54
LD                   : 37
LDEQ                 : 38
LPAREN               : 13 25 27 64
MINUS                : 36
MODULO               : 34
MULTIPLY             : 32
NAME                 : 13 19 20 25 28 29 30
NEWLINE              : 3 13 14 15 65 68 69 71
NOT                  : 45
NOTEQ                : 42
OR                   : 44
PLUS                 : 35
PRINT                : 27
RBRACE               : 51 52 53 54
READ                 : 25
RETURN               : 14 15
RPAREN               : 13 25 27 64
START                : 13 65 68 69 71
STOP                 : 13 65 68 69 71
STRING               : 48 60
STRING_TYPE          : 23
TRUE                 : 49 62
VOID_TYPE            : 24
WHILE                : 71
error                : 

Nonterminals, with rules where they appear

bool_type_array      : 54 62 63
conditional          : 9
datatype             : 13 19 20 29
else_block           : 65
else_if_block        : 67
else_if_blocks       : 65 67
empty                : 2 12 16 18 55 57 59 61 66 70
expression           : 5 14 27 29 30 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 64 65 68 71
expression_operation : 31
first_param          : 17 19
float_type_array     : 52 58
func_assign          : 7
input                : 11
int_type_array       : 51 56
iterative            : 8
language             : 1 3 13 65 68 69 71
line                 : 3 4
output               : 10
output_print         : 26
parameters           : 13
return_stmt          : 13
start                : 0
string_type_array    : 53 60
var_assign           : 6

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . language
    (2) start -> . empty
    (3) language -> . language NEWLINE line
    (4) language -> . line
    (72) empty -> .
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . func_assign
    (8) line -> . iterative
    (9) line -> . conditional
    (10) line -> . output
    (11) line -> . input
    (12) line -> . empty
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (29) var_assign -> . datatype NAME EQUALS expression
    (30) var_assign -> . NAME EQUALS expression
    (13) func_assign -> . datatype NAME LPAREN parameters RPAREN START NEWLINE language return_stmt STOP
    (71) iterative -> . WHILE expression START NEWLINE language STOP
    (65) conditional -> . IF expression START NEWLINE language STOP else_if_blocks else_block
    (26) output -> . output_print
    (25) input -> . READ LPAREN NAME RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression
    (21) datatype -> . INT_TYPE
    (22) datatype -> . FLOAT_TYPE
    (23) datatype -> . STRING_TYPE
    (24) datatype -> . VOID_TYPE
    (27) output_print -> . PRINT LPAREN expression RPAREN

    $end            reduce using rule 72 (empty -> .)
    NEWLINE         reduce using rule 72 (empty -> .)
    NAME            shift and go to state 12
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    READ            shift and go to state 25
    NOT             shift and go to state 26
    INT_TYPE        shift and go to state 27
    FLOAT_TYPE      shift and go to state 28
    STRING_TYPE     shift and go to state 29
    VOID_TYPE       shift and go to state 30
    PRINT           shift and go to state 31

    start                          shift and go to state 1
    language                       shift and go to state 2
    empty                          shift and go to state 3
    line                           shift and go to state 4
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    func_assign                    shift and go to state 7
    iterative                      shift and go to state 8
    conditional                    shift and go to state 9
    output                         shift and go to state 10
    input                          shift and go to state 11
    expression_operation           shift and go to state 13
    datatype                       shift and go to state 21
    output_print                   shift and go to state 24

state 1

    (0) S' -> start .



state 2

    (1) start -> language .
    (3) language -> language . NEWLINE line

    $end            reduce using rule 1 (start -> language .)
    NEWLINE         shift and go to state 32


state 3

    (2) start -> empty .
    (12) line -> empty .

  ! reduce/reduce conflict for $end resolved using rule 2 (start -> empty .)
    $end            reduce using rule 2 (start -> empty .)
    NEWLINE         reduce using rule 12 (line -> empty .)

  ! $end            [ reduce using rule 12 (line -> empty .) ]


state 4

    (4) language -> line .

    NEWLINE         reduce using rule 4 (language -> line .)
    $end            reduce using rule 4 (language -> line .)
    STOP            reduce using rule 4 (language -> line .)
    RETURN          reduce using rule 4 (language -> line .)


state 5

    (5) line -> expression .
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    NEWLINE         reduce using rule 5 (line -> expression .)
    $end            reduce using rule 5 (line -> expression .)
    STOP            reduce using rule 5 (line -> expression .)
    RETURN          reduce using rule 5 (line -> expression .)
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    LD              shift and go to state 38
    LDEQ            shift and go to state 39
    GD              shift and go to state 40
    GDEQ            shift and go to state 41
    EQUALEQUAL      shift and go to state 42
    NOTEQ           shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45


state 6

    (6) line -> var_assign .

    NEWLINE         reduce using rule 6 (line -> var_assign .)
    $end            reduce using rule 6 (line -> var_assign .)
    STOP            reduce using rule 6 (line -> var_assign .)
    RETURN          reduce using rule 6 (line -> var_assign .)


state 7

    (7) line -> func_assign .

    NEWLINE         reduce using rule 7 (line -> func_assign .)
    $end            reduce using rule 7 (line -> func_assign .)
    STOP            reduce using rule 7 (line -> func_assign .)
    RETURN          reduce using rule 7 (line -> func_assign .)


state 8

    (8) line -> iterative .

    NEWLINE         reduce using rule 8 (line -> iterative .)
    $end            reduce using rule 8 (line -> iterative .)
    STOP            reduce using rule 8 (line -> iterative .)
    RETURN          reduce using rule 8 (line -> iterative .)


state 9

    (9) line -> conditional .

    NEWLINE         reduce using rule 9 (line -> conditional .)
    $end            reduce using rule 9 (line -> conditional .)
    STOP            reduce using rule 9 (line -> conditional .)
    RETURN          reduce using rule 9 (line -> conditional .)


state 10

    (10) line -> output .

    NEWLINE         reduce using rule 10 (line -> output .)
    $end            reduce using rule 10 (line -> output .)
    STOP            reduce using rule 10 (line -> output .)
    RETURN          reduce using rule 10 (line -> output .)


state 11

    (11) line -> input .

    NEWLINE         reduce using rule 11 (line -> input .)
    $end            reduce using rule 11 (line -> input .)
    STOP            reduce using rule 11 (line -> input .)
    RETURN          reduce using rule 11 (line -> input .)


state 12

    (28) expression -> NAME .
    (30) var_assign -> NAME . EQUALS expression

    MULTIPLY        reduce using rule 28 (expression -> NAME .)
    DIVIDE          reduce using rule 28 (expression -> NAME .)
    MODULO          reduce using rule 28 (expression -> NAME .)
    PLUS            reduce using rule 28 (expression -> NAME .)
    MINUS           reduce using rule 28 (expression -> NAME .)
    LD              reduce using rule 28 (expression -> NAME .)
    LDEQ            reduce using rule 28 (expression -> NAME .)
    GD              reduce using rule 28 (expression -> NAME .)
    GDEQ            reduce using rule 28 (expression -> NAME .)
    EQUALEQUAL      reduce using rule 28 (expression -> NAME .)
    NOTEQ           reduce using rule 28 (expression -> NAME .)
    AND             reduce using rule 28 (expression -> NAME .)
    OR              reduce using rule 28 (expression -> NAME .)
    NEWLINE         reduce using rule 28 (expression -> NAME .)
    $end            reduce using rule 28 (expression -> NAME .)
    STOP            reduce using rule 28 (expression -> NAME .)
    RETURN          reduce using rule 28 (expression -> NAME .)
    EQUALS          shift and go to state 46


state 13

    (31) expression -> expression_operation .

    MULTIPLY        reduce using rule 31 (expression -> expression_operation .)
    DIVIDE          reduce using rule 31 (expression -> expression_operation .)
    MODULO          reduce using rule 31 (expression -> expression_operation .)
    PLUS            reduce using rule 31 (expression -> expression_operation .)
    MINUS           reduce using rule 31 (expression -> expression_operation .)
    LD              reduce using rule 31 (expression -> expression_operation .)
    LDEQ            reduce using rule 31 (expression -> expression_operation .)
    GD              reduce using rule 31 (expression -> expression_operation .)
    GDEQ            reduce using rule 31 (expression -> expression_operation .)
    EQUALEQUAL      reduce using rule 31 (expression -> expression_operation .)
    NOTEQ           reduce using rule 31 (expression -> expression_operation .)
    AND             reduce using rule 31 (expression -> expression_operation .)
    OR              reduce using rule 31 (expression -> expression_operation .)
    NEWLINE         reduce using rule 31 (expression -> expression_operation .)
    $end            reduce using rule 31 (expression -> expression_operation .)
    RPAREN          reduce using rule 31 (expression -> expression_operation .)
    START           reduce using rule 31 (expression -> expression_operation .)
    STOP            reduce using rule 31 (expression -> expression_operation .)
    RETURN          reduce using rule 31 (expression -> expression_operation .)


state 14

    (46) expression -> INT .

    MULTIPLY        reduce using rule 46 (expression -> INT .)
    DIVIDE          reduce using rule 46 (expression -> INT .)
    MODULO          reduce using rule 46 (expression -> INT .)
    PLUS            reduce using rule 46 (expression -> INT .)
    MINUS           reduce using rule 46 (expression -> INT .)
    LD              reduce using rule 46 (expression -> INT .)
    LDEQ            reduce using rule 46 (expression -> INT .)
    GD              reduce using rule 46 (expression -> INT .)
    GDEQ            reduce using rule 46 (expression -> INT .)
    EQUALEQUAL      reduce using rule 46 (expression -> INT .)
    NOTEQ           reduce using rule 46 (expression -> INT .)
    AND             reduce using rule 46 (expression -> INT .)
    OR              reduce using rule 46 (expression -> INT .)
    NEWLINE         reduce using rule 46 (expression -> INT .)
    $end            reduce using rule 46 (expression -> INT .)
    RPAREN          reduce using rule 46 (expression -> INT .)
    START           reduce using rule 46 (expression -> INT .)
    STOP            reduce using rule 46 (expression -> INT .)
    RETURN          reduce using rule 46 (expression -> INT .)


state 15

    (47) expression -> FLOAT .

    MULTIPLY        reduce using rule 47 (expression -> FLOAT .)
    DIVIDE          reduce using rule 47 (expression -> FLOAT .)
    MODULO          reduce using rule 47 (expression -> FLOAT .)
    PLUS            reduce using rule 47 (expression -> FLOAT .)
    MINUS           reduce using rule 47 (expression -> FLOAT .)
    LD              reduce using rule 47 (expression -> FLOAT .)
    LDEQ            reduce using rule 47 (expression -> FLOAT .)
    GD              reduce using rule 47 (expression -> FLOAT .)
    GDEQ            reduce using rule 47 (expression -> FLOAT .)
    EQUALEQUAL      reduce using rule 47 (expression -> FLOAT .)
    NOTEQ           reduce using rule 47 (expression -> FLOAT .)
    AND             reduce using rule 47 (expression -> FLOAT .)
    OR              reduce using rule 47 (expression -> FLOAT .)
    NEWLINE         reduce using rule 47 (expression -> FLOAT .)
    $end            reduce using rule 47 (expression -> FLOAT .)
    RPAREN          reduce using rule 47 (expression -> FLOAT .)
    START           reduce using rule 47 (expression -> FLOAT .)
    STOP            reduce using rule 47 (expression -> FLOAT .)
    RETURN          reduce using rule 47 (expression -> FLOAT .)


state 16

    (48) expression -> STRING .

    MULTIPLY        reduce using rule 48 (expression -> STRING .)
    DIVIDE          reduce using rule 48 (expression -> STRING .)
    MODULO          reduce using rule 48 (expression -> STRING .)
    PLUS            reduce using rule 48 (expression -> STRING .)
    MINUS           reduce using rule 48 (expression -> STRING .)
    LD              reduce using rule 48 (expression -> STRING .)
    LDEQ            reduce using rule 48 (expression -> STRING .)
    GD              reduce using rule 48 (expression -> STRING .)
    GDEQ            reduce using rule 48 (expression -> STRING .)
    EQUALEQUAL      reduce using rule 48 (expression -> STRING .)
    NOTEQ           reduce using rule 48 (expression -> STRING .)
    AND             reduce using rule 48 (expression -> STRING .)
    OR              reduce using rule 48 (expression -> STRING .)
    NEWLINE         reduce using rule 48 (expression -> STRING .)
    $end            reduce using rule 48 (expression -> STRING .)
    RPAREN          reduce using rule 48 (expression -> STRING .)
    START           reduce using rule 48 (expression -> STRING .)
    STOP            reduce using rule 48 (expression -> STRING .)
    RETURN          reduce using rule 48 (expression -> STRING .)


state 17

    (49) expression -> TRUE .

    MULTIPLY        reduce using rule 49 (expression -> TRUE .)
    DIVIDE          reduce using rule 49 (expression -> TRUE .)
    MODULO          reduce using rule 49 (expression -> TRUE .)
    PLUS            reduce using rule 49 (expression -> TRUE .)
    MINUS           reduce using rule 49 (expression -> TRUE .)
    LD              reduce using rule 49 (expression -> TRUE .)
    LDEQ            reduce using rule 49 (expression -> TRUE .)
    GD              reduce using rule 49 (expression -> TRUE .)
    GDEQ            reduce using rule 49 (expression -> TRUE .)
    EQUALEQUAL      reduce using rule 49 (expression -> TRUE .)
    NOTEQ           reduce using rule 49 (expression -> TRUE .)
    AND             reduce using rule 49 (expression -> TRUE .)
    OR              reduce using rule 49 (expression -> TRUE .)
    NEWLINE         reduce using rule 49 (expression -> TRUE .)
    $end            reduce using rule 49 (expression -> TRUE .)
    RPAREN          reduce using rule 49 (expression -> TRUE .)
    START           reduce using rule 49 (expression -> TRUE .)
    STOP            reduce using rule 49 (expression -> TRUE .)
    RETURN          reduce using rule 49 (expression -> TRUE .)


state 18

    (50) expression -> FALSE .

    MULTIPLY        reduce using rule 50 (expression -> FALSE .)
    DIVIDE          reduce using rule 50 (expression -> FALSE .)
    MODULO          reduce using rule 50 (expression -> FALSE .)
    PLUS            reduce using rule 50 (expression -> FALSE .)
    MINUS           reduce using rule 50 (expression -> FALSE .)
    LD              reduce using rule 50 (expression -> FALSE .)
    LDEQ            reduce using rule 50 (expression -> FALSE .)
    GD              reduce using rule 50 (expression -> FALSE .)
    GDEQ            reduce using rule 50 (expression -> FALSE .)
    EQUALEQUAL      reduce using rule 50 (expression -> FALSE .)
    NOTEQ           reduce using rule 50 (expression -> FALSE .)
    AND             reduce using rule 50 (expression -> FALSE .)
    OR              reduce using rule 50 (expression -> FALSE .)
    NEWLINE         reduce using rule 50 (expression -> FALSE .)
    $end            reduce using rule 50 (expression -> FALSE .)
    RPAREN          reduce using rule 50 (expression -> FALSE .)
    START           reduce using rule 50 (expression -> FALSE .)
    STOP            reduce using rule 50 (expression -> FALSE .)
    RETURN          reduce using rule 50 (expression -> FALSE .)


state 19

    (51) expression -> LBRACE . int_type_array RBRACE
    (52) expression -> LBRACE . float_type_array RBRACE
    (53) expression -> LBRACE . string_type_array RBRACE
    (54) expression -> LBRACE . bool_type_array RBRACE
    (55) int_type_array -> . empty
    (56) int_type_array -> . INT int_type_array
    (57) float_type_array -> . empty
    (58) float_type_array -> . FLOAT float_type_array
    (59) string_type_array -> . empty
    (60) string_type_array -> . STRING string_type_array
    (61) bool_type_array -> . empty
    (62) bool_type_array -> . TRUE bool_type_array
    (63) bool_type_array -> . FALSE bool_type_array
    (72) empty -> .

    INT             shift and go to state 52
    FLOAT           shift and go to state 53
    STRING          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    RBRACE          reduce using rule 72 (empty -> .)

    int_type_array                 shift and go to state 47
    float_type_array               shift and go to state 48
    string_type_array              shift and go to state 49
    bool_type_array                shift and go to state 50
    empty                          shift and go to state 51

state 20

    (64) expression -> LPAREN . expression RPAREN
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 57
    expression_operation           shift and go to state 13

state 21

    (29) var_assign -> datatype . NAME EQUALS expression
    (13) func_assign -> datatype . NAME LPAREN parameters RPAREN START NEWLINE language return_stmt STOP

    NAME            shift and go to state 59


state 22

    (71) iterative -> WHILE . expression START NEWLINE language STOP
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 60
    expression_operation           shift and go to state 13

state 23

    (65) conditional -> IF . expression START NEWLINE language STOP else_if_blocks else_block
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 61
    expression_operation           shift and go to state 13

state 24

    (26) output -> output_print .

    NEWLINE         reduce using rule 26 (output -> output_print .)
    $end            reduce using rule 26 (output -> output_print .)
    STOP            reduce using rule 26 (output -> output_print .)
    RETURN          reduce using rule 26 (output -> output_print .)


state 25

    (25) input -> READ . LPAREN NAME RPAREN

    LPAREN          shift and go to state 62


state 26

    (45) expression_operation -> NOT . expression
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 63
    expression_operation           shift and go to state 13

state 27

    (21) datatype -> INT_TYPE .

    NAME            reduce using rule 21 (datatype -> INT_TYPE .)


state 28

    (22) datatype -> FLOAT_TYPE .

    NAME            reduce using rule 22 (datatype -> FLOAT_TYPE .)


state 29

    (23) datatype -> STRING_TYPE .

    NAME            reduce using rule 23 (datatype -> STRING_TYPE .)


state 30

    (24) datatype -> VOID_TYPE .

    NAME            reduce using rule 24 (datatype -> VOID_TYPE .)


state 31

    (27) output_print -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 64


state 32

    (3) language -> language NEWLINE . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . func_assign
    (8) line -> . iterative
    (9) line -> . conditional
    (10) line -> . output
    (11) line -> . input
    (12) line -> . empty
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (29) var_assign -> . datatype NAME EQUALS expression
    (30) var_assign -> . NAME EQUALS expression
    (13) func_assign -> . datatype NAME LPAREN parameters RPAREN START NEWLINE language return_stmt STOP
    (71) iterative -> . WHILE expression START NEWLINE language STOP
    (65) conditional -> . IF expression START NEWLINE language STOP else_if_blocks else_block
    (26) output -> . output_print
    (25) input -> . READ LPAREN NAME RPAREN
    (72) empty -> .
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression
    (21) datatype -> . INT_TYPE
    (22) datatype -> . FLOAT_TYPE
    (23) datatype -> . STRING_TYPE
    (24) datatype -> . VOID_TYPE
    (27) output_print -> . PRINT LPAREN expression RPAREN

    NAME            shift and go to state 12
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    READ            shift and go to state 25
    NEWLINE         reduce using rule 72 (empty -> .)
    $end            reduce using rule 72 (empty -> .)
    STOP            reduce using rule 72 (empty -> .)
    RETURN          reduce using rule 72 (empty -> .)
    NOT             shift and go to state 26
    INT_TYPE        shift and go to state 27
    FLOAT_TYPE      shift and go to state 28
    STRING_TYPE     shift and go to state 29
    VOID_TYPE       shift and go to state 30
    PRINT           shift and go to state 31

    line                           shift and go to state 65
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    func_assign                    shift and go to state 7
    iterative                      shift and go to state 8
    conditional                    shift and go to state 9
    output                         shift and go to state 10
    input                          shift and go to state 11
    empty                          shift and go to state 66
    expression_operation           shift and go to state 13
    datatype                       shift and go to state 21
    output_print                   shift and go to state 24

state 33

    (32) expression_operation -> expression MULTIPLY . expression
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 67
    expression_operation           shift and go to state 13

state 34

    (33) expression_operation -> expression DIVIDE . expression
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 68
    expression_operation           shift and go to state 13

state 35

    (34) expression_operation -> expression MODULO . expression
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 69
    expression_operation           shift and go to state 13

state 36

    (35) expression_operation -> expression PLUS . expression
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 70
    expression_operation           shift and go to state 13

state 37

    (36) expression_operation -> expression MINUS . expression
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 71
    expression_operation           shift and go to state 13

state 38

    (37) expression_operation -> expression LD . expression
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 72
    expression_operation           shift and go to state 13

state 39

    (38) expression_operation -> expression LDEQ . expression
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 73
    expression_operation           shift and go to state 13

state 40

    (39) expression_operation -> expression GD . expression
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 74
    expression_operation           shift and go to state 13

state 41

    (40) expression_operation -> expression GDEQ . expression
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 75
    expression_operation           shift and go to state 13

state 42

    (41) expression_operation -> expression EQUALEQUAL . expression
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 76
    expression_operation           shift and go to state 13

state 43

    (42) expression_operation -> expression NOTEQ . expression
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 77
    expression_operation           shift and go to state 13

state 44

    (43) expression_operation -> expression AND . expression
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 78
    expression_operation           shift and go to state 13

state 45

    (44) expression_operation -> expression OR . expression
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 79
    expression_operation           shift and go to state 13

state 46

    (30) var_assign -> NAME EQUALS . expression
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 80
    expression_operation           shift and go to state 13

state 47

    (51) expression -> LBRACE int_type_array . RBRACE

    RBRACE          shift and go to state 81


state 48

    (52) expression -> LBRACE float_type_array . RBRACE

    RBRACE          shift and go to state 82


state 49

    (53) expression -> LBRACE string_type_array . RBRACE

    RBRACE          shift and go to state 83


state 50

    (54) expression -> LBRACE bool_type_array . RBRACE

    RBRACE          shift and go to state 84


state 51

    (55) int_type_array -> empty .
    (57) float_type_array -> empty .
    (59) string_type_array -> empty .
    (61) bool_type_array -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 55 (int_type_array -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 55 (int_type_array -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 55 (int_type_array -> empty .)
    RBRACE          reduce using rule 55 (int_type_array -> empty .)

  ! RBRACE          [ reduce using rule 57 (float_type_array -> empty .) ]
  ! RBRACE          [ reduce using rule 59 (string_type_array -> empty .) ]
  ! RBRACE          [ reduce using rule 61 (bool_type_array -> empty .) ]


state 52

    (56) int_type_array -> INT . int_type_array
    (55) int_type_array -> . empty
    (56) int_type_array -> . INT int_type_array
    (72) empty -> .

    INT             shift and go to state 52
    RBRACE          reduce using rule 72 (empty -> .)

    int_type_array                 shift and go to state 85
    empty                          shift and go to state 86

state 53

    (58) float_type_array -> FLOAT . float_type_array
    (57) float_type_array -> . empty
    (58) float_type_array -> . FLOAT float_type_array
    (72) empty -> .

    FLOAT           shift and go to state 53
    RBRACE          reduce using rule 72 (empty -> .)

    float_type_array               shift and go to state 87
    empty                          shift and go to state 88

state 54

    (60) string_type_array -> STRING . string_type_array
    (59) string_type_array -> . empty
    (60) string_type_array -> . STRING string_type_array
    (72) empty -> .

    STRING          shift and go to state 54
    RBRACE          reduce using rule 72 (empty -> .)

    string_type_array              shift and go to state 89
    empty                          shift and go to state 90

state 55

    (62) bool_type_array -> TRUE . bool_type_array
    (61) bool_type_array -> . empty
    (62) bool_type_array -> . TRUE bool_type_array
    (63) bool_type_array -> . FALSE bool_type_array
    (72) empty -> .

    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    RBRACE          reduce using rule 72 (empty -> .)

    bool_type_array                shift and go to state 91
    empty                          shift and go to state 92

state 56

    (63) bool_type_array -> FALSE . bool_type_array
    (61) bool_type_array -> . empty
    (62) bool_type_array -> . TRUE bool_type_array
    (63) bool_type_array -> . FALSE bool_type_array
    (72) empty -> .

    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    RBRACE          reduce using rule 72 (empty -> .)

    bool_type_array                shift and go to state 93
    empty                          shift and go to state 92

state 57

    (64) expression -> LPAREN expression . RPAREN
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    RPAREN          shift and go to state 94
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    LD              shift and go to state 38
    LDEQ            shift and go to state 39
    GD              shift and go to state 40
    GDEQ            shift and go to state 41
    EQUALEQUAL      shift and go to state 42
    NOTEQ           shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45


state 58

    (28) expression -> NAME .

    RPAREN          reduce using rule 28 (expression -> NAME .)
    MULTIPLY        reduce using rule 28 (expression -> NAME .)
    DIVIDE          reduce using rule 28 (expression -> NAME .)
    MODULO          reduce using rule 28 (expression -> NAME .)
    PLUS            reduce using rule 28 (expression -> NAME .)
    MINUS           reduce using rule 28 (expression -> NAME .)
    LD              reduce using rule 28 (expression -> NAME .)
    LDEQ            reduce using rule 28 (expression -> NAME .)
    GD              reduce using rule 28 (expression -> NAME .)
    GDEQ            reduce using rule 28 (expression -> NAME .)
    EQUALEQUAL      reduce using rule 28 (expression -> NAME .)
    NOTEQ           reduce using rule 28 (expression -> NAME .)
    AND             reduce using rule 28 (expression -> NAME .)
    OR              reduce using rule 28 (expression -> NAME .)
    START           reduce using rule 28 (expression -> NAME .)
    NEWLINE         reduce using rule 28 (expression -> NAME .)
    $end            reduce using rule 28 (expression -> NAME .)
    STOP            reduce using rule 28 (expression -> NAME .)
    RETURN          reduce using rule 28 (expression -> NAME .)


state 59

    (29) var_assign -> datatype NAME . EQUALS expression
    (13) func_assign -> datatype NAME . LPAREN parameters RPAREN START NEWLINE language return_stmt STOP

    EQUALS          shift and go to state 95
    LPAREN          shift and go to state 96


state 60

    (71) iterative -> WHILE expression . START NEWLINE language STOP
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    START           shift and go to state 97
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    LD              shift and go to state 38
    LDEQ            shift and go to state 39
    GD              shift and go to state 40
    GDEQ            shift and go to state 41
    EQUALEQUAL      shift and go to state 42
    NOTEQ           shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45


state 61

    (65) conditional -> IF expression . START NEWLINE language STOP else_if_blocks else_block
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    START           shift and go to state 98
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    LD              shift and go to state 38
    LDEQ            shift and go to state 39
    GD              shift and go to state 40
    GDEQ            shift and go to state 41
    EQUALEQUAL      shift and go to state 42
    NOTEQ           shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45


state 62

    (25) input -> READ LPAREN . NAME RPAREN

    NAME            shift and go to state 99


state 63

    (45) expression_operation -> NOT expression .
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    MULTIPLY        reduce using rule 45 (expression_operation -> NOT expression .)
    DIVIDE          reduce using rule 45 (expression_operation -> NOT expression .)
    MODULO          reduce using rule 45 (expression_operation -> NOT expression .)
    PLUS            reduce using rule 45 (expression_operation -> NOT expression .)
    MINUS           reduce using rule 45 (expression_operation -> NOT expression .)
    LD              reduce using rule 45 (expression_operation -> NOT expression .)
    LDEQ            reduce using rule 45 (expression_operation -> NOT expression .)
    GD              reduce using rule 45 (expression_operation -> NOT expression .)
    GDEQ            reduce using rule 45 (expression_operation -> NOT expression .)
    EQUALEQUAL      reduce using rule 45 (expression_operation -> NOT expression .)
    NOTEQ           reduce using rule 45 (expression_operation -> NOT expression .)
    AND             reduce using rule 45 (expression_operation -> NOT expression .)
    OR              reduce using rule 45 (expression_operation -> NOT expression .)
    NEWLINE         reduce using rule 45 (expression_operation -> NOT expression .)
    $end            reduce using rule 45 (expression_operation -> NOT expression .)
    RPAREN          reduce using rule 45 (expression_operation -> NOT expression .)
    START           reduce using rule 45 (expression_operation -> NOT expression .)
    STOP            reduce using rule 45 (expression_operation -> NOT expression .)
    RETURN          reduce using rule 45 (expression_operation -> NOT expression .)

  ! MULTIPLY        [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! MODULO          [ shift and go to state 35 ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! LD              [ shift and go to state 38 ]
  ! LDEQ            [ shift and go to state 39 ]
  ! GD              [ shift and go to state 40 ]
  ! GDEQ            [ shift and go to state 41 ]
  ! EQUALEQUAL      [ shift and go to state 42 ]
  ! NOTEQ           [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 64

    (27) output_print -> PRINT LPAREN . expression RPAREN
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 100
    expression_operation           shift and go to state 13

state 65

    (3) language -> language NEWLINE line .

    NEWLINE         reduce using rule 3 (language -> language NEWLINE line .)
    $end            reduce using rule 3 (language -> language NEWLINE line .)
    STOP            reduce using rule 3 (language -> language NEWLINE line .)
    RETURN          reduce using rule 3 (language -> language NEWLINE line .)


state 66

    (12) line -> empty .

    NEWLINE         reduce using rule 12 (line -> empty .)
    $end            reduce using rule 12 (line -> empty .)
    STOP            reduce using rule 12 (line -> empty .)
    RETURN          reduce using rule 12 (line -> empty .)


state 67

    (32) expression_operation -> expression MULTIPLY expression .
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    MULTIPLY        reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)
    MODULO          reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)
    PLUS            reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)
    MINUS           reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)
    LD              reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)
    LDEQ            reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)
    GD              reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)
    GDEQ            reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)
    EQUALEQUAL      reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)
    NOTEQ           reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)
    AND             reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)
    OR              reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)
    NEWLINE         reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)
    $end            reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)
    START           reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)
    STOP            reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)
    RETURN          reduce using rule 32 (expression_operation -> expression MULTIPLY expression .)

  ! MULTIPLY        [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! MODULO          [ shift and go to state 35 ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! LD              [ shift and go to state 38 ]
  ! LDEQ            [ shift and go to state 39 ]
  ! GD              [ shift and go to state 40 ]
  ! GDEQ            [ shift and go to state 41 ]
  ! EQUALEQUAL      [ shift and go to state 42 ]
  ! NOTEQ           [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 68

    (33) expression_operation -> expression DIVIDE expression .
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    MULTIPLY        reduce using rule 33 (expression_operation -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 33 (expression_operation -> expression DIVIDE expression .)
    MODULO          reduce using rule 33 (expression_operation -> expression DIVIDE expression .)
    PLUS            reduce using rule 33 (expression_operation -> expression DIVIDE expression .)
    MINUS           reduce using rule 33 (expression_operation -> expression DIVIDE expression .)
    LD              reduce using rule 33 (expression_operation -> expression DIVIDE expression .)
    LDEQ            reduce using rule 33 (expression_operation -> expression DIVIDE expression .)
    GD              reduce using rule 33 (expression_operation -> expression DIVIDE expression .)
    GDEQ            reduce using rule 33 (expression_operation -> expression DIVIDE expression .)
    EQUALEQUAL      reduce using rule 33 (expression_operation -> expression DIVIDE expression .)
    NOTEQ           reduce using rule 33 (expression_operation -> expression DIVIDE expression .)
    AND             reduce using rule 33 (expression_operation -> expression DIVIDE expression .)
    OR              reduce using rule 33 (expression_operation -> expression DIVIDE expression .)
    NEWLINE         reduce using rule 33 (expression_operation -> expression DIVIDE expression .)
    $end            reduce using rule 33 (expression_operation -> expression DIVIDE expression .)
    RPAREN          reduce using rule 33 (expression_operation -> expression DIVIDE expression .)
    START           reduce using rule 33 (expression_operation -> expression DIVIDE expression .)
    STOP            reduce using rule 33 (expression_operation -> expression DIVIDE expression .)
    RETURN          reduce using rule 33 (expression_operation -> expression DIVIDE expression .)

  ! MULTIPLY        [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! MODULO          [ shift and go to state 35 ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! LD              [ shift and go to state 38 ]
  ! LDEQ            [ shift and go to state 39 ]
  ! GD              [ shift and go to state 40 ]
  ! GDEQ            [ shift and go to state 41 ]
  ! EQUALEQUAL      [ shift and go to state 42 ]
  ! NOTEQ           [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 69

    (34) expression_operation -> expression MODULO expression .
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    MULTIPLY        reduce using rule 34 (expression_operation -> expression MODULO expression .)
    DIVIDE          reduce using rule 34 (expression_operation -> expression MODULO expression .)
    MODULO          reduce using rule 34 (expression_operation -> expression MODULO expression .)
    PLUS            reduce using rule 34 (expression_operation -> expression MODULO expression .)
    MINUS           reduce using rule 34 (expression_operation -> expression MODULO expression .)
    LD              reduce using rule 34 (expression_operation -> expression MODULO expression .)
    LDEQ            reduce using rule 34 (expression_operation -> expression MODULO expression .)
    GD              reduce using rule 34 (expression_operation -> expression MODULO expression .)
    GDEQ            reduce using rule 34 (expression_operation -> expression MODULO expression .)
    EQUALEQUAL      reduce using rule 34 (expression_operation -> expression MODULO expression .)
    NOTEQ           reduce using rule 34 (expression_operation -> expression MODULO expression .)
    AND             reduce using rule 34 (expression_operation -> expression MODULO expression .)
    OR              reduce using rule 34 (expression_operation -> expression MODULO expression .)
    NEWLINE         reduce using rule 34 (expression_operation -> expression MODULO expression .)
    $end            reduce using rule 34 (expression_operation -> expression MODULO expression .)
    RPAREN          reduce using rule 34 (expression_operation -> expression MODULO expression .)
    START           reduce using rule 34 (expression_operation -> expression MODULO expression .)
    STOP            reduce using rule 34 (expression_operation -> expression MODULO expression .)
    RETURN          reduce using rule 34 (expression_operation -> expression MODULO expression .)

  ! MULTIPLY        [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! MODULO          [ shift and go to state 35 ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! LD              [ shift and go to state 38 ]
  ! LDEQ            [ shift and go to state 39 ]
  ! GD              [ shift and go to state 40 ]
  ! GDEQ            [ shift and go to state 41 ]
  ! EQUALEQUAL      [ shift and go to state 42 ]
  ! NOTEQ           [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 70

    (35) expression_operation -> expression PLUS expression .
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    PLUS            reduce using rule 35 (expression_operation -> expression PLUS expression .)
    MINUS           reduce using rule 35 (expression_operation -> expression PLUS expression .)
    LD              reduce using rule 35 (expression_operation -> expression PLUS expression .)
    LDEQ            reduce using rule 35 (expression_operation -> expression PLUS expression .)
    GD              reduce using rule 35 (expression_operation -> expression PLUS expression .)
    GDEQ            reduce using rule 35 (expression_operation -> expression PLUS expression .)
    EQUALEQUAL      reduce using rule 35 (expression_operation -> expression PLUS expression .)
    NOTEQ           reduce using rule 35 (expression_operation -> expression PLUS expression .)
    AND             reduce using rule 35 (expression_operation -> expression PLUS expression .)
    OR              reduce using rule 35 (expression_operation -> expression PLUS expression .)
    NEWLINE         reduce using rule 35 (expression_operation -> expression PLUS expression .)
    $end            reduce using rule 35 (expression_operation -> expression PLUS expression .)
    RPAREN          reduce using rule 35 (expression_operation -> expression PLUS expression .)
    START           reduce using rule 35 (expression_operation -> expression PLUS expression .)
    STOP            reduce using rule 35 (expression_operation -> expression PLUS expression .)
    RETURN          reduce using rule 35 (expression_operation -> expression PLUS expression .)
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35

  ! MULTIPLY        [ reduce using rule 35 (expression_operation -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression_operation -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 35 (expression_operation -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! LD              [ shift and go to state 38 ]
  ! LDEQ            [ shift and go to state 39 ]
  ! GD              [ shift and go to state 40 ]
  ! GDEQ            [ shift and go to state 41 ]
  ! EQUALEQUAL      [ shift and go to state 42 ]
  ! NOTEQ           [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 71

    (36) expression_operation -> expression MINUS expression .
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    PLUS            reduce using rule 36 (expression_operation -> expression MINUS expression .)
    MINUS           reduce using rule 36 (expression_operation -> expression MINUS expression .)
    LD              reduce using rule 36 (expression_operation -> expression MINUS expression .)
    LDEQ            reduce using rule 36 (expression_operation -> expression MINUS expression .)
    GD              reduce using rule 36 (expression_operation -> expression MINUS expression .)
    GDEQ            reduce using rule 36 (expression_operation -> expression MINUS expression .)
    EQUALEQUAL      reduce using rule 36 (expression_operation -> expression MINUS expression .)
    NOTEQ           reduce using rule 36 (expression_operation -> expression MINUS expression .)
    AND             reduce using rule 36 (expression_operation -> expression MINUS expression .)
    OR              reduce using rule 36 (expression_operation -> expression MINUS expression .)
    NEWLINE         reduce using rule 36 (expression_operation -> expression MINUS expression .)
    $end            reduce using rule 36 (expression_operation -> expression MINUS expression .)
    RPAREN          reduce using rule 36 (expression_operation -> expression MINUS expression .)
    START           reduce using rule 36 (expression_operation -> expression MINUS expression .)
    STOP            reduce using rule 36 (expression_operation -> expression MINUS expression .)
    RETURN          reduce using rule 36 (expression_operation -> expression MINUS expression .)
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35

  ! MULTIPLY        [ reduce using rule 36 (expression_operation -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression_operation -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 36 (expression_operation -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! LD              [ shift and go to state 38 ]
  ! LDEQ            [ shift and go to state 39 ]
  ! GD              [ shift and go to state 40 ]
  ! GDEQ            [ shift and go to state 41 ]
  ! EQUALEQUAL      [ shift and go to state 42 ]
  ! NOTEQ           [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 72

    (37) expression_operation -> expression LD expression .
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    LD              reduce using rule 37 (expression_operation -> expression LD expression .)
    LDEQ            reduce using rule 37 (expression_operation -> expression LD expression .)
    GD              reduce using rule 37 (expression_operation -> expression LD expression .)
    GDEQ            reduce using rule 37 (expression_operation -> expression LD expression .)
    EQUALEQUAL      reduce using rule 37 (expression_operation -> expression LD expression .)
    NOTEQ           reduce using rule 37 (expression_operation -> expression LD expression .)
    AND             reduce using rule 37 (expression_operation -> expression LD expression .)
    OR              reduce using rule 37 (expression_operation -> expression LD expression .)
    NEWLINE         reduce using rule 37 (expression_operation -> expression LD expression .)
    $end            reduce using rule 37 (expression_operation -> expression LD expression .)
    RPAREN          reduce using rule 37 (expression_operation -> expression LD expression .)
    START           reduce using rule 37 (expression_operation -> expression LD expression .)
    STOP            reduce using rule 37 (expression_operation -> expression LD expression .)
    RETURN          reduce using rule 37 (expression_operation -> expression LD expression .)
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37

  ! MULTIPLY        [ reduce using rule 37 (expression_operation -> expression LD expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression_operation -> expression LD expression .) ]
  ! MODULO          [ reduce using rule 37 (expression_operation -> expression LD expression .) ]
  ! PLUS            [ reduce using rule 37 (expression_operation -> expression LD expression .) ]
  ! MINUS           [ reduce using rule 37 (expression_operation -> expression LD expression .) ]
  ! LD              [ shift and go to state 38 ]
  ! LDEQ            [ shift and go to state 39 ]
  ! GD              [ shift and go to state 40 ]
  ! GDEQ            [ shift and go to state 41 ]
  ! EQUALEQUAL      [ shift and go to state 42 ]
  ! NOTEQ           [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 73

    (38) expression_operation -> expression LDEQ expression .
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    LD              reduce using rule 38 (expression_operation -> expression LDEQ expression .)
    LDEQ            reduce using rule 38 (expression_operation -> expression LDEQ expression .)
    GD              reduce using rule 38 (expression_operation -> expression LDEQ expression .)
    GDEQ            reduce using rule 38 (expression_operation -> expression LDEQ expression .)
    EQUALEQUAL      reduce using rule 38 (expression_operation -> expression LDEQ expression .)
    NOTEQ           reduce using rule 38 (expression_operation -> expression LDEQ expression .)
    AND             reduce using rule 38 (expression_operation -> expression LDEQ expression .)
    OR              reduce using rule 38 (expression_operation -> expression LDEQ expression .)
    NEWLINE         reduce using rule 38 (expression_operation -> expression LDEQ expression .)
    $end            reduce using rule 38 (expression_operation -> expression LDEQ expression .)
    RPAREN          reduce using rule 38 (expression_operation -> expression LDEQ expression .)
    START           reduce using rule 38 (expression_operation -> expression LDEQ expression .)
    STOP            reduce using rule 38 (expression_operation -> expression LDEQ expression .)
    RETURN          reduce using rule 38 (expression_operation -> expression LDEQ expression .)
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37

  ! MULTIPLY        [ reduce using rule 38 (expression_operation -> expression LDEQ expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression_operation -> expression LDEQ expression .) ]
  ! MODULO          [ reduce using rule 38 (expression_operation -> expression LDEQ expression .) ]
  ! PLUS            [ reduce using rule 38 (expression_operation -> expression LDEQ expression .) ]
  ! MINUS           [ reduce using rule 38 (expression_operation -> expression LDEQ expression .) ]
  ! LD              [ shift and go to state 38 ]
  ! LDEQ            [ shift and go to state 39 ]
  ! GD              [ shift and go to state 40 ]
  ! GDEQ            [ shift and go to state 41 ]
  ! EQUALEQUAL      [ shift and go to state 42 ]
  ! NOTEQ           [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 74

    (39) expression_operation -> expression GD expression .
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    LD              reduce using rule 39 (expression_operation -> expression GD expression .)
    LDEQ            reduce using rule 39 (expression_operation -> expression GD expression .)
    GD              reduce using rule 39 (expression_operation -> expression GD expression .)
    GDEQ            reduce using rule 39 (expression_operation -> expression GD expression .)
    EQUALEQUAL      reduce using rule 39 (expression_operation -> expression GD expression .)
    NOTEQ           reduce using rule 39 (expression_operation -> expression GD expression .)
    AND             reduce using rule 39 (expression_operation -> expression GD expression .)
    OR              reduce using rule 39 (expression_operation -> expression GD expression .)
    NEWLINE         reduce using rule 39 (expression_operation -> expression GD expression .)
    $end            reduce using rule 39 (expression_operation -> expression GD expression .)
    RPAREN          reduce using rule 39 (expression_operation -> expression GD expression .)
    START           reduce using rule 39 (expression_operation -> expression GD expression .)
    STOP            reduce using rule 39 (expression_operation -> expression GD expression .)
    RETURN          reduce using rule 39 (expression_operation -> expression GD expression .)
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37

  ! MULTIPLY        [ reduce using rule 39 (expression_operation -> expression GD expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression_operation -> expression GD expression .) ]
  ! MODULO          [ reduce using rule 39 (expression_operation -> expression GD expression .) ]
  ! PLUS            [ reduce using rule 39 (expression_operation -> expression GD expression .) ]
  ! MINUS           [ reduce using rule 39 (expression_operation -> expression GD expression .) ]
  ! LD              [ shift and go to state 38 ]
  ! LDEQ            [ shift and go to state 39 ]
  ! GD              [ shift and go to state 40 ]
  ! GDEQ            [ shift and go to state 41 ]
  ! EQUALEQUAL      [ shift and go to state 42 ]
  ! NOTEQ           [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 75

    (40) expression_operation -> expression GDEQ expression .
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    LD              reduce using rule 40 (expression_operation -> expression GDEQ expression .)
    LDEQ            reduce using rule 40 (expression_operation -> expression GDEQ expression .)
    GD              reduce using rule 40 (expression_operation -> expression GDEQ expression .)
    GDEQ            reduce using rule 40 (expression_operation -> expression GDEQ expression .)
    EQUALEQUAL      reduce using rule 40 (expression_operation -> expression GDEQ expression .)
    NOTEQ           reduce using rule 40 (expression_operation -> expression GDEQ expression .)
    AND             reduce using rule 40 (expression_operation -> expression GDEQ expression .)
    OR              reduce using rule 40 (expression_operation -> expression GDEQ expression .)
    NEWLINE         reduce using rule 40 (expression_operation -> expression GDEQ expression .)
    $end            reduce using rule 40 (expression_operation -> expression GDEQ expression .)
    RPAREN          reduce using rule 40 (expression_operation -> expression GDEQ expression .)
    START           reduce using rule 40 (expression_operation -> expression GDEQ expression .)
    STOP            reduce using rule 40 (expression_operation -> expression GDEQ expression .)
    RETURN          reduce using rule 40 (expression_operation -> expression GDEQ expression .)
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37

  ! MULTIPLY        [ reduce using rule 40 (expression_operation -> expression GDEQ expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression_operation -> expression GDEQ expression .) ]
  ! MODULO          [ reduce using rule 40 (expression_operation -> expression GDEQ expression .) ]
  ! PLUS            [ reduce using rule 40 (expression_operation -> expression GDEQ expression .) ]
  ! MINUS           [ reduce using rule 40 (expression_operation -> expression GDEQ expression .) ]
  ! LD              [ shift and go to state 38 ]
  ! LDEQ            [ shift and go to state 39 ]
  ! GD              [ shift and go to state 40 ]
  ! GDEQ            [ shift and go to state 41 ]
  ! EQUALEQUAL      [ shift and go to state 42 ]
  ! NOTEQ           [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 76

    (41) expression_operation -> expression EQUALEQUAL expression .
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    EQUALEQUAL      reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .)
    NOTEQ           reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .)
    AND             reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .)
    OR              reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .)
    NEWLINE         reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .)
    $end            reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .)
    RPAREN          reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .)
    START           reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .)
    STOP            reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .)
    RETURN          reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .)
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    LD              shift and go to state 38
    LDEQ            shift and go to state 39
    GD              shift and go to state 40
    GDEQ            shift and go to state 41

  ! MULTIPLY        [ reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! MODULO          [ reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! PLUS            [ reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! MINUS           [ reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! LD              [ reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! LDEQ            [ reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! GD              [ reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! GDEQ            [ reduce using rule 41 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! EQUALEQUAL      [ shift and go to state 42 ]
  ! NOTEQ           [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 77

    (42) expression_operation -> expression NOTEQ expression .
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    EQUALEQUAL      reduce using rule 42 (expression_operation -> expression NOTEQ expression .)
    NOTEQ           reduce using rule 42 (expression_operation -> expression NOTEQ expression .)
    AND             reduce using rule 42 (expression_operation -> expression NOTEQ expression .)
    OR              reduce using rule 42 (expression_operation -> expression NOTEQ expression .)
    NEWLINE         reduce using rule 42 (expression_operation -> expression NOTEQ expression .)
    $end            reduce using rule 42 (expression_operation -> expression NOTEQ expression .)
    RPAREN          reduce using rule 42 (expression_operation -> expression NOTEQ expression .)
    START           reduce using rule 42 (expression_operation -> expression NOTEQ expression .)
    STOP            reduce using rule 42 (expression_operation -> expression NOTEQ expression .)
    RETURN          reduce using rule 42 (expression_operation -> expression NOTEQ expression .)
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    LD              shift and go to state 38
    LDEQ            shift and go to state 39
    GD              shift and go to state 40
    GDEQ            shift and go to state 41

  ! MULTIPLY        [ reduce using rule 42 (expression_operation -> expression NOTEQ expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression_operation -> expression NOTEQ expression .) ]
  ! MODULO          [ reduce using rule 42 (expression_operation -> expression NOTEQ expression .) ]
  ! PLUS            [ reduce using rule 42 (expression_operation -> expression NOTEQ expression .) ]
  ! MINUS           [ reduce using rule 42 (expression_operation -> expression NOTEQ expression .) ]
  ! LD              [ reduce using rule 42 (expression_operation -> expression NOTEQ expression .) ]
  ! LDEQ            [ reduce using rule 42 (expression_operation -> expression NOTEQ expression .) ]
  ! GD              [ reduce using rule 42 (expression_operation -> expression NOTEQ expression .) ]
  ! GDEQ            [ reduce using rule 42 (expression_operation -> expression NOTEQ expression .) ]
  ! EQUALEQUAL      [ shift and go to state 42 ]
  ! NOTEQ           [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 78

    (43) expression_operation -> expression AND expression .
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    AND             reduce using rule 43 (expression_operation -> expression AND expression .)
    OR              reduce using rule 43 (expression_operation -> expression AND expression .)
    NEWLINE         reduce using rule 43 (expression_operation -> expression AND expression .)
    $end            reduce using rule 43 (expression_operation -> expression AND expression .)
    RPAREN          reduce using rule 43 (expression_operation -> expression AND expression .)
    START           reduce using rule 43 (expression_operation -> expression AND expression .)
    STOP            reduce using rule 43 (expression_operation -> expression AND expression .)
    RETURN          reduce using rule 43 (expression_operation -> expression AND expression .)
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    LD              shift and go to state 38
    LDEQ            shift and go to state 39
    GD              shift and go to state 40
    GDEQ            shift and go to state 41
    EQUALEQUAL      shift and go to state 42
    NOTEQ           shift and go to state 43

  ! MULTIPLY        [ reduce using rule 43 (expression_operation -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression_operation -> expression AND expression .) ]
  ! MODULO          [ reduce using rule 43 (expression_operation -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 43 (expression_operation -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 43 (expression_operation -> expression AND expression .) ]
  ! LD              [ reduce using rule 43 (expression_operation -> expression AND expression .) ]
  ! LDEQ            [ reduce using rule 43 (expression_operation -> expression AND expression .) ]
  ! GD              [ reduce using rule 43 (expression_operation -> expression AND expression .) ]
  ! GDEQ            [ reduce using rule 43 (expression_operation -> expression AND expression .) ]
  ! EQUALEQUAL      [ reduce using rule 43 (expression_operation -> expression AND expression .) ]
  ! NOTEQ           [ reduce using rule 43 (expression_operation -> expression AND expression .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 79

    (44) expression_operation -> expression OR expression .
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    AND             reduce using rule 44 (expression_operation -> expression OR expression .)
    OR              reduce using rule 44 (expression_operation -> expression OR expression .)
    NEWLINE         reduce using rule 44 (expression_operation -> expression OR expression .)
    $end            reduce using rule 44 (expression_operation -> expression OR expression .)
    RPAREN          reduce using rule 44 (expression_operation -> expression OR expression .)
    START           reduce using rule 44 (expression_operation -> expression OR expression .)
    STOP            reduce using rule 44 (expression_operation -> expression OR expression .)
    RETURN          reduce using rule 44 (expression_operation -> expression OR expression .)
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    LD              shift and go to state 38
    LDEQ            shift and go to state 39
    GD              shift and go to state 40
    GDEQ            shift and go to state 41
    EQUALEQUAL      shift and go to state 42
    NOTEQ           shift and go to state 43

  ! MULTIPLY        [ reduce using rule 44 (expression_operation -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression_operation -> expression OR expression .) ]
  ! MODULO          [ reduce using rule 44 (expression_operation -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 44 (expression_operation -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 44 (expression_operation -> expression OR expression .) ]
  ! LD              [ reduce using rule 44 (expression_operation -> expression OR expression .) ]
  ! LDEQ            [ reduce using rule 44 (expression_operation -> expression OR expression .) ]
  ! GD              [ reduce using rule 44 (expression_operation -> expression OR expression .) ]
  ! GDEQ            [ reduce using rule 44 (expression_operation -> expression OR expression .) ]
  ! EQUALEQUAL      [ reduce using rule 44 (expression_operation -> expression OR expression .) ]
  ! NOTEQ           [ reduce using rule 44 (expression_operation -> expression OR expression .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 80

    (30) var_assign -> NAME EQUALS expression .
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    NEWLINE         reduce using rule 30 (var_assign -> NAME EQUALS expression .)
    $end            reduce using rule 30 (var_assign -> NAME EQUALS expression .)
    STOP            reduce using rule 30 (var_assign -> NAME EQUALS expression .)
    RETURN          reduce using rule 30 (var_assign -> NAME EQUALS expression .)
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    LD              shift and go to state 38
    LDEQ            shift and go to state 39
    GD              shift and go to state 40
    GDEQ            shift and go to state 41
    EQUALEQUAL      shift and go to state 42
    NOTEQ           shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45


state 81

    (51) expression -> LBRACE int_type_array RBRACE .

    MULTIPLY        reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)
    DIVIDE          reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)
    MODULO          reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)
    PLUS            reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)
    MINUS           reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)
    LD              reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)
    LDEQ            reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)
    GD              reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)
    GDEQ            reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)
    EQUALEQUAL      reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)
    NOTEQ           reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)
    AND             reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)
    OR              reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)
    NEWLINE         reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)
    $end            reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)
    RPAREN          reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)
    START           reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)
    STOP            reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)
    RETURN          reduce using rule 51 (expression -> LBRACE int_type_array RBRACE .)


state 82

    (52) expression -> LBRACE float_type_array RBRACE .

    MULTIPLY        reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)
    DIVIDE          reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)
    MODULO          reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)
    PLUS            reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)
    MINUS           reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)
    LD              reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)
    LDEQ            reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)
    GD              reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)
    GDEQ            reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)
    EQUALEQUAL      reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)
    NOTEQ           reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)
    AND             reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)
    OR              reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)
    NEWLINE         reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)
    $end            reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)
    RPAREN          reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)
    START           reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)
    STOP            reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)
    RETURN          reduce using rule 52 (expression -> LBRACE float_type_array RBRACE .)


state 83

    (53) expression -> LBRACE string_type_array RBRACE .

    MULTIPLY        reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)
    DIVIDE          reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)
    MODULO          reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)
    PLUS            reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)
    MINUS           reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)
    LD              reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)
    LDEQ            reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)
    GD              reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)
    GDEQ            reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)
    EQUALEQUAL      reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)
    NOTEQ           reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)
    AND             reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)
    OR              reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)
    NEWLINE         reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)
    $end            reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)
    RPAREN          reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)
    START           reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)
    STOP            reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)
    RETURN          reduce using rule 53 (expression -> LBRACE string_type_array RBRACE .)


state 84

    (54) expression -> LBRACE bool_type_array RBRACE .

    MULTIPLY        reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)
    DIVIDE          reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)
    MODULO          reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)
    PLUS            reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)
    MINUS           reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)
    LD              reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)
    LDEQ            reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)
    GD              reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)
    GDEQ            reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)
    EQUALEQUAL      reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)
    NOTEQ           reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)
    AND             reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)
    OR              reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)
    NEWLINE         reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)
    $end            reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)
    RPAREN          reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)
    START           reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)
    STOP            reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)
    RETURN          reduce using rule 54 (expression -> LBRACE bool_type_array RBRACE .)


state 85

    (56) int_type_array -> INT int_type_array .

    RBRACE          reduce using rule 56 (int_type_array -> INT int_type_array .)


state 86

    (55) int_type_array -> empty .

    RBRACE          reduce using rule 55 (int_type_array -> empty .)


state 87

    (58) float_type_array -> FLOAT float_type_array .

    RBRACE          reduce using rule 58 (float_type_array -> FLOAT float_type_array .)


state 88

    (57) float_type_array -> empty .

    RBRACE          reduce using rule 57 (float_type_array -> empty .)


state 89

    (60) string_type_array -> STRING string_type_array .

    RBRACE          reduce using rule 60 (string_type_array -> STRING string_type_array .)


state 90

    (59) string_type_array -> empty .

    RBRACE          reduce using rule 59 (string_type_array -> empty .)


state 91

    (62) bool_type_array -> TRUE bool_type_array .

    RBRACE          reduce using rule 62 (bool_type_array -> TRUE bool_type_array .)


state 92

    (61) bool_type_array -> empty .

    RBRACE          reduce using rule 61 (bool_type_array -> empty .)


state 93

    (63) bool_type_array -> FALSE bool_type_array .

    RBRACE          reduce using rule 63 (bool_type_array -> FALSE bool_type_array .)


state 94

    (64) expression -> LPAREN expression RPAREN .

    MULTIPLY        reduce using rule 64 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 64 (expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 64 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 64 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 64 (expression -> LPAREN expression RPAREN .)
    LD              reduce using rule 64 (expression -> LPAREN expression RPAREN .)
    LDEQ            reduce using rule 64 (expression -> LPAREN expression RPAREN .)
    GD              reduce using rule 64 (expression -> LPAREN expression RPAREN .)
    GDEQ            reduce using rule 64 (expression -> LPAREN expression RPAREN .)
    EQUALEQUAL      reduce using rule 64 (expression -> LPAREN expression RPAREN .)
    NOTEQ           reduce using rule 64 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 64 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 64 (expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 64 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 64 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 64 (expression -> LPAREN expression RPAREN .)
    START           reduce using rule 64 (expression -> LPAREN expression RPAREN .)
    STOP            reduce using rule 64 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 64 (expression -> LPAREN expression RPAREN .)


state 95

    (29) var_assign -> datatype NAME EQUALS . expression
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 101
    expression_operation           shift and go to state 13

state 96

    (13) func_assign -> datatype NAME LPAREN . parameters RPAREN START NEWLINE language return_stmt STOP
    (17) parameters -> . first_param
    (18) parameters -> . empty
    (19) first_param -> . datatype NAME COMMA first_param
    (20) first_param -> . datatype NAME
    (72) empty -> .
    (21) datatype -> . INT_TYPE
    (22) datatype -> . FLOAT_TYPE
    (23) datatype -> . STRING_TYPE
    (24) datatype -> . VOID_TYPE

    RPAREN          reduce using rule 72 (empty -> .)
    INT_TYPE        shift and go to state 27
    FLOAT_TYPE      shift and go to state 28
    STRING_TYPE     shift and go to state 29
    VOID_TYPE       shift and go to state 30

    datatype                       shift and go to state 102
    parameters                     shift and go to state 103
    first_param                    shift and go to state 104
    empty                          shift and go to state 105

state 97

    (71) iterative -> WHILE expression START . NEWLINE language STOP

    NEWLINE         shift and go to state 106


state 98

    (65) conditional -> IF expression START . NEWLINE language STOP else_if_blocks else_block

    NEWLINE         shift and go to state 107


state 99

    (25) input -> READ LPAREN NAME . RPAREN

    RPAREN          shift and go to state 108


state 100

    (27) output_print -> PRINT LPAREN expression . RPAREN
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    RPAREN          shift and go to state 109
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    LD              shift and go to state 38
    LDEQ            shift and go to state 39
    GD              shift and go to state 40
    GDEQ            shift and go to state 41
    EQUALEQUAL      shift and go to state 42
    NOTEQ           shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45


state 101

    (29) var_assign -> datatype NAME EQUALS expression .
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    NEWLINE         reduce using rule 29 (var_assign -> datatype NAME EQUALS expression .)
    $end            reduce using rule 29 (var_assign -> datatype NAME EQUALS expression .)
    STOP            reduce using rule 29 (var_assign -> datatype NAME EQUALS expression .)
    RETURN          reduce using rule 29 (var_assign -> datatype NAME EQUALS expression .)
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    LD              shift and go to state 38
    LDEQ            shift and go to state 39
    GD              shift and go to state 40
    GDEQ            shift and go to state 41
    EQUALEQUAL      shift and go to state 42
    NOTEQ           shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45


state 102

    (19) first_param -> datatype . NAME COMMA first_param
    (20) first_param -> datatype . NAME

    NAME            shift and go to state 110


state 103

    (13) func_assign -> datatype NAME LPAREN parameters . RPAREN START NEWLINE language return_stmt STOP

    RPAREN          shift and go to state 111


state 104

    (17) parameters -> first_param .

    RPAREN          reduce using rule 17 (parameters -> first_param .)


state 105

    (18) parameters -> empty .

    RPAREN          reduce using rule 18 (parameters -> empty .)


state 106

    (71) iterative -> WHILE expression START NEWLINE . language STOP
    (3) language -> . language NEWLINE line
    (4) language -> . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . func_assign
    (8) line -> . iterative
    (9) line -> . conditional
    (10) line -> . output
    (11) line -> . input
    (12) line -> . empty
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (29) var_assign -> . datatype NAME EQUALS expression
    (30) var_assign -> . NAME EQUALS expression
    (13) func_assign -> . datatype NAME LPAREN parameters RPAREN START NEWLINE language return_stmt STOP
    (71) iterative -> . WHILE expression START NEWLINE language STOP
    (65) conditional -> . IF expression START NEWLINE language STOP else_if_blocks else_block
    (26) output -> . output_print
    (25) input -> . READ LPAREN NAME RPAREN
    (72) empty -> .
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression
    (21) datatype -> . INT_TYPE
    (22) datatype -> . FLOAT_TYPE
    (23) datatype -> . STRING_TYPE
    (24) datatype -> . VOID_TYPE
    (27) output_print -> . PRINT LPAREN expression RPAREN

    NAME            shift and go to state 12
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    READ            shift and go to state 25
    STOP            reduce using rule 72 (empty -> .)
    NEWLINE         reduce using rule 72 (empty -> .)
    NOT             shift and go to state 26
    INT_TYPE        shift and go to state 27
    FLOAT_TYPE      shift and go to state 28
    STRING_TYPE     shift and go to state 29
    VOID_TYPE       shift and go to state 30
    PRINT           shift and go to state 31

    expression                     shift and go to state 5
    language                       shift and go to state 112
    line                           shift and go to state 4
    var_assign                     shift and go to state 6
    func_assign                    shift and go to state 7
    iterative                      shift and go to state 8
    conditional                    shift and go to state 9
    output                         shift and go to state 10
    input                          shift and go to state 11
    empty                          shift and go to state 66
    expression_operation           shift and go to state 13
    datatype                       shift and go to state 21
    output_print                   shift and go to state 24

state 107

    (65) conditional -> IF expression START NEWLINE . language STOP else_if_blocks else_block
    (3) language -> . language NEWLINE line
    (4) language -> . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . func_assign
    (8) line -> . iterative
    (9) line -> . conditional
    (10) line -> . output
    (11) line -> . input
    (12) line -> . empty
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (29) var_assign -> . datatype NAME EQUALS expression
    (30) var_assign -> . NAME EQUALS expression
    (13) func_assign -> . datatype NAME LPAREN parameters RPAREN START NEWLINE language return_stmt STOP
    (71) iterative -> . WHILE expression START NEWLINE language STOP
    (65) conditional -> . IF expression START NEWLINE language STOP else_if_blocks else_block
    (26) output -> . output_print
    (25) input -> . READ LPAREN NAME RPAREN
    (72) empty -> .
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression
    (21) datatype -> . INT_TYPE
    (22) datatype -> . FLOAT_TYPE
    (23) datatype -> . STRING_TYPE
    (24) datatype -> . VOID_TYPE
    (27) output_print -> . PRINT LPAREN expression RPAREN

    NAME            shift and go to state 12
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    READ            shift and go to state 25
    STOP            reduce using rule 72 (empty -> .)
    NEWLINE         reduce using rule 72 (empty -> .)
    NOT             shift and go to state 26
    INT_TYPE        shift and go to state 27
    FLOAT_TYPE      shift and go to state 28
    STRING_TYPE     shift and go to state 29
    VOID_TYPE       shift and go to state 30
    PRINT           shift and go to state 31

    expression                     shift and go to state 5
    language                       shift and go to state 113
    line                           shift and go to state 4
    var_assign                     shift and go to state 6
    func_assign                    shift and go to state 7
    iterative                      shift and go to state 8
    conditional                    shift and go to state 9
    output                         shift and go to state 10
    input                          shift and go to state 11
    empty                          shift and go to state 66
    expression_operation           shift and go to state 13
    datatype                       shift and go to state 21
    output_print                   shift and go to state 24

state 108

    (25) input -> READ LPAREN NAME RPAREN .

    NEWLINE         reduce using rule 25 (input -> READ LPAREN NAME RPAREN .)
    $end            reduce using rule 25 (input -> READ LPAREN NAME RPAREN .)
    STOP            reduce using rule 25 (input -> READ LPAREN NAME RPAREN .)
    RETURN          reduce using rule 25 (input -> READ LPAREN NAME RPAREN .)


state 109

    (27) output_print -> PRINT LPAREN expression RPAREN .

    NEWLINE         reduce using rule 27 (output_print -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 27 (output_print -> PRINT LPAREN expression RPAREN .)
    STOP            reduce using rule 27 (output_print -> PRINT LPAREN expression RPAREN .)
    RETURN          reduce using rule 27 (output_print -> PRINT LPAREN expression RPAREN .)


state 110

    (19) first_param -> datatype NAME . COMMA first_param
    (20) first_param -> datatype NAME .

    COMMA           shift and go to state 114
    RPAREN          reduce using rule 20 (first_param -> datatype NAME .)


state 111

    (13) func_assign -> datatype NAME LPAREN parameters RPAREN . START NEWLINE language return_stmt STOP

    START           shift and go to state 115


state 112

    (71) iterative -> WHILE expression START NEWLINE language . STOP
    (3) language -> language . NEWLINE line

    STOP            shift and go to state 116
    NEWLINE         shift and go to state 32


state 113

    (65) conditional -> IF expression START NEWLINE language . STOP else_if_blocks else_block
    (3) language -> language . NEWLINE line

    STOP            shift and go to state 117
    NEWLINE         shift and go to state 32


state 114

    (19) first_param -> datatype NAME COMMA . first_param
    (19) first_param -> . datatype NAME COMMA first_param
    (20) first_param -> . datatype NAME
    (21) datatype -> . INT_TYPE
    (22) datatype -> . FLOAT_TYPE
    (23) datatype -> . STRING_TYPE
    (24) datatype -> . VOID_TYPE

    INT_TYPE        shift and go to state 27
    FLOAT_TYPE      shift and go to state 28
    STRING_TYPE     shift and go to state 29
    VOID_TYPE       shift and go to state 30

    datatype                       shift and go to state 102
    first_param                    shift and go to state 118

state 115

    (13) func_assign -> datatype NAME LPAREN parameters RPAREN START . NEWLINE language return_stmt STOP

    NEWLINE         shift and go to state 119


state 116

    (71) iterative -> WHILE expression START NEWLINE language STOP .

    NEWLINE         reduce using rule 71 (iterative -> WHILE expression START NEWLINE language STOP .)
    $end            reduce using rule 71 (iterative -> WHILE expression START NEWLINE language STOP .)
    STOP            reduce using rule 71 (iterative -> WHILE expression START NEWLINE language STOP .)
    RETURN          reduce using rule 71 (iterative -> WHILE expression START NEWLINE language STOP .)


state 117

    (65) conditional -> IF expression START NEWLINE language STOP . else_if_blocks else_block
    (66) else_if_blocks -> . empty
    (67) else_if_blocks -> . else_if_blocks else_if_block
    (72) empty -> .

    ELSE            reduce using rule 72 (empty -> .)
    ELSE_IF         reduce using rule 72 (empty -> .)
    NEWLINE         reduce using rule 72 (empty -> .)
    $end            reduce using rule 72 (empty -> .)
    STOP            reduce using rule 72 (empty -> .)
    RETURN          reduce using rule 72 (empty -> .)

    else_if_blocks                 shift and go to state 120
    empty                          shift and go to state 121

state 118

    (19) first_param -> datatype NAME COMMA first_param .

    RPAREN          reduce using rule 19 (first_param -> datatype NAME COMMA first_param .)


state 119

    (13) func_assign -> datatype NAME LPAREN parameters RPAREN START NEWLINE . language return_stmt STOP
    (3) language -> . language NEWLINE line
    (4) language -> . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . func_assign
    (8) line -> . iterative
    (9) line -> . conditional
    (10) line -> . output
    (11) line -> . input
    (12) line -> . empty
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (29) var_assign -> . datatype NAME EQUALS expression
    (30) var_assign -> . NAME EQUALS expression
    (13) func_assign -> . datatype NAME LPAREN parameters RPAREN START NEWLINE language return_stmt STOP
    (71) iterative -> . WHILE expression START NEWLINE language STOP
    (65) conditional -> . IF expression START NEWLINE language STOP else_if_blocks else_block
    (26) output -> . output_print
    (25) input -> . READ LPAREN NAME RPAREN
    (72) empty -> .
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression
    (21) datatype -> . INT_TYPE
    (22) datatype -> . FLOAT_TYPE
    (23) datatype -> . STRING_TYPE
    (24) datatype -> . VOID_TYPE
    (27) output_print -> . PRINT LPAREN expression RPAREN

    NAME            shift and go to state 12
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    READ            shift and go to state 25
    NEWLINE         reduce using rule 72 (empty -> .)
    RETURN          reduce using rule 72 (empty -> .)
    STOP            reduce using rule 72 (empty -> .)
    NOT             shift and go to state 26
    INT_TYPE        shift and go to state 27
    FLOAT_TYPE      shift and go to state 28
    STRING_TYPE     shift and go to state 29
    VOID_TYPE       shift and go to state 30
    PRINT           shift and go to state 31

    datatype                       shift and go to state 21
    language                       shift and go to state 122
    line                           shift and go to state 4
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    func_assign                    shift and go to state 7
    iterative                      shift and go to state 8
    conditional                    shift and go to state 9
    output                         shift and go to state 10
    input                          shift and go to state 11
    empty                          shift and go to state 66
    expression_operation           shift and go to state 13
    output_print                   shift and go to state 24

state 120

    (65) conditional -> IF expression START NEWLINE language STOP else_if_blocks . else_block
    (67) else_if_blocks -> else_if_blocks . else_if_block
    (69) else_block -> . ELSE START NEWLINE language STOP
    (70) else_block -> . empty
    (68) else_if_block -> . ELSE_IF expression START NEWLINE language STOP
    (72) empty -> .

    ELSE            shift and go to state 125
    ELSE_IF         shift and go to state 127
    NEWLINE         reduce using rule 72 (empty -> .)
    $end            reduce using rule 72 (empty -> .)
    STOP            reduce using rule 72 (empty -> .)
    RETURN          reduce using rule 72 (empty -> .)

    else_block                     shift and go to state 123
    else_if_block                  shift and go to state 124
    empty                          shift and go to state 126

state 121

    (66) else_if_blocks -> empty .

    ELSE            reduce using rule 66 (else_if_blocks -> empty .)
    ELSE_IF         reduce using rule 66 (else_if_blocks -> empty .)
    NEWLINE         reduce using rule 66 (else_if_blocks -> empty .)
    $end            reduce using rule 66 (else_if_blocks -> empty .)
    STOP            reduce using rule 66 (else_if_blocks -> empty .)
    RETURN          reduce using rule 66 (else_if_blocks -> empty .)


state 122

    (13) func_assign -> datatype NAME LPAREN parameters RPAREN START NEWLINE language . return_stmt STOP
    (3) language -> language . NEWLINE line
    (14) return_stmt -> . RETURN expression NEWLINE
    (15) return_stmt -> . RETURN NEWLINE
    (16) return_stmt -> . empty
    (72) empty -> .

    NEWLINE         shift and go to state 32
    RETURN          shift and go to state 129
    STOP            reduce using rule 72 (empty -> .)

    return_stmt                    shift and go to state 128
    empty                          shift and go to state 130

state 123

    (65) conditional -> IF expression START NEWLINE language STOP else_if_blocks else_block .

    NEWLINE         reduce using rule 65 (conditional -> IF expression START NEWLINE language STOP else_if_blocks else_block .)
    $end            reduce using rule 65 (conditional -> IF expression START NEWLINE language STOP else_if_blocks else_block .)
    STOP            reduce using rule 65 (conditional -> IF expression START NEWLINE language STOP else_if_blocks else_block .)
    RETURN          reduce using rule 65 (conditional -> IF expression START NEWLINE language STOP else_if_blocks else_block .)


state 124

    (67) else_if_blocks -> else_if_blocks else_if_block .

    ELSE            reduce using rule 67 (else_if_blocks -> else_if_blocks else_if_block .)
    ELSE_IF         reduce using rule 67 (else_if_blocks -> else_if_blocks else_if_block .)
    NEWLINE         reduce using rule 67 (else_if_blocks -> else_if_blocks else_if_block .)
    $end            reduce using rule 67 (else_if_blocks -> else_if_blocks else_if_block .)
    STOP            reduce using rule 67 (else_if_blocks -> else_if_blocks else_if_block .)
    RETURN          reduce using rule 67 (else_if_blocks -> else_if_blocks else_if_block .)


state 125

    (69) else_block -> ELSE . START NEWLINE language STOP

    START           shift and go to state 131


state 126

    (70) else_block -> empty .

    NEWLINE         reduce using rule 70 (else_block -> empty .)
    $end            reduce using rule 70 (else_block -> empty .)
    STOP            reduce using rule 70 (else_block -> empty .)
    RETURN          reduce using rule 70 (else_block -> empty .)


state 127

    (68) else_if_block -> ELSE_IF . expression START NEWLINE language STOP
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 132
    expression_operation           shift and go to state 13

state 128

    (13) func_assign -> datatype NAME LPAREN parameters RPAREN START NEWLINE language return_stmt . STOP

    STOP            shift and go to state 133


state 129

    (14) return_stmt -> RETURN . expression NEWLINE
    (15) return_stmt -> RETURN . NEWLINE
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression

    NEWLINE         shift and go to state 135
    NAME            shift and go to state 58
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    NOT             shift and go to state 26

    expression                     shift and go to state 134
    expression_operation           shift and go to state 13

state 130

    (16) return_stmt -> empty .

    STOP            reduce using rule 16 (return_stmt -> empty .)


state 131

    (69) else_block -> ELSE START . NEWLINE language STOP

    NEWLINE         shift and go to state 136


state 132

    (68) else_if_block -> ELSE_IF expression . START NEWLINE language STOP
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    START           shift and go to state 137
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    LD              shift and go to state 38
    LDEQ            shift and go to state 39
    GD              shift and go to state 40
    GDEQ            shift and go to state 41
    EQUALEQUAL      shift and go to state 42
    NOTEQ           shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45


state 133

    (13) func_assign -> datatype NAME LPAREN parameters RPAREN START NEWLINE language return_stmt STOP .

    NEWLINE         reduce using rule 13 (func_assign -> datatype NAME LPAREN parameters RPAREN START NEWLINE language return_stmt STOP .)
    $end            reduce using rule 13 (func_assign -> datatype NAME LPAREN parameters RPAREN START NEWLINE language return_stmt STOP .)
    STOP            reduce using rule 13 (func_assign -> datatype NAME LPAREN parameters RPAREN START NEWLINE language return_stmt STOP .)
    RETURN          reduce using rule 13 (func_assign -> datatype NAME LPAREN parameters RPAREN START NEWLINE language return_stmt STOP .)


state 134

    (14) return_stmt -> RETURN expression . NEWLINE
    (32) expression_operation -> expression . MULTIPLY expression
    (33) expression_operation -> expression . DIVIDE expression
    (34) expression_operation -> expression . MODULO expression
    (35) expression_operation -> expression . PLUS expression
    (36) expression_operation -> expression . MINUS expression
    (37) expression_operation -> expression . LD expression
    (38) expression_operation -> expression . LDEQ expression
    (39) expression_operation -> expression . GD expression
    (40) expression_operation -> expression . GDEQ expression
    (41) expression_operation -> expression . EQUALEQUAL expression
    (42) expression_operation -> expression . NOTEQ expression
    (43) expression_operation -> expression . AND expression
    (44) expression_operation -> expression . OR expression

    NEWLINE         shift and go to state 138
    MULTIPLY        shift and go to state 33
    DIVIDE          shift and go to state 34
    MODULO          shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    LD              shift and go to state 38
    LDEQ            shift and go to state 39
    GD              shift and go to state 40
    GDEQ            shift and go to state 41
    EQUALEQUAL      shift and go to state 42
    NOTEQ           shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45


state 135

    (15) return_stmt -> RETURN NEWLINE .

    STOP            reduce using rule 15 (return_stmt -> RETURN NEWLINE .)


state 136

    (69) else_block -> ELSE START NEWLINE . language STOP
    (3) language -> . language NEWLINE line
    (4) language -> . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . func_assign
    (8) line -> . iterative
    (9) line -> . conditional
    (10) line -> . output
    (11) line -> . input
    (12) line -> . empty
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (29) var_assign -> . datatype NAME EQUALS expression
    (30) var_assign -> . NAME EQUALS expression
    (13) func_assign -> . datatype NAME LPAREN parameters RPAREN START NEWLINE language return_stmt STOP
    (71) iterative -> . WHILE expression START NEWLINE language STOP
    (65) conditional -> . IF expression START NEWLINE language STOP else_if_blocks else_block
    (26) output -> . output_print
    (25) input -> . READ LPAREN NAME RPAREN
    (72) empty -> .
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression
    (21) datatype -> . INT_TYPE
    (22) datatype -> . FLOAT_TYPE
    (23) datatype -> . STRING_TYPE
    (24) datatype -> . VOID_TYPE
    (27) output_print -> . PRINT LPAREN expression RPAREN

    NAME            shift and go to state 12
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    READ            shift and go to state 25
    STOP            reduce using rule 72 (empty -> .)
    NEWLINE         reduce using rule 72 (empty -> .)
    NOT             shift and go to state 26
    INT_TYPE        shift and go to state 27
    FLOAT_TYPE      shift and go to state 28
    STRING_TYPE     shift and go to state 29
    VOID_TYPE       shift and go to state 30
    PRINT           shift and go to state 31

    language                       shift and go to state 139
    line                           shift and go to state 4
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    func_assign                    shift and go to state 7
    iterative                      shift and go to state 8
    conditional                    shift and go to state 9
    output                         shift and go to state 10
    input                          shift and go to state 11
    empty                          shift and go to state 66
    expression_operation           shift and go to state 13
    datatype                       shift and go to state 21
    output_print                   shift and go to state 24

state 137

    (68) else_if_block -> ELSE_IF expression START . NEWLINE language STOP

    NEWLINE         shift and go to state 140


state 138

    (14) return_stmt -> RETURN expression NEWLINE .

    STOP            reduce using rule 14 (return_stmt -> RETURN expression NEWLINE .)


state 139

    (69) else_block -> ELSE START NEWLINE language . STOP
    (3) language -> language . NEWLINE line

    STOP            shift and go to state 141
    NEWLINE         shift and go to state 32


state 140

    (68) else_if_block -> ELSE_IF expression START NEWLINE . language STOP
    (3) language -> . language NEWLINE line
    (4) language -> . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . func_assign
    (8) line -> . iterative
    (9) line -> . conditional
    (10) line -> . output
    (11) line -> . input
    (12) line -> . empty
    (28) expression -> . NAME
    (31) expression -> . expression_operation
    (46) expression -> . INT
    (47) expression -> . FLOAT
    (48) expression -> . STRING
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . LBRACE int_type_array RBRACE
    (52) expression -> . LBRACE float_type_array RBRACE
    (53) expression -> . LBRACE string_type_array RBRACE
    (54) expression -> . LBRACE bool_type_array RBRACE
    (64) expression -> . LPAREN expression RPAREN
    (29) var_assign -> . datatype NAME EQUALS expression
    (30) var_assign -> . NAME EQUALS expression
    (13) func_assign -> . datatype NAME LPAREN parameters RPAREN START NEWLINE language return_stmt STOP
    (71) iterative -> . WHILE expression START NEWLINE language STOP
    (65) conditional -> . IF expression START NEWLINE language STOP else_if_blocks else_block
    (26) output -> . output_print
    (25) input -> . READ LPAREN NAME RPAREN
    (72) empty -> .
    (32) expression_operation -> . expression MULTIPLY expression
    (33) expression_operation -> . expression DIVIDE expression
    (34) expression_operation -> . expression MODULO expression
    (35) expression_operation -> . expression PLUS expression
    (36) expression_operation -> . expression MINUS expression
    (37) expression_operation -> . expression LD expression
    (38) expression_operation -> . expression LDEQ expression
    (39) expression_operation -> . expression GD expression
    (40) expression_operation -> . expression GDEQ expression
    (41) expression_operation -> . expression EQUALEQUAL expression
    (42) expression_operation -> . expression NOTEQ expression
    (43) expression_operation -> . expression AND expression
    (44) expression_operation -> . expression OR expression
    (45) expression_operation -> . NOT expression
    (21) datatype -> . INT_TYPE
    (22) datatype -> . FLOAT_TYPE
    (23) datatype -> . STRING_TYPE
    (24) datatype -> . VOID_TYPE
    (27) output_print -> . PRINT LPAREN expression RPAREN

    NAME            shift and go to state 12
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    STRING          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LBRACE          shift and go to state 19
    LPAREN          shift and go to state 20
    WHILE           shift and go to state 22
    IF              shift and go to state 23
    READ            shift and go to state 25
    STOP            reduce using rule 72 (empty -> .)
    NEWLINE         reduce using rule 72 (empty -> .)
    NOT             shift and go to state 26
    INT_TYPE        shift and go to state 27
    FLOAT_TYPE      shift and go to state 28
    STRING_TYPE     shift and go to state 29
    VOID_TYPE       shift and go to state 30
    PRINT           shift and go to state 31

    expression                     shift and go to state 5
    language                       shift and go to state 142
    line                           shift and go to state 4
    var_assign                     shift and go to state 6
    func_assign                    shift and go to state 7
    iterative                      shift and go to state 8
    conditional                    shift and go to state 9
    output                         shift and go to state 10
    input                          shift and go to state 11
    empty                          shift and go to state 66
    expression_operation           shift and go to state 13
    datatype                       shift and go to state 21
    output_print                   shift and go to state 24

state 141

    (69) else_block -> ELSE START NEWLINE language STOP .

    NEWLINE         reduce using rule 69 (else_block -> ELSE START NEWLINE language STOP .)
    $end            reduce using rule 69 (else_block -> ELSE START NEWLINE language STOP .)
    STOP            reduce using rule 69 (else_block -> ELSE START NEWLINE language STOP .)
    RETURN          reduce using rule 69 (else_block -> ELSE START NEWLINE language STOP .)


state 142

    (68) else_if_block -> ELSE_IF expression START NEWLINE language . STOP
    (3) language -> language . NEWLINE line

    STOP            shift and go to state 143
    NEWLINE         shift and go to state 32


state 143

    (68) else_if_block -> ELSE_IF expression START NEWLINE language STOP .

    ELSE            reduce using rule 68 (else_if_block -> ELSE_IF expression START NEWLINE language STOP .)
    ELSE_IF         reduce using rule 68 (else_if_block -> ELSE_IF expression START NEWLINE language STOP .)
    NEWLINE         reduce using rule 68 (else_if_block -> ELSE_IF expression START NEWLINE language STOP .)
    $end            reduce using rule 68 (else_if_block -> ELSE_IF expression START NEWLINE language STOP .)
    STOP            reduce using rule 68 (else_if_block -> ELSE_IF expression START NEWLINE language STOP .)
    RETURN          reduce using rule 68 (else_if_block -> ELSE_IF expression START NEWLINE language STOP .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 3 resolved using rule (start -> empty)
WARNING: rejected rule (line -> empty) in state 3
WARNING: reduce/reduce conflict in state 51 resolved using rule (int_type_array -> empty)
WARNING: rejected rule (float_type_array -> empty) in state 51
WARNING: reduce/reduce conflict in state 51 resolved using rule (int_type_array -> empty)
WARNING: rejected rule (string_type_array -> empty) in state 51
WARNING: reduce/reduce conflict in state 51 resolved using rule (int_type_array -> empty)
WARNING: rejected rule (bool_type_array -> empty) in state 51
