Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> language
Rule 2     start -> empty
Rule 3     language -> language NEWLINE line
Rule 4     language -> line
Rule 5     line -> expression
Rule 6     line -> var_assign
Rule 7     line -> iterative
Rule 8     line -> conditional
Rule 9     line -> output
Rule 10    line -> input
Rule 11    line -> empty
Rule 12    input -> READ LPAREN NAME RPAREN
Rule 13    output -> output_print
Rule 14    output_print -> PRINT LPAREN expression RPAREN
Rule 15    expression -> NAME
Rule 16    var_assign -> NAME EQUALS expression
Rule 17    expression -> expression_operation
Rule 18    expression_operation -> expression MULTIPLY expression
Rule 19    expression_operation -> expression DIVIDE expression
Rule 20    expression_operation -> expression MODULO expression
Rule 21    expression_operation -> expression PLUS expression
Rule 22    expression_operation -> expression MINUS expression
Rule 23    expression_operation -> expression LD expression
Rule 24    expression_operation -> expression LDEQ expression
Rule 25    expression_operation -> expression GD expression
Rule 26    expression_operation -> expression GDEQ expression
Rule 27    expression_operation -> expression EQUALEQUAL expression
Rule 28    expression_operation -> expression NOTEQ expression
Rule 29    expression_operation -> expression AND expression
Rule 30    expression_operation -> expression OR expression
Rule 31    expression_operation -> NOT expression
Rule 32    expression -> INT
Rule 33    expression -> FLOAT
Rule 34    expression -> STRING
Rule 35    expression -> TRUE
Rule 36    expression -> FALSE
Rule 37    expression -> LBRACE int_type_array RBRACE
Rule 38    expression -> LBRACE float_type_array RBRACE
Rule 39    expression -> LBRACE string_type_array RBRACE
Rule 40    expression -> LBRACE bool_type_array RBRACE
Rule 41    int_type_array -> empty
Rule 42    int_type_array -> INT int_type_array
Rule 43    float_type_array -> empty
Rule 44    float_type_array -> FLOAT float_type_array
Rule 45    string_type_array -> empty
Rule 46    string_type_array -> STRING string_type_array
Rule 47    bool_type_array -> empty
Rule 48    bool_type_array -> TRUE bool_type_array
Rule 49    bool_type_array -> FALSE bool_type_array
Rule 50    expression -> LPAREN expression RPAREN
Rule 51    conditional -> IF expression START NEWLINE language STOP else_if_blocks else_block
Rule 52    else_if_blocks -> empty
Rule 53    else_if_blocks -> else_if_blocks else_if_block
Rule 54    else_if_block -> ELSE_IF expression START NEWLINE language STOP
Rule 55    else_block -> ELSE START NEWLINE language STOP
Rule 56    else_block -> empty
Rule 57    iterative -> WHILE expression START NEWLINE language STOP
Rule 58    empty -> <empty>

Terminals, with rules where they appear

AND                  : 29
DIVIDE               : 19
ELSE                 : 55
ELSE_IF              : 54
EQUALEQUAL           : 27
EQUALS               : 16
FALSE                : 36 49
FLOAT                : 33 44
GD                   : 25
GDEQ                 : 26
IF                   : 51
INT                  : 32 42
LBRACE               : 37 38 39 40
LD                   : 23
LDEQ                 : 24
LPAREN               : 12 14 50
MINUS                : 22
MODULO               : 20
MULTIPLY             : 18
NAME                 : 12 15 16
NEWLINE              : 3 51 54 55 57
NOT                  : 31
NOTEQ                : 28
OR                   : 30
PLUS                 : 21
PRINT                : 14
RBRACE               : 37 38 39 40
READ                 : 12
RPAREN               : 12 14 50
START                : 51 54 55 57
STOP                 : 51 54 55 57
STRING               : 34 46
TRUE                 : 35 48
WHILE                : 57
error                : 

Nonterminals, with rules where they appear

bool_type_array      : 40 48 49
conditional          : 8
else_block           : 51
else_if_block        : 53
else_if_blocks       : 51 53
empty                : 2 11 41 43 45 47 52 56
expression           : 5 14 16 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 50 51 54 57
expression_operation : 17
float_type_array     : 38 44
input                : 10
int_type_array       : 37 42
iterative            : 7
language             : 1 3 51 54 55 57
line                 : 3 4
output               : 9
output_print         : 13
start                : 0
string_type_array    : 39 46
var_assign           : 6

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . language
    (2) start -> . empty
    (3) language -> . language NEWLINE line
    (4) language -> . line
    (58) empty -> .
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . iterative
    (8) line -> . conditional
    (9) line -> . output
    (10) line -> . input
    (11) line -> . empty
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (16) var_assign -> . NAME EQUALS expression
    (57) iterative -> . WHILE expression START NEWLINE language STOP
    (51) conditional -> . IF expression START NEWLINE language STOP else_if_blocks else_block
    (13) output -> . output_print
    (12) input -> . READ LPAREN NAME RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression
    (14) output_print -> . PRINT LPAREN expression RPAREN

    $end            reduce using rule 58 (empty -> .)
    NEWLINE         reduce using rule 58 (empty -> .)
    NAME            shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 21
    READ            shift and go to state 23
    NOT             shift and go to state 24
    PRINT           shift and go to state 25

    start                          shift and go to state 1
    language                       shift and go to state 2
    empty                          shift and go to state 3
    line                           shift and go to state 4
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    iterative                      shift and go to state 7
    conditional                    shift and go to state 8
    output                         shift and go to state 9
    input                          shift and go to state 10
    expression_operation           shift and go to state 12
    output_print                   shift and go to state 22

state 1

    (0) S' -> start .



state 2

    (1) start -> language .
    (3) language -> language . NEWLINE line

    $end            reduce using rule 1 (start -> language .)
    NEWLINE         shift and go to state 26


state 3

    (2) start -> empty .
    (11) line -> empty .

  ! reduce/reduce conflict for $end resolved using rule 2 (start -> empty .)
    $end            reduce using rule 2 (start -> empty .)
    NEWLINE         reduce using rule 11 (line -> empty .)

  ! $end            [ reduce using rule 11 (line -> empty .) ]


state 4

    (4) language -> line .

    NEWLINE         reduce using rule 4 (language -> line .)
    $end            reduce using rule 4 (language -> line .)
    STOP            reduce using rule 4 (language -> line .)


state 5

    (5) line -> expression .
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    NEWLINE         reduce using rule 5 (line -> expression .)
    $end            reduce using rule 5 (line -> expression .)
    STOP            reduce using rule 5 (line -> expression .)
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULO          shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LD              shift and go to state 32
    LDEQ            shift and go to state 33
    GD              shift and go to state 34
    GDEQ            shift and go to state 35
    EQUALEQUAL      shift and go to state 36
    NOTEQ           shift and go to state 37
    AND             shift and go to state 38
    OR              shift and go to state 39


state 6

    (6) line -> var_assign .

    NEWLINE         reduce using rule 6 (line -> var_assign .)
    $end            reduce using rule 6 (line -> var_assign .)
    STOP            reduce using rule 6 (line -> var_assign .)


state 7

    (7) line -> iterative .

    NEWLINE         reduce using rule 7 (line -> iterative .)
    $end            reduce using rule 7 (line -> iterative .)
    STOP            reduce using rule 7 (line -> iterative .)


state 8

    (8) line -> conditional .

    NEWLINE         reduce using rule 8 (line -> conditional .)
    $end            reduce using rule 8 (line -> conditional .)
    STOP            reduce using rule 8 (line -> conditional .)


state 9

    (9) line -> output .

    NEWLINE         reduce using rule 9 (line -> output .)
    $end            reduce using rule 9 (line -> output .)
    STOP            reduce using rule 9 (line -> output .)


state 10

    (10) line -> input .

    NEWLINE         reduce using rule 10 (line -> input .)
    $end            reduce using rule 10 (line -> input .)
    STOP            reduce using rule 10 (line -> input .)


state 11

    (15) expression -> NAME .
    (16) var_assign -> NAME . EQUALS expression

    MULTIPLY        reduce using rule 15 (expression -> NAME .)
    DIVIDE          reduce using rule 15 (expression -> NAME .)
    MODULO          reduce using rule 15 (expression -> NAME .)
    PLUS            reduce using rule 15 (expression -> NAME .)
    MINUS           reduce using rule 15 (expression -> NAME .)
    LD              reduce using rule 15 (expression -> NAME .)
    LDEQ            reduce using rule 15 (expression -> NAME .)
    GD              reduce using rule 15 (expression -> NAME .)
    GDEQ            reduce using rule 15 (expression -> NAME .)
    EQUALEQUAL      reduce using rule 15 (expression -> NAME .)
    NOTEQ           reduce using rule 15 (expression -> NAME .)
    AND             reduce using rule 15 (expression -> NAME .)
    OR              reduce using rule 15 (expression -> NAME .)
    NEWLINE         reduce using rule 15 (expression -> NAME .)
    $end            reduce using rule 15 (expression -> NAME .)
    STOP            reduce using rule 15 (expression -> NAME .)
    EQUALS          shift and go to state 40


state 12

    (17) expression -> expression_operation .

    MULTIPLY        reduce using rule 17 (expression -> expression_operation .)
    DIVIDE          reduce using rule 17 (expression -> expression_operation .)
    MODULO          reduce using rule 17 (expression -> expression_operation .)
    PLUS            reduce using rule 17 (expression -> expression_operation .)
    MINUS           reduce using rule 17 (expression -> expression_operation .)
    LD              reduce using rule 17 (expression -> expression_operation .)
    LDEQ            reduce using rule 17 (expression -> expression_operation .)
    GD              reduce using rule 17 (expression -> expression_operation .)
    GDEQ            reduce using rule 17 (expression -> expression_operation .)
    EQUALEQUAL      reduce using rule 17 (expression -> expression_operation .)
    NOTEQ           reduce using rule 17 (expression -> expression_operation .)
    AND             reduce using rule 17 (expression -> expression_operation .)
    OR              reduce using rule 17 (expression -> expression_operation .)
    NEWLINE         reduce using rule 17 (expression -> expression_operation .)
    $end            reduce using rule 17 (expression -> expression_operation .)
    RPAREN          reduce using rule 17 (expression -> expression_operation .)
    START           reduce using rule 17 (expression -> expression_operation .)
    STOP            reduce using rule 17 (expression -> expression_operation .)


state 13

    (32) expression -> INT .

    MULTIPLY        reduce using rule 32 (expression -> INT .)
    DIVIDE          reduce using rule 32 (expression -> INT .)
    MODULO          reduce using rule 32 (expression -> INT .)
    PLUS            reduce using rule 32 (expression -> INT .)
    MINUS           reduce using rule 32 (expression -> INT .)
    LD              reduce using rule 32 (expression -> INT .)
    LDEQ            reduce using rule 32 (expression -> INT .)
    GD              reduce using rule 32 (expression -> INT .)
    GDEQ            reduce using rule 32 (expression -> INT .)
    EQUALEQUAL      reduce using rule 32 (expression -> INT .)
    NOTEQ           reduce using rule 32 (expression -> INT .)
    AND             reduce using rule 32 (expression -> INT .)
    OR              reduce using rule 32 (expression -> INT .)
    NEWLINE         reduce using rule 32 (expression -> INT .)
    $end            reduce using rule 32 (expression -> INT .)
    RPAREN          reduce using rule 32 (expression -> INT .)
    START           reduce using rule 32 (expression -> INT .)
    STOP            reduce using rule 32 (expression -> INT .)


state 14

    (33) expression -> FLOAT .

    MULTIPLY        reduce using rule 33 (expression -> FLOAT .)
    DIVIDE          reduce using rule 33 (expression -> FLOAT .)
    MODULO          reduce using rule 33 (expression -> FLOAT .)
    PLUS            reduce using rule 33 (expression -> FLOAT .)
    MINUS           reduce using rule 33 (expression -> FLOAT .)
    LD              reduce using rule 33 (expression -> FLOAT .)
    LDEQ            reduce using rule 33 (expression -> FLOAT .)
    GD              reduce using rule 33 (expression -> FLOAT .)
    GDEQ            reduce using rule 33 (expression -> FLOAT .)
    EQUALEQUAL      reduce using rule 33 (expression -> FLOAT .)
    NOTEQ           reduce using rule 33 (expression -> FLOAT .)
    AND             reduce using rule 33 (expression -> FLOAT .)
    OR              reduce using rule 33 (expression -> FLOAT .)
    NEWLINE         reduce using rule 33 (expression -> FLOAT .)
    $end            reduce using rule 33 (expression -> FLOAT .)
    RPAREN          reduce using rule 33 (expression -> FLOAT .)
    START           reduce using rule 33 (expression -> FLOAT .)
    STOP            reduce using rule 33 (expression -> FLOAT .)


state 15

    (34) expression -> STRING .

    MULTIPLY        reduce using rule 34 (expression -> STRING .)
    DIVIDE          reduce using rule 34 (expression -> STRING .)
    MODULO          reduce using rule 34 (expression -> STRING .)
    PLUS            reduce using rule 34 (expression -> STRING .)
    MINUS           reduce using rule 34 (expression -> STRING .)
    LD              reduce using rule 34 (expression -> STRING .)
    LDEQ            reduce using rule 34 (expression -> STRING .)
    GD              reduce using rule 34 (expression -> STRING .)
    GDEQ            reduce using rule 34 (expression -> STRING .)
    EQUALEQUAL      reduce using rule 34 (expression -> STRING .)
    NOTEQ           reduce using rule 34 (expression -> STRING .)
    AND             reduce using rule 34 (expression -> STRING .)
    OR              reduce using rule 34 (expression -> STRING .)
    NEWLINE         reduce using rule 34 (expression -> STRING .)
    $end            reduce using rule 34 (expression -> STRING .)
    RPAREN          reduce using rule 34 (expression -> STRING .)
    START           reduce using rule 34 (expression -> STRING .)
    STOP            reduce using rule 34 (expression -> STRING .)


state 16

    (35) expression -> TRUE .

    MULTIPLY        reduce using rule 35 (expression -> TRUE .)
    DIVIDE          reduce using rule 35 (expression -> TRUE .)
    MODULO          reduce using rule 35 (expression -> TRUE .)
    PLUS            reduce using rule 35 (expression -> TRUE .)
    MINUS           reduce using rule 35 (expression -> TRUE .)
    LD              reduce using rule 35 (expression -> TRUE .)
    LDEQ            reduce using rule 35 (expression -> TRUE .)
    GD              reduce using rule 35 (expression -> TRUE .)
    GDEQ            reduce using rule 35 (expression -> TRUE .)
    EQUALEQUAL      reduce using rule 35 (expression -> TRUE .)
    NOTEQ           reduce using rule 35 (expression -> TRUE .)
    AND             reduce using rule 35 (expression -> TRUE .)
    OR              reduce using rule 35 (expression -> TRUE .)
    NEWLINE         reduce using rule 35 (expression -> TRUE .)
    $end            reduce using rule 35 (expression -> TRUE .)
    RPAREN          reduce using rule 35 (expression -> TRUE .)
    START           reduce using rule 35 (expression -> TRUE .)
    STOP            reduce using rule 35 (expression -> TRUE .)


state 17

    (36) expression -> FALSE .

    MULTIPLY        reduce using rule 36 (expression -> FALSE .)
    DIVIDE          reduce using rule 36 (expression -> FALSE .)
    MODULO          reduce using rule 36 (expression -> FALSE .)
    PLUS            reduce using rule 36 (expression -> FALSE .)
    MINUS           reduce using rule 36 (expression -> FALSE .)
    LD              reduce using rule 36 (expression -> FALSE .)
    LDEQ            reduce using rule 36 (expression -> FALSE .)
    GD              reduce using rule 36 (expression -> FALSE .)
    GDEQ            reduce using rule 36 (expression -> FALSE .)
    EQUALEQUAL      reduce using rule 36 (expression -> FALSE .)
    NOTEQ           reduce using rule 36 (expression -> FALSE .)
    AND             reduce using rule 36 (expression -> FALSE .)
    OR              reduce using rule 36 (expression -> FALSE .)
    NEWLINE         reduce using rule 36 (expression -> FALSE .)
    $end            reduce using rule 36 (expression -> FALSE .)
    RPAREN          reduce using rule 36 (expression -> FALSE .)
    START           reduce using rule 36 (expression -> FALSE .)
    STOP            reduce using rule 36 (expression -> FALSE .)


state 18

    (37) expression -> LBRACE . int_type_array RBRACE
    (38) expression -> LBRACE . float_type_array RBRACE
    (39) expression -> LBRACE . string_type_array RBRACE
    (40) expression -> LBRACE . bool_type_array RBRACE
    (41) int_type_array -> . empty
    (42) int_type_array -> . INT int_type_array
    (43) float_type_array -> . empty
    (44) float_type_array -> . FLOAT float_type_array
    (45) string_type_array -> . empty
    (46) string_type_array -> . STRING string_type_array
    (47) bool_type_array -> . empty
    (48) bool_type_array -> . TRUE bool_type_array
    (49) bool_type_array -> . FALSE bool_type_array
    (58) empty -> .

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    STRING          shift and go to state 48
    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    RBRACE          reduce using rule 58 (empty -> .)

    int_type_array                 shift and go to state 41
    float_type_array               shift and go to state 42
    string_type_array              shift and go to state 43
    bool_type_array                shift and go to state 44
    empty                          shift and go to state 45

state 19

    (50) expression -> LPAREN . expression RPAREN
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 51
    expression_operation           shift and go to state 12

state 20

    (57) iterative -> WHILE . expression START NEWLINE language STOP
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 53
    expression_operation           shift and go to state 12

state 21

    (51) conditional -> IF . expression START NEWLINE language STOP else_if_blocks else_block
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 54
    expression_operation           shift and go to state 12

state 22

    (13) output -> output_print .

    NEWLINE         reduce using rule 13 (output -> output_print .)
    $end            reduce using rule 13 (output -> output_print .)
    STOP            reduce using rule 13 (output -> output_print .)


state 23

    (12) input -> READ . LPAREN NAME RPAREN

    LPAREN          shift and go to state 55


state 24

    (31) expression_operation -> NOT . expression
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 56
    expression_operation           shift and go to state 12

state 25

    (14) output_print -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 57


state 26

    (3) language -> language NEWLINE . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . iterative
    (8) line -> . conditional
    (9) line -> . output
    (10) line -> . input
    (11) line -> . empty
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (16) var_assign -> . NAME EQUALS expression
    (57) iterative -> . WHILE expression START NEWLINE language STOP
    (51) conditional -> . IF expression START NEWLINE language STOP else_if_blocks else_block
    (13) output -> . output_print
    (12) input -> . READ LPAREN NAME RPAREN
    (58) empty -> .
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression
    (14) output_print -> . PRINT LPAREN expression RPAREN

    NAME            shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 21
    READ            shift and go to state 23
    NEWLINE         reduce using rule 58 (empty -> .)
    $end            reduce using rule 58 (empty -> .)
    STOP            reduce using rule 58 (empty -> .)
    NOT             shift and go to state 24
    PRINT           shift and go to state 25

    line                           shift and go to state 58
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    iterative                      shift and go to state 7
    conditional                    shift and go to state 8
    output                         shift and go to state 9
    input                          shift and go to state 10
    empty                          shift and go to state 59
    expression_operation           shift and go to state 12
    output_print                   shift and go to state 22

state 27

    (18) expression_operation -> expression MULTIPLY . expression
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 60
    expression_operation           shift and go to state 12

state 28

    (19) expression_operation -> expression DIVIDE . expression
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 61
    expression_operation           shift and go to state 12

state 29

    (20) expression_operation -> expression MODULO . expression
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 62
    expression_operation           shift and go to state 12

state 30

    (21) expression_operation -> expression PLUS . expression
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 63
    expression_operation           shift and go to state 12

state 31

    (22) expression_operation -> expression MINUS . expression
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 64
    expression_operation           shift and go to state 12

state 32

    (23) expression_operation -> expression LD . expression
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 65
    expression_operation           shift and go to state 12

state 33

    (24) expression_operation -> expression LDEQ . expression
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 66
    expression_operation           shift and go to state 12

state 34

    (25) expression_operation -> expression GD . expression
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 67
    expression_operation           shift and go to state 12

state 35

    (26) expression_operation -> expression GDEQ . expression
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 68
    expression_operation           shift and go to state 12

state 36

    (27) expression_operation -> expression EQUALEQUAL . expression
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 69
    expression_operation           shift and go to state 12

state 37

    (28) expression_operation -> expression NOTEQ . expression
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 70
    expression_operation           shift and go to state 12

state 38

    (29) expression_operation -> expression AND . expression
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 71
    expression_operation           shift and go to state 12

state 39

    (30) expression_operation -> expression OR . expression
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 72
    expression_operation           shift and go to state 12

state 40

    (16) var_assign -> NAME EQUALS . expression
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 73
    expression_operation           shift and go to state 12

state 41

    (37) expression -> LBRACE int_type_array . RBRACE

    RBRACE          shift and go to state 74


state 42

    (38) expression -> LBRACE float_type_array . RBRACE

    RBRACE          shift and go to state 75


state 43

    (39) expression -> LBRACE string_type_array . RBRACE

    RBRACE          shift and go to state 76


state 44

    (40) expression -> LBRACE bool_type_array . RBRACE

    RBRACE          shift and go to state 77


state 45

    (41) int_type_array -> empty .
    (43) float_type_array -> empty .
    (45) string_type_array -> empty .
    (47) bool_type_array -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 41 (int_type_array -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 41 (int_type_array -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 41 (int_type_array -> empty .)
    RBRACE          reduce using rule 41 (int_type_array -> empty .)

  ! RBRACE          [ reduce using rule 43 (float_type_array -> empty .) ]
  ! RBRACE          [ reduce using rule 45 (string_type_array -> empty .) ]
  ! RBRACE          [ reduce using rule 47 (bool_type_array -> empty .) ]


state 46

    (42) int_type_array -> INT . int_type_array
    (41) int_type_array -> . empty
    (42) int_type_array -> . INT int_type_array
    (58) empty -> .

    INT             shift and go to state 46
    RBRACE          reduce using rule 58 (empty -> .)

    int_type_array                 shift and go to state 78
    empty                          shift and go to state 79

state 47

    (44) float_type_array -> FLOAT . float_type_array
    (43) float_type_array -> . empty
    (44) float_type_array -> . FLOAT float_type_array
    (58) empty -> .

    FLOAT           shift and go to state 47
    RBRACE          reduce using rule 58 (empty -> .)

    float_type_array               shift and go to state 80
    empty                          shift and go to state 81

state 48

    (46) string_type_array -> STRING . string_type_array
    (45) string_type_array -> . empty
    (46) string_type_array -> . STRING string_type_array
    (58) empty -> .

    STRING          shift and go to state 48
    RBRACE          reduce using rule 58 (empty -> .)

    string_type_array              shift and go to state 82
    empty                          shift and go to state 83

state 49

    (48) bool_type_array -> TRUE . bool_type_array
    (47) bool_type_array -> . empty
    (48) bool_type_array -> . TRUE bool_type_array
    (49) bool_type_array -> . FALSE bool_type_array
    (58) empty -> .

    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    RBRACE          reduce using rule 58 (empty -> .)

    bool_type_array                shift and go to state 84
    empty                          shift and go to state 85

state 50

    (49) bool_type_array -> FALSE . bool_type_array
    (47) bool_type_array -> . empty
    (48) bool_type_array -> . TRUE bool_type_array
    (49) bool_type_array -> . FALSE bool_type_array
    (58) empty -> .

    TRUE            shift and go to state 49
    FALSE           shift and go to state 50
    RBRACE          reduce using rule 58 (empty -> .)

    bool_type_array                shift and go to state 86
    empty                          shift and go to state 85

state 51

    (50) expression -> LPAREN expression . RPAREN
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    RPAREN          shift and go to state 87
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULO          shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LD              shift and go to state 32
    LDEQ            shift and go to state 33
    GD              shift and go to state 34
    GDEQ            shift and go to state 35
    EQUALEQUAL      shift and go to state 36
    NOTEQ           shift and go to state 37
    AND             shift and go to state 38
    OR              shift and go to state 39


state 52

    (15) expression -> NAME .

    RPAREN          reduce using rule 15 (expression -> NAME .)
    MULTIPLY        reduce using rule 15 (expression -> NAME .)
    DIVIDE          reduce using rule 15 (expression -> NAME .)
    MODULO          reduce using rule 15 (expression -> NAME .)
    PLUS            reduce using rule 15 (expression -> NAME .)
    MINUS           reduce using rule 15 (expression -> NAME .)
    LD              reduce using rule 15 (expression -> NAME .)
    LDEQ            reduce using rule 15 (expression -> NAME .)
    GD              reduce using rule 15 (expression -> NAME .)
    GDEQ            reduce using rule 15 (expression -> NAME .)
    EQUALEQUAL      reduce using rule 15 (expression -> NAME .)
    NOTEQ           reduce using rule 15 (expression -> NAME .)
    AND             reduce using rule 15 (expression -> NAME .)
    OR              reduce using rule 15 (expression -> NAME .)
    START           reduce using rule 15 (expression -> NAME .)
    NEWLINE         reduce using rule 15 (expression -> NAME .)
    $end            reduce using rule 15 (expression -> NAME .)
    STOP            reduce using rule 15 (expression -> NAME .)


state 53

    (57) iterative -> WHILE expression . START NEWLINE language STOP
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    START           shift and go to state 88
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULO          shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LD              shift and go to state 32
    LDEQ            shift and go to state 33
    GD              shift and go to state 34
    GDEQ            shift and go to state 35
    EQUALEQUAL      shift and go to state 36
    NOTEQ           shift and go to state 37
    AND             shift and go to state 38
    OR              shift and go to state 39


state 54

    (51) conditional -> IF expression . START NEWLINE language STOP else_if_blocks else_block
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    START           shift and go to state 89
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULO          shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LD              shift and go to state 32
    LDEQ            shift and go to state 33
    GD              shift and go to state 34
    GDEQ            shift and go to state 35
    EQUALEQUAL      shift and go to state 36
    NOTEQ           shift and go to state 37
    AND             shift and go to state 38
    OR              shift and go to state 39


state 55

    (12) input -> READ LPAREN . NAME RPAREN

    NAME            shift and go to state 90


state 56

    (31) expression_operation -> NOT expression .
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    MULTIPLY        reduce using rule 31 (expression_operation -> NOT expression .)
    DIVIDE          reduce using rule 31 (expression_operation -> NOT expression .)
    MODULO          reduce using rule 31 (expression_operation -> NOT expression .)
    PLUS            reduce using rule 31 (expression_operation -> NOT expression .)
    MINUS           reduce using rule 31 (expression_operation -> NOT expression .)
    LD              reduce using rule 31 (expression_operation -> NOT expression .)
    LDEQ            reduce using rule 31 (expression_operation -> NOT expression .)
    GD              reduce using rule 31 (expression_operation -> NOT expression .)
    GDEQ            reduce using rule 31 (expression_operation -> NOT expression .)
    EQUALEQUAL      reduce using rule 31 (expression_operation -> NOT expression .)
    NOTEQ           reduce using rule 31 (expression_operation -> NOT expression .)
    AND             reduce using rule 31 (expression_operation -> NOT expression .)
    OR              reduce using rule 31 (expression_operation -> NOT expression .)
    NEWLINE         reduce using rule 31 (expression_operation -> NOT expression .)
    $end            reduce using rule 31 (expression_operation -> NOT expression .)
    RPAREN          reduce using rule 31 (expression_operation -> NOT expression .)
    START           reduce using rule 31 (expression_operation -> NOT expression .)
    STOP            reduce using rule 31 (expression_operation -> NOT expression .)

  ! MULTIPLY        [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! MODULO          [ shift and go to state 29 ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! LD              [ shift and go to state 32 ]
  ! LDEQ            [ shift and go to state 33 ]
  ! GD              [ shift and go to state 34 ]
  ! GDEQ            [ shift and go to state 35 ]
  ! EQUALEQUAL      [ shift and go to state 36 ]
  ! NOTEQ           [ shift and go to state 37 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]


state 57

    (14) output_print -> PRINT LPAREN . expression RPAREN
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 91
    expression_operation           shift and go to state 12

state 58

    (3) language -> language NEWLINE line .

    NEWLINE         reduce using rule 3 (language -> language NEWLINE line .)
    $end            reduce using rule 3 (language -> language NEWLINE line .)
    STOP            reduce using rule 3 (language -> language NEWLINE line .)


state 59

    (11) line -> empty .

    NEWLINE         reduce using rule 11 (line -> empty .)
    $end            reduce using rule 11 (line -> empty .)
    STOP            reduce using rule 11 (line -> empty .)


state 60

    (18) expression_operation -> expression MULTIPLY expression .
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    MULTIPLY        reduce using rule 18 (expression_operation -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 18 (expression_operation -> expression MULTIPLY expression .)
    MODULO          reduce using rule 18 (expression_operation -> expression MULTIPLY expression .)
    PLUS            reduce using rule 18 (expression_operation -> expression MULTIPLY expression .)
    MINUS           reduce using rule 18 (expression_operation -> expression MULTIPLY expression .)
    LD              reduce using rule 18 (expression_operation -> expression MULTIPLY expression .)
    LDEQ            reduce using rule 18 (expression_operation -> expression MULTIPLY expression .)
    GD              reduce using rule 18 (expression_operation -> expression MULTIPLY expression .)
    GDEQ            reduce using rule 18 (expression_operation -> expression MULTIPLY expression .)
    EQUALEQUAL      reduce using rule 18 (expression_operation -> expression MULTIPLY expression .)
    NOTEQ           reduce using rule 18 (expression_operation -> expression MULTIPLY expression .)
    AND             reduce using rule 18 (expression_operation -> expression MULTIPLY expression .)
    OR              reduce using rule 18 (expression_operation -> expression MULTIPLY expression .)
    NEWLINE         reduce using rule 18 (expression_operation -> expression MULTIPLY expression .)
    $end            reduce using rule 18 (expression_operation -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 18 (expression_operation -> expression MULTIPLY expression .)
    START           reduce using rule 18 (expression_operation -> expression MULTIPLY expression .)
    STOP            reduce using rule 18 (expression_operation -> expression MULTIPLY expression .)

  ! MULTIPLY        [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! MODULO          [ shift and go to state 29 ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! LD              [ shift and go to state 32 ]
  ! LDEQ            [ shift and go to state 33 ]
  ! GD              [ shift and go to state 34 ]
  ! GDEQ            [ shift and go to state 35 ]
  ! EQUALEQUAL      [ shift and go to state 36 ]
  ! NOTEQ           [ shift and go to state 37 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]


state 61

    (19) expression_operation -> expression DIVIDE expression .
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    MULTIPLY        reduce using rule 19 (expression_operation -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 19 (expression_operation -> expression DIVIDE expression .)
    MODULO          reduce using rule 19 (expression_operation -> expression DIVIDE expression .)
    PLUS            reduce using rule 19 (expression_operation -> expression DIVIDE expression .)
    MINUS           reduce using rule 19 (expression_operation -> expression DIVIDE expression .)
    LD              reduce using rule 19 (expression_operation -> expression DIVIDE expression .)
    LDEQ            reduce using rule 19 (expression_operation -> expression DIVIDE expression .)
    GD              reduce using rule 19 (expression_operation -> expression DIVIDE expression .)
    GDEQ            reduce using rule 19 (expression_operation -> expression DIVIDE expression .)
    EQUALEQUAL      reduce using rule 19 (expression_operation -> expression DIVIDE expression .)
    NOTEQ           reduce using rule 19 (expression_operation -> expression DIVIDE expression .)
    AND             reduce using rule 19 (expression_operation -> expression DIVIDE expression .)
    OR              reduce using rule 19 (expression_operation -> expression DIVIDE expression .)
    NEWLINE         reduce using rule 19 (expression_operation -> expression DIVIDE expression .)
    $end            reduce using rule 19 (expression_operation -> expression DIVIDE expression .)
    RPAREN          reduce using rule 19 (expression_operation -> expression DIVIDE expression .)
    START           reduce using rule 19 (expression_operation -> expression DIVIDE expression .)
    STOP            reduce using rule 19 (expression_operation -> expression DIVIDE expression .)

  ! MULTIPLY        [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! MODULO          [ shift and go to state 29 ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! LD              [ shift and go to state 32 ]
  ! LDEQ            [ shift and go to state 33 ]
  ! GD              [ shift and go to state 34 ]
  ! GDEQ            [ shift and go to state 35 ]
  ! EQUALEQUAL      [ shift and go to state 36 ]
  ! NOTEQ           [ shift and go to state 37 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]


state 62

    (20) expression_operation -> expression MODULO expression .
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    MULTIPLY        reduce using rule 20 (expression_operation -> expression MODULO expression .)
    DIVIDE          reduce using rule 20 (expression_operation -> expression MODULO expression .)
    MODULO          reduce using rule 20 (expression_operation -> expression MODULO expression .)
    PLUS            reduce using rule 20 (expression_operation -> expression MODULO expression .)
    MINUS           reduce using rule 20 (expression_operation -> expression MODULO expression .)
    LD              reduce using rule 20 (expression_operation -> expression MODULO expression .)
    LDEQ            reduce using rule 20 (expression_operation -> expression MODULO expression .)
    GD              reduce using rule 20 (expression_operation -> expression MODULO expression .)
    GDEQ            reduce using rule 20 (expression_operation -> expression MODULO expression .)
    EQUALEQUAL      reduce using rule 20 (expression_operation -> expression MODULO expression .)
    NOTEQ           reduce using rule 20 (expression_operation -> expression MODULO expression .)
    AND             reduce using rule 20 (expression_operation -> expression MODULO expression .)
    OR              reduce using rule 20 (expression_operation -> expression MODULO expression .)
    NEWLINE         reduce using rule 20 (expression_operation -> expression MODULO expression .)
    $end            reduce using rule 20 (expression_operation -> expression MODULO expression .)
    RPAREN          reduce using rule 20 (expression_operation -> expression MODULO expression .)
    START           reduce using rule 20 (expression_operation -> expression MODULO expression .)
    STOP            reduce using rule 20 (expression_operation -> expression MODULO expression .)

  ! MULTIPLY        [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! MODULO          [ shift and go to state 29 ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! LD              [ shift and go to state 32 ]
  ! LDEQ            [ shift and go to state 33 ]
  ! GD              [ shift and go to state 34 ]
  ! GDEQ            [ shift and go to state 35 ]
  ! EQUALEQUAL      [ shift and go to state 36 ]
  ! NOTEQ           [ shift and go to state 37 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]


state 63

    (21) expression_operation -> expression PLUS expression .
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    PLUS            reduce using rule 21 (expression_operation -> expression PLUS expression .)
    MINUS           reduce using rule 21 (expression_operation -> expression PLUS expression .)
    LD              reduce using rule 21 (expression_operation -> expression PLUS expression .)
    LDEQ            reduce using rule 21 (expression_operation -> expression PLUS expression .)
    GD              reduce using rule 21 (expression_operation -> expression PLUS expression .)
    GDEQ            reduce using rule 21 (expression_operation -> expression PLUS expression .)
    EQUALEQUAL      reduce using rule 21 (expression_operation -> expression PLUS expression .)
    NOTEQ           reduce using rule 21 (expression_operation -> expression PLUS expression .)
    AND             reduce using rule 21 (expression_operation -> expression PLUS expression .)
    OR              reduce using rule 21 (expression_operation -> expression PLUS expression .)
    NEWLINE         reduce using rule 21 (expression_operation -> expression PLUS expression .)
    $end            reduce using rule 21 (expression_operation -> expression PLUS expression .)
    RPAREN          reduce using rule 21 (expression_operation -> expression PLUS expression .)
    START           reduce using rule 21 (expression_operation -> expression PLUS expression .)
    STOP            reduce using rule 21 (expression_operation -> expression PLUS expression .)
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULO          shift and go to state 29

  ! MULTIPLY        [ reduce using rule 21 (expression_operation -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 21 (expression_operation -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 21 (expression_operation -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! LD              [ shift and go to state 32 ]
  ! LDEQ            [ shift and go to state 33 ]
  ! GD              [ shift and go to state 34 ]
  ! GDEQ            [ shift and go to state 35 ]
  ! EQUALEQUAL      [ shift and go to state 36 ]
  ! NOTEQ           [ shift and go to state 37 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]


state 64

    (22) expression_operation -> expression MINUS expression .
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    PLUS            reduce using rule 22 (expression_operation -> expression MINUS expression .)
    MINUS           reduce using rule 22 (expression_operation -> expression MINUS expression .)
    LD              reduce using rule 22 (expression_operation -> expression MINUS expression .)
    LDEQ            reduce using rule 22 (expression_operation -> expression MINUS expression .)
    GD              reduce using rule 22 (expression_operation -> expression MINUS expression .)
    GDEQ            reduce using rule 22 (expression_operation -> expression MINUS expression .)
    EQUALEQUAL      reduce using rule 22 (expression_operation -> expression MINUS expression .)
    NOTEQ           reduce using rule 22 (expression_operation -> expression MINUS expression .)
    AND             reduce using rule 22 (expression_operation -> expression MINUS expression .)
    OR              reduce using rule 22 (expression_operation -> expression MINUS expression .)
    NEWLINE         reduce using rule 22 (expression_operation -> expression MINUS expression .)
    $end            reduce using rule 22 (expression_operation -> expression MINUS expression .)
    RPAREN          reduce using rule 22 (expression_operation -> expression MINUS expression .)
    START           reduce using rule 22 (expression_operation -> expression MINUS expression .)
    STOP            reduce using rule 22 (expression_operation -> expression MINUS expression .)
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULO          shift and go to state 29

  ! MULTIPLY        [ reduce using rule 22 (expression_operation -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 22 (expression_operation -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 22 (expression_operation -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! LD              [ shift and go to state 32 ]
  ! LDEQ            [ shift and go to state 33 ]
  ! GD              [ shift and go to state 34 ]
  ! GDEQ            [ shift and go to state 35 ]
  ! EQUALEQUAL      [ shift and go to state 36 ]
  ! NOTEQ           [ shift and go to state 37 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]


state 65

    (23) expression_operation -> expression LD expression .
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    LD              reduce using rule 23 (expression_operation -> expression LD expression .)
    LDEQ            reduce using rule 23 (expression_operation -> expression LD expression .)
    GD              reduce using rule 23 (expression_operation -> expression LD expression .)
    GDEQ            reduce using rule 23 (expression_operation -> expression LD expression .)
    EQUALEQUAL      reduce using rule 23 (expression_operation -> expression LD expression .)
    NOTEQ           reduce using rule 23 (expression_operation -> expression LD expression .)
    AND             reduce using rule 23 (expression_operation -> expression LD expression .)
    OR              reduce using rule 23 (expression_operation -> expression LD expression .)
    NEWLINE         reduce using rule 23 (expression_operation -> expression LD expression .)
    $end            reduce using rule 23 (expression_operation -> expression LD expression .)
    RPAREN          reduce using rule 23 (expression_operation -> expression LD expression .)
    START           reduce using rule 23 (expression_operation -> expression LD expression .)
    STOP            reduce using rule 23 (expression_operation -> expression LD expression .)
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULO          shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31

  ! MULTIPLY        [ reduce using rule 23 (expression_operation -> expression LD expression .) ]
  ! DIVIDE          [ reduce using rule 23 (expression_operation -> expression LD expression .) ]
  ! MODULO          [ reduce using rule 23 (expression_operation -> expression LD expression .) ]
  ! PLUS            [ reduce using rule 23 (expression_operation -> expression LD expression .) ]
  ! MINUS           [ reduce using rule 23 (expression_operation -> expression LD expression .) ]
  ! LD              [ shift and go to state 32 ]
  ! LDEQ            [ shift and go to state 33 ]
  ! GD              [ shift and go to state 34 ]
  ! GDEQ            [ shift and go to state 35 ]
  ! EQUALEQUAL      [ shift and go to state 36 ]
  ! NOTEQ           [ shift and go to state 37 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]


state 66

    (24) expression_operation -> expression LDEQ expression .
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    LD              reduce using rule 24 (expression_operation -> expression LDEQ expression .)
    LDEQ            reduce using rule 24 (expression_operation -> expression LDEQ expression .)
    GD              reduce using rule 24 (expression_operation -> expression LDEQ expression .)
    GDEQ            reduce using rule 24 (expression_operation -> expression LDEQ expression .)
    EQUALEQUAL      reduce using rule 24 (expression_operation -> expression LDEQ expression .)
    NOTEQ           reduce using rule 24 (expression_operation -> expression LDEQ expression .)
    AND             reduce using rule 24 (expression_operation -> expression LDEQ expression .)
    OR              reduce using rule 24 (expression_operation -> expression LDEQ expression .)
    NEWLINE         reduce using rule 24 (expression_operation -> expression LDEQ expression .)
    $end            reduce using rule 24 (expression_operation -> expression LDEQ expression .)
    RPAREN          reduce using rule 24 (expression_operation -> expression LDEQ expression .)
    START           reduce using rule 24 (expression_operation -> expression LDEQ expression .)
    STOP            reduce using rule 24 (expression_operation -> expression LDEQ expression .)
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULO          shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31

  ! MULTIPLY        [ reduce using rule 24 (expression_operation -> expression LDEQ expression .) ]
  ! DIVIDE          [ reduce using rule 24 (expression_operation -> expression LDEQ expression .) ]
  ! MODULO          [ reduce using rule 24 (expression_operation -> expression LDEQ expression .) ]
  ! PLUS            [ reduce using rule 24 (expression_operation -> expression LDEQ expression .) ]
  ! MINUS           [ reduce using rule 24 (expression_operation -> expression LDEQ expression .) ]
  ! LD              [ shift and go to state 32 ]
  ! LDEQ            [ shift and go to state 33 ]
  ! GD              [ shift and go to state 34 ]
  ! GDEQ            [ shift and go to state 35 ]
  ! EQUALEQUAL      [ shift and go to state 36 ]
  ! NOTEQ           [ shift and go to state 37 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]


state 67

    (25) expression_operation -> expression GD expression .
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    LD              reduce using rule 25 (expression_operation -> expression GD expression .)
    LDEQ            reduce using rule 25 (expression_operation -> expression GD expression .)
    GD              reduce using rule 25 (expression_operation -> expression GD expression .)
    GDEQ            reduce using rule 25 (expression_operation -> expression GD expression .)
    EQUALEQUAL      reduce using rule 25 (expression_operation -> expression GD expression .)
    NOTEQ           reduce using rule 25 (expression_operation -> expression GD expression .)
    AND             reduce using rule 25 (expression_operation -> expression GD expression .)
    OR              reduce using rule 25 (expression_operation -> expression GD expression .)
    NEWLINE         reduce using rule 25 (expression_operation -> expression GD expression .)
    $end            reduce using rule 25 (expression_operation -> expression GD expression .)
    RPAREN          reduce using rule 25 (expression_operation -> expression GD expression .)
    START           reduce using rule 25 (expression_operation -> expression GD expression .)
    STOP            reduce using rule 25 (expression_operation -> expression GD expression .)
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULO          shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31

  ! MULTIPLY        [ reduce using rule 25 (expression_operation -> expression GD expression .) ]
  ! DIVIDE          [ reduce using rule 25 (expression_operation -> expression GD expression .) ]
  ! MODULO          [ reduce using rule 25 (expression_operation -> expression GD expression .) ]
  ! PLUS            [ reduce using rule 25 (expression_operation -> expression GD expression .) ]
  ! MINUS           [ reduce using rule 25 (expression_operation -> expression GD expression .) ]
  ! LD              [ shift and go to state 32 ]
  ! LDEQ            [ shift and go to state 33 ]
  ! GD              [ shift and go to state 34 ]
  ! GDEQ            [ shift and go to state 35 ]
  ! EQUALEQUAL      [ shift and go to state 36 ]
  ! NOTEQ           [ shift and go to state 37 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]


state 68

    (26) expression_operation -> expression GDEQ expression .
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    LD              reduce using rule 26 (expression_operation -> expression GDEQ expression .)
    LDEQ            reduce using rule 26 (expression_operation -> expression GDEQ expression .)
    GD              reduce using rule 26 (expression_operation -> expression GDEQ expression .)
    GDEQ            reduce using rule 26 (expression_operation -> expression GDEQ expression .)
    EQUALEQUAL      reduce using rule 26 (expression_operation -> expression GDEQ expression .)
    NOTEQ           reduce using rule 26 (expression_operation -> expression GDEQ expression .)
    AND             reduce using rule 26 (expression_operation -> expression GDEQ expression .)
    OR              reduce using rule 26 (expression_operation -> expression GDEQ expression .)
    NEWLINE         reduce using rule 26 (expression_operation -> expression GDEQ expression .)
    $end            reduce using rule 26 (expression_operation -> expression GDEQ expression .)
    RPAREN          reduce using rule 26 (expression_operation -> expression GDEQ expression .)
    START           reduce using rule 26 (expression_operation -> expression GDEQ expression .)
    STOP            reduce using rule 26 (expression_operation -> expression GDEQ expression .)
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULO          shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31

  ! MULTIPLY        [ reduce using rule 26 (expression_operation -> expression GDEQ expression .) ]
  ! DIVIDE          [ reduce using rule 26 (expression_operation -> expression GDEQ expression .) ]
  ! MODULO          [ reduce using rule 26 (expression_operation -> expression GDEQ expression .) ]
  ! PLUS            [ reduce using rule 26 (expression_operation -> expression GDEQ expression .) ]
  ! MINUS           [ reduce using rule 26 (expression_operation -> expression GDEQ expression .) ]
  ! LD              [ shift and go to state 32 ]
  ! LDEQ            [ shift and go to state 33 ]
  ! GD              [ shift and go to state 34 ]
  ! GDEQ            [ shift and go to state 35 ]
  ! EQUALEQUAL      [ shift and go to state 36 ]
  ! NOTEQ           [ shift and go to state 37 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]


state 69

    (27) expression_operation -> expression EQUALEQUAL expression .
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    EQUALEQUAL      reduce using rule 27 (expression_operation -> expression EQUALEQUAL expression .)
    NOTEQ           reduce using rule 27 (expression_operation -> expression EQUALEQUAL expression .)
    AND             reduce using rule 27 (expression_operation -> expression EQUALEQUAL expression .)
    OR              reduce using rule 27 (expression_operation -> expression EQUALEQUAL expression .)
    NEWLINE         reduce using rule 27 (expression_operation -> expression EQUALEQUAL expression .)
    $end            reduce using rule 27 (expression_operation -> expression EQUALEQUAL expression .)
    RPAREN          reduce using rule 27 (expression_operation -> expression EQUALEQUAL expression .)
    START           reduce using rule 27 (expression_operation -> expression EQUALEQUAL expression .)
    STOP            reduce using rule 27 (expression_operation -> expression EQUALEQUAL expression .)
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULO          shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LD              shift and go to state 32
    LDEQ            shift and go to state 33
    GD              shift and go to state 34
    GDEQ            shift and go to state 35

  ! MULTIPLY        [ reduce using rule 27 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 27 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! MODULO          [ reduce using rule 27 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! PLUS            [ reduce using rule 27 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! MINUS           [ reduce using rule 27 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! LD              [ reduce using rule 27 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! LDEQ            [ reduce using rule 27 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! GD              [ reduce using rule 27 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! GDEQ            [ reduce using rule 27 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! EQUALEQUAL      [ shift and go to state 36 ]
  ! NOTEQ           [ shift and go to state 37 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]


state 70

    (28) expression_operation -> expression NOTEQ expression .
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    EQUALEQUAL      reduce using rule 28 (expression_operation -> expression NOTEQ expression .)
    NOTEQ           reduce using rule 28 (expression_operation -> expression NOTEQ expression .)
    AND             reduce using rule 28 (expression_operation -> expression NOTEQ expression .)
    OR              reduce using rule 28 (expression_operation -> expression NOTEQ expression .)
    NEWLINE         reduce using rule 28 (expression_operation -> expression NOTEQ expression .)
    $end            reduce using rule 28 (expression_operation -> expression NOTEQ expression .)
    RPAREN          reduce using rule 28 (expression_operation -> expression NOTEQ expression .)
    START           reduce using rule 28 (expression_operation -> expression NOTEQ expression .)
    STOP            reduce using rule 28 (expression_operation -> expression NOTEQ expression .)
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULO          shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LD              shift and go to state 32
    LDEQ            shift and go to state 33
    GD              shift and go to state 34
    GDEQ            shift and go to state 35

  ! MULTIPLY        [ reduce using rule 28 (expression_operation -> expression NOTEQ expression .) ]
  ! DIVIDE          [ reduce using rule 28 (expression_operation -> expression NOTEQ expression .) ]
  ! MODULO          [ reduce using rule 28 (expression_operation -> expression NOTEQ expression .) ]
  ! PLUS            [ reduce using rule 28 (expression_operation -> expression NOTEQ expression .) ]
  ! MINUS           [ reduce using rule 28 (expression_operation -> expression NOTEQ expression .) ]
  ! LD              [ reduce using rule 28 (expression_operation -> expression NOTEQ expression .) ]
  ! LDEQ            [ reduce using rule 28 (expression_operation -> expression NOTEQ expression .) ]
  ! GD              [ reduce using rule 28 (expression_operation -> expression NOTEQ expression .) ]
  ! GDEQ            [ reduce using rule 28 (expression_operation -> expression NOTEQ expression .) ]
  ! EQUALEQUAL      [ shift and go to state 36 ]
  ! NOTEQ           [ shift and go to state 37 ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]


state 71

    (29) expression_operation -> expression AND expression .
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    AND             reduce using rule 29 (expression_operation -> expression AND expression .)
    OR              reduce using rule 29 (expression_operation -> expression AND expression .)
    NEWLINE         reduce using rule 29 (expression_operation -> expression AND expression .)
    $end            reduce using rule 29 (expression_operation -> expression AND expression .)
    RPAREN          reduce using rule 29 (expression_operation -> expression AND expression .)
    START           reduce using rule 29 (expression_operation -> expression AND expression .)
    STOP            reduce using rule 29 (expression_operation -> expression AND expression .)
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULO          shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LD              shift and go to state 32
    LDEQ            shift and go to state 33
    GD              shift and go to state 34
    GDEQ            shift and go to state 35
    EQUALEQUAL      shift and go to state 36
    NOTEQ           shift and go to state 37

  ! MULTIPLY        [ reduce using rule 29 (expression_operation -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 29 (expression_operation -> expression AND expression .) ]
  ! MODULO          [ reduce using rule 29 (expression_operation -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 29 (expression_operation -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 29 (expression_operation -> expression AND expression .) ]
  ! LD              [ reduce using rule 29 (expression_operation -> expression AND expression .) ]
  ! LDEQ            [ reduce using rule 29 (expression_operation -> expression AND expression .) ]
  ! GD              [ reduce using rule 29 (expression_operation -> expression AND expression .) ]
  ! GDEQ            [ reduce using rule 29 (expression_operation -> expression AND expression .) ]
  ! EQUALEQUAL      [ reduce using rule 29 (expression_operation -> expression AND expression .) ]
  ! NOTEQ           [ reduce using rule 29 (expression_operation -> expression AND expression .) ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]


state 72

    (30) expression_operation -> expression OR expression .
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    AND             reduce using rule 30 (expression_operation -> expression OR expression .)
    OR              reduce using rule 30 (expression_operation -> expression OR expression .)
    NEWLINE         reduce using rule 30 (expression_operation -> expression OR expression .)
    $end            reduce using rule 30 (expression_operation -> expression OR expression .)
    RPAREN          reduce using rule 30 (expression_operation -> expression OR expression .)
    START           reduce using rule 30 (expression_operation -> expression OR expression .)
    STOP            reduce using rule 30 (expression_operation -> expression OR expression .)
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULO          shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LD              shift and go to state 32
    LDEQ            shift and go to state 33
    GD              shift and go to state 34
    GDEQ            shift and go to state 35
    EQUALEQUAL      shift and go to state 36
    NOTEQ           shift and go to state 37

  ! MULTIPLY        [ reduce using rule 30 (expression_operation -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 30 (expression_operation -> expression OR expression .) ]
  ! MODULO          [ reduce using rule 30 (expression_operation -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 30 (expression_operation -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 30 (expression_operation -> expression OR expression .) ]
  ! LD              [ reduce using rule 30 (expression_operation -> expression OR expression .) ]
  ! LDEQ            [ reduce using rule 30 (expression_operation -> expression OR expression .) ]
  ! GD              [ reduce using rule 30 (expression_operation -> expression OR expression .) ]
  ! GDEQ            [ reduce using rule 30 (expression_operation -> expression OR expression .) ]
  ! EQUALEQUAL      [ reduce using rule 30 (expression_operation -> expression OR expression .) ]
  ! NOTEQ           [ reduce using rule 30 (expression_operation -> expression OR expression .) ]
  ! AND             [ shift and go to state 38 ]
  ! OR              [ shift and go to state 39 ]


state 73

    (16) var_assign -> NAME EQUALS expression .
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    NEWLINE         reduce using rule 16 (var_assign -> NAME EQUALS expression .)
    $end            reduce using rule 16 (var_assign -> NAME EQUALS expression .)
    STOP            reduce using rule 16 (var_assign -> NAME EQUALS expression .)
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULO          shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LD              shift and go to state 32
    LDEQ            shift and go to state 33
    GD              shift and go to state 34
    GDEQ            shift and go to state 35
    EQUALEQUAL      shift and go to state 36
    NOTEQ           shift and go to state 37
    AND             shift and go to state 38
    OR              shift and go to state 39


state 74

    (37) expression -> LBRACE int_type_array RBRACE .

    MULTIPLY        reduce using rule 37 (expression -> LBRACE int_type_array RBRACE .)
    DIVIDE          reduce using rule 37 (expression -> LBRACE int_type_array RBRACE .)
    MODULO          reduce using rule 37 (expression -> LBRACE int_type_array RBRACE .)
    PLUS            reduce using rule 37 (expression -> LBRACE int_type_array RBRACE .)
    MINUS           reduce using rule 37 (expression -> LBRACE int_type_array RBRACE .)
    LD              reduce using rule 37 (expression -> LBRACE int_type_array RBRACE .)
    LDEQ            reduce using rule 37 (expression -> LBRACE int_type_array RBRACE .)
    GD              reduce using rule 37 (expression -> LBRACE int_type_array RBRACE .)
    GDEQ            reduce using rule 37 (expression -> LBRACE int_type_array RBRACE .)
    EQUALEQUAL      reduce using rule 37 (expression -> LBRACE int_type_array RBRACE .)
    NOTEQ           reduce using rule 37 (expression -> LBRACE int_type_array RBRACE .)
    AND             reduce using rule 37 (expression -> LBRACE int_type_array RBRACE .)
    OR              reduce using rule 37 (expression -> LBRACE int_type_array RBRACE .)
    NEWLINE         reduce using rule 37 (expression -> LBRACE int_type_array RBRACE .)
    $end            reduce using rule 37 (expression -> LBRACE int_type_array RBRACE .)
    RPAREN          reduce using rule 37 (expression -> LBRACE int_type_array RBRACE .)
    START           reduce using rule 37 (expression -> LBRACE int_type_array RBRACE .)
    STOP            reduce using rule 37 (expression -> LBRACE int_type_array RBRACE .)


state 75

    (38) expression -> LBRACE float_type_array RBRACE .

    MULTIPLY        reduce using rule 38 (expression -> LBRACE float_type_array RBRACE .)
    DIVIDE          reduce using rule 38 (expression -> LBRACE float_type_array RBRACE .)
    MODULO          reduce using rule 38 (expression -> LBRACE float_type_array RBRACE .)
    PLUS            reduce using rule 38 (expression -> LBRACE float_type_array RBRACE .)
    MINUS           reduce using rule 38 (expression -> LBRACE float_type_array RBRACE .)
    LD              reduce using rule 38 (expression -> LBRACE float_type_array RBRACE .)
    LDEQ            reduce using rule 38 (expression -> LBRACE float_type_array RBRACE .)
    GD              reduce using rule 38 (expression -> LBRACE float_type_array RBRACE .)
    GDEQ            reduce using rule 38 (expression -> LBRACE float_type_array RBRACE .)
    EQUALEQUAL      reduce using rule 38 (expression -> LBRACE float_type_array RBRACE .)
    NOTEQ           reduce using rule 38 (expression -> LBRACE float_type_array RBRACE .)
    AND             reduce using rule 38 (expression -> LBRACE float_type_array RBRACE .)
    OR              reduce using rule 38 (expression -> LBRACE float_type_array RBRACE .)
    NEWLINE         reduce using rule 38 (expression -> LBRACE float_type_array RBRACE .)
    $end            reduce using rule 38 (expression -> LBRACE float_type_array RBRACE .)
    RPAREN          reduce using rule 38 (expression -> LBRACE float_type_array RBRACE .)
    START           reduce using rule 38 (expression -> LBRACE float_type_array RBRACE .)
    STOP            reduce using rule 38 (expression -> LBRACE float_type_array RBRACE .)


state 76

    (39) expression -> LBRACE string_type_array RBRACE .

    MULTIPLY        reduce using rule 39 (expression -> LBRACE string_type_array RBRACE .)
    DIVIDE          reduce using rule 39 (expression -> LBRACE string_type_array RBRACE .)
    MODULO          reduce using rule 39 (expression -> LBRACE string_type_array RBRACE .)
    PLUS            reduce using rule 39 (expression -> LBRACE string_type_array RBRACE .)
    MINUS           reduce using rule 39 (expression -> LBRACE string_type_array RBRACE .)
    LD              reduce using rule 39 (expression -> LBRACE string_type_array RBRACE .)
    LDEQ            reduce using rule 39 (expression -> LBRACE string_type_array RBRACE .)
    GD              reduce using rule 39 (expression -> LBRACE string_type_array RBRACE .)
    GDEQ            reduce using rule 39 (expression -> LBRACE string_type_array RBRACE .)
    EQUALEQUAL      reduce using rule 39 (expression -> LBRACE string_type_array RBRACE .)
    NOTEQ           reduce using rule 39 (expression -> LBRACE string_type_array RBRACE .)
    AND             reduce using rule 39 (expression -> LBRACE string_type_array RBRACE .)
    OR              reduce using rule 39 (expression -> LBRACE string_type_array RBRACE .)
    NEWLINE         reduce using rule 39 (expression -> LBRACE string_type_array RBRACE .)
    $end            reduce using rule 39 (expression -> LBRACE string_type_array RBRACE .)
    RPAREN          reduce using rule 39 (expression -> LBRACE string_type_array RBRACE .)
    START           reduce using rule 39 (expression -> LBRACE string_type_array RBRACE .)
    STOP            reduce using rule 39 (expression -> LBRACE string_type_array RBRACE .)


state 77

    (40) expression -> LBRACE bool_type_array RBRACE .

    MULTIPLY        reduce using rule 40 (expression -> LBRACE bool_type_array RBRACE .)
    DIVIDE          reduce using rule 40 (expression -> LBRACE bool_type_array RBRACE .)
    MODULO          reduce using rule 40 (expression -> LBRACE bool_type_array RBRACE .)
    PLUS            reduce using rule 40 (expression -> LBRACE bool_type_array RBRACE .)
    MINUS           reduce using rule 40 (expression -> LBRACE bool_type_array RBRACE .)
    LD              reduce using rule 40 (expression -> LBRACE bool_type_array RBRACE .)
    LDEQ            reduce using rule 40 (expression -> LBRACE bool_type_array RBRACE .)
    GD              reduce using rule 40 (expression -> LBRACE bool_type_array RBRACE .)
    GDEQ            reduce using rule 40 (expression -> LBRACE bool_type_array RBRACE .)
    EQUALEQUAL      reduce using rule 40 (expression -> LBRACE bool_type_array RBRACE .)
    NOTEQ           reduce using rule 40 (expression -> LBRACE bool_type_array RBRACE .)
    AND             reduce using rule 40 (expression -> LBRACE bool_type_array RBRACE .)
    OR              reduce using rule 40 (expression -> LBRACE bool_type_array RBRACE .)
    NEWLINE         reduce using rule 40 (expression -> LBRACE bool_type_array RBRACE .)
    $end            reduce using rule 40 (expression -> LBRACE bool_type_array RBRACE .)
    RPAREN          reduce using rule 40 (expression -> LBRACE bool_type_array RBRACE .)
    START           reduce using rule 40 (expression -> LBRACE bool_type_array RBRACE .)
    STOP            reduce using rule 40 (expression -> LBRACE bool_type_array RBRACE .)


state 78

    (42) int_type_array -> INT int_type_array .

    RBRACE          reduce using rule 42 (int_type_array -> INT int_type_array .)


state 79

    (41) int_type_array -> empty .

    RBRACE          reduce using rule 41 (int_type_array -> empty .)


state 80

    (44) float_type_array -> FLOAT float_type_array .

    RBRACE          reduce using rule 44 (float_type_array -> FLOAT float_type_array .)


state 81

    (43) float_type_array -> empty .

    RBRACE          reduce using rule 43 (float_type_array -> empty .)


state 82

    (46) string_type_array -> STRING string_type_array .

    RBRACE          reduce using rule 46 (string_type_array -> STRING string_type_array .)


state 83

    (45) string_type_array -> empty .

    RBRACE          reduce using rule 45 (string_type_array -> empty .)


state 84

    (48) bool_type_array -> TRUE bool_type_array .

    RBRACE          reduce using rule 48 (bool_type_array -> TRUE bool_type_array .)


state 85

    (47) bool_type_array -> empty .

    RBRACE          reduce using rule 47 (bool_type_array -> empty .)


state 86

    (49) bool_type_array -> FALSE bool_type_array .

    RBRACE          reduce using rule 49 (bool_type_array -> FALSE bool_type_array .)


state 87

    (50) expression -> LPAREN expression RPAREN .

    MULTIPLY        reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    LD              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    LDEQ            reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    GD              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    GDEQ            reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    EQUALEQUAL      reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    NOTEQ           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    START           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    STOP            reduce using rule 50 (expression -> LPAREN expression RPAREN .)


state 88

    (57) iterative -> WHILE expression START . NEWLINE language STOP

    NEWLINE         shift and go to state 92


state 89

    (51) conditional -> IF expression START . NEWLINE language STOP else_if_blocks else_block

    NEWLINE         shift and go to state 93


state 90

    (12) input -> READ LPAREN NAME . RPAREN

    RPAREN          shift and go to state 94


state 91

    (14) output_print -> PRINT LPAREN expression . RPAREN
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    RPAREN          shift and go to state 95
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULO          shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LD              shift and go to state 32
    LDEQ            shift and go to state 33
    GD              shift and go to state 34
    GDEQ            shift and go to state 35
    EQUALEQUAL      shift and go to state 36
    NOTEQ           shift and go to state 37
    AND             shift and go to state 38
    OR              shift and go to state 39


state 92

    (57) iterative -> WHILE expression START NEWLINE . language STOP
    (3) language -> . language NEWLINE line
    (4) language -> . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . iterative
    (8) line -> . conditional
    (9) line -> . output
    (10) line -> . input
    (11) line -> . empty
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (16) var_assign -> . NAME EQUALS expression
    (57) iterative -> . WHILE expression START NEWLINE language STOP
    (51) conditional -> . IF expression START NEWLINE language STOP else_if_blocks else_block
    (13) output -> . output_print
    (12) input -> . READ LPAREN NAME RPAREN
    (58) empty -> .
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression
    (14) output_print -> . PRINT LPAREN expression RPAREN

    NAME            shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 21
    READ            shift and go to state 23
    STOP            reduce using rule 58 (empty -> .)
    NEWLINE         reduce using rule 58 (empty -> .)
    NOT             shift and go to state 24
    PRINT           shift and go to state 25

    expression                     shift and go to state 5
    language                       shift and go to state 96
    line                           shift and go to state 4
    var_assign                     shift and go to state 6
    iterative                      shift and go to state 7
    conditional                    shift and go to state 8
    output                         shift and go to state 9
    input                          shift and go to state 10
    empty                          shift and go to state 59
    expression_operation           shift and go to state 12
    output_print                   shift and go to state 22

state 93

    (51) conditional -> IF expression START NEWLINE . language STOP else_if_blocks else_block
    (3) language -> . language NEWLINE line
    (4) language -> . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . iterative
    (8) line -> . conditional
    (9) line -> . output
    (10) line -> . input
    (11) line -> . empty
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (16) var_assign -> . NAME EQUALS expression
    (57) iterative -> . WHILE expression START NEWLINE language STOP
    (51) conditional -> . IF expression START NEWLINE language STOP else_if_blocks else_block
    (13) output -> . output_print
    (12) input -> . READ LPAREN NAME RPAREN
    (58) empty -> .
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression
    (14) output_print -> . PRINT LPAREN expression RPAREN

    NAME            shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 21
    READ            shift and go to state 23
    STOP            reduce using rule 58 (empty -> .)
    NEWLINE         reduce using rule 58 (empty -> .)
    NOT             shift and go to state 24
    PRINT           shift and go to state 25

    expression                     shift and go to state 5
    language                       shift and go to state 97
    line                           shift and go to state 4
    var_assign                     shift and go to state 6
    iterative                      shift and go to state 7
    conditional                    shift and go to state 8
    output                         shift and go to state 9
    input                          shift and go to state 10
    empty                          shift and go to state 59
    expression_operation           shift and go to state 12
    output_print                   shift and go to state 22

state 94

    (12) input -> READ LPAREN NAME RPAREN .

    NEWLINE         reduce using rule 12 (input -> READ LPAREN NAME RPAREN .)
    $end            reduce using rule 12 (input -> READ LPAREN NAME RPAREN .)
    STOP            reduce using rule 12 (input -> READ LPAREN NAME RPAREN .)


state 95

    (14) output_print -> PRINT LPAREN expression RPAREN .

    NEWLINE         reduce using rule 14 (output_print -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 14 (output_print -> PRINT LPAREN expression RPAREN .)
    STOP            reduce using rule 14 (output_print -> PRINT LPAREN expression RPAREN .)


state 96

    (57) iterative -> WHILE expression START NEWLINE language . STOP
    (3) language -> language . NEWLINE line

    STOP            shift and go to state 98
    NEWLINE         shift and go to state 26


state 97

    (51) conditional -> IF expression START NEWLINE language . STOP else_if_blocks else_block
    (3) language -> language . NEWLINE line

    STOP            shift and go to state 99
    NEWLINE         shift and go to state 26


state 98

    (57) iterative -> WHILE expression START NEWLINE language STOP .

    NEWLINE         reduce using rule 57 (iterative -> WHILE expression START NEWLINE language STOP .)
    $end            reduce using rule 57 (iterative -> WHILE expression START NEWLINE language STOP .)
    STOP            reduce using rule 57 (iterative -> WHILE expression START NEWLINE language STOP .)


state 99

    (51) conditional -> IF expression START NEWLINE language STOP . else_if_blocks else_block
    (52) else_if_blocks -> . empty
    (53) else_if_blocks -> . else_if_blocks else_if_block
    (58) empty -> .

    ELSE            reduce using rule 58 (empty -> .)
    ELSE_IF         reduce using rule 58 (empty -> .)
    NEWLINE         reduce using rule 58 (empty -> .)
    $end            reduce using rule 58 (empty -> .)
    STOP            reduce using rule 58 (empty -> .)

    else_if_blocks                 shift and go to state 100
    empty                          shift and go to state 101

state 100

    (51) conditional -> IF expression START NEWLINE language STOP else_if_blocks . else_block
    (53) else_if_blocks -> else_if_blocks . else_if_block
    (55) else_block -> . ELSE START NEWLINE language STOP
    (56) else_block -> . empty
    (54) else_if_block -> . ELSE_IF expression START NEWLINE language STOP
    (58) empty -> .

    ELSE            shift and go to state 104
    ELSE_IF         shift and go to state 106
    NEWLINE         reduce using rule 58 (empty -> .)
    $end            reduce using rule 58 (empty -> .)
    STOP            reduce using rule 58 (empty -> .)

    else_block                     shift and go to state 102
    else_if_block                  shift and go to state 103
    empty                          shift and go to state 105

state 101

    (52) else_if_blocks -> empty .

    ELSE            reduce using rule 52 (else_if_blocks -> empty .)
    ELSE_IF         reduce using rule 52 (else_if_blocks -> empty .)
    NEWLINE         reduce using rule 52 (else_if_blocks -> empty .)
    $end            reduce using rule 52 (else_if_blocks -> empty .)
    STOP            reduce using rule 52 (else_if_blocks -> empty .)


state 102

    (51) conditional -> IF expression START NEWLINE language STOP else_if_blocks else_block .

    NEWLINE         reduce using rule 51 (conditional -> IF expression START NEWLINE language STOP else_if_blocks else_block .)
    $end            reduce using rule 51 (conditional -> IF expression START NEWLINE language STOP else_if_blocks else_block .)
    STOP            reduce using rule 51 (conditional -> IF expression START NEWLINE language STOP else_if_blocks else_block .)


state 103

    (53) else_if_blocks -> else_if_blocks else_if_block .

    ELSE            reduce using rule 53 (else_if_blocks -> else_if_blocks else_if_block .)
    ELSE_IF         reduce using rule 53 (else_if_blocks -> else_if_blocks else_if_block .)
    NEWLINE         reduce using rule 53 (else_if_blocks -> else_if_blocks else_if_block .)
    $end            reduce using rule 53 (else_if_blocks -> else_if_blocks else_if_block .)
    STOP            reduce using rule 53 (else_if_blocks -> else_if_blocks else_if_block .)


state 104

    (55) else_block -> ELSE . START NEWLINE language STOP

    START           shift and go to state 107


state 105

    (56) else_block -> empty .

    NEWLINE         reduce using rule 56 (else_block -> empty .)
    $end            reduce using rule 56 (else_block -> empty .)
    STOP            reduce using rule 56 (else_block -> empty .)


state 106

    (54) else_if_block -> ELSE_IF . expression START NEWLINE language STOP
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression

    NAME            shift and go to state 52
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    NOT             shift and go to state 24

    expression                     shift and go to state 108
    expression_operation           shift and go to state 12

state 107

    (55) else_block -> ELSE START . NEWLINE language STOP

    NEWLINE         shift and go to state 109


state 108

    (54) else_if_block -> ELSE_IF expression . START NEWLINE language STOP
    (18) expression_operation -> expression . MULTIPLY expression
    (19) expression_operation -> expression . DIVIDE expression
    (20) expression_operation -> expression . MODULO expression
    (21) expression_operation -> expression . PLUS expression
    (22) expression_operation -> expression . MINUS expression
    (23) expression_operation -> expression . LD expression
    (24) expression_operation -> expression . LDEQ expression
    (25) expression_operation -> expression . GD expression
    (26) expression_operation -> expression . GDEQ expression
    (27) expression_operation -> expression . EQUALEQUAL expression
    (28) expression_operation -> expression . NOTEQ expression
    (29) expression_operation -> expression . AND expression
    (30) expression_operation -> expression . OR expression

    START           shift and go to state 110
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MODULO          shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    LD              shift and go to state 32
    LDEQ            shift and go to state 33
    GD              shift and go to state 34
    GDEQ            shift and go to state 35
    EQUALEQUAL      shift and go to state 36
    NOTEQ           shift and go to state 37
    AND             shift and go to state 38
    OR              shift and go to state 39


state 109

    (55) else_block -> ELSE START NEWLINE . language STOP
    (3) language -> . language NEWLINE line
    (4) language -> . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . iterative
    (8) line -> . conditional
    (9) line -> . output
    (10) line -> . input
    (11) line -> . empty
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (16) var_assign -> . NAME EQUALS expression
    (57) iterative -> . WHILE expression START NEWLINE language STOP
    (51) conditional -> . IF expression START NEWLINE language STOP else_if_blocks else_block
    (13) output -> . output_print
    (12) input -> . READ LPAREN NAME RPAREN
    (58) empty -> .
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression
    (14) output_print -> . PRINT LPAREN expression RPAREN

    NAME            shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 21
    READ            shift and go to state 23
    STOP            reduce using rule 58 (empty -> .)
    NEWLINE         reduce using rule 58 (empty -> .)
    NOT             shift and go to state 24
    PRINT           shift and go to state 25

    language                       shift and go to state 111
    line                           shift and go to state 4
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    iterative                      shift and go to state 7
    conditional                    shift and go to state 8
    output                         shift and go to state 9
    input                          shift and go to state 10
    empty                          shift and go to state 59
    expression_operation           shift and go to state 12
    output_print                   shift and go to state 22

state 110

    (54) else_if_block -> ELSE_IF expression START . NEWLINE language STOP

    NEWLINE         shift and go to state 112


state 111

    (55) else_block -> ELSE START NEWLINE language . STOP
    (3) language -> language . NEWLINE line

    STOP            shift and go to state 113
    NEWLINE         shift and go to state 26


state 112

    (54) else_if_block -> ELSE_IF expression START NEWLINE . language STOP
    (3) language -> . language NEWLINE line
    (4) language -> . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . iterative
    (8) line -> . conditional
    (9) line -> . output
    (10) line -> . input
    (11) line -> . empty
    (15) expression -> . NAME
    (17) expression -> . expression_operation
    (32) expression -> . INT
    (33) expression -> . FLOAT
    (34) expression -> . STRING
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (37) expression -> . LBRACE int_type_array RBRACE
    (38) expression -> . LBRACE float_type_array RBRACE
    (39) expression -> . LBRACE string_type_array RBRACE
    (40) expression -> . LBRACE bool_type_array RBRACE
    (50) expression -> . LPAREN expression RPAREN
    (16) var_assign -> . NAME EQUALS expression
    (57) iterative -> . WHILE expression START NEWLINE language STOP
    (51) conditional -> . IF expression START NEWLINE language STOP else_if_blocks else_block
    (13) output -> . output_print
    (12) input -> . READ LPAREN NAME RPAREN
    (58) empty -> .
    (18) expression_operation -> . expression MULTIPLY expression
    (19) expression_operation -> . expression DIVIDE expression
    (20) expression_operation -> . expression MODULO expression
    (21) expression_operation -> . expression PLUS expression
    (22) expression_operation -> . expression MINUS expression
    (23) expression_operation -> . expression LD expression
    (24) expression_operation -> . expression LDEQ expression
    (25) expression_operation -> . expression GD expression
    (26) expression_operation -> . expression GDEQ expression
    (27) expression_operation -> . expression EQUALEQUAL expression
    (28) expression_operation -> . expression NOTEQ expression
    (29) expression_operation -> . expression AND expression
    (30) expression_operation -> . expression OR expression
    (31) expression_operation -> . NOT expression
    (14) output_print -> . PRINT LPAREN expression RPAREN

    NAME            shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LBRACE          shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 20
    IF              shift and go to state 21
    READ            shift and go to state 23
    STOP            reduce using rule 58 (empty -> .)
    NEWLINE         reduce using rule 58 (empty -> .)
    NOT             shift and go to state 24
    PRINT           shift and go to state 25

    expression                     shift and go to state 5
    language                       shift and go to state 114
    line                           shift and go to state 4
    var_assign                     shift and go to state 6
    iterative                      shift and go to state 7
    conditional                    shift and go to state 8
    output                         shift and go to state 9
    input                          shift and go to state 10
    empty                          shift and go to state 59
    expression_operation           shift and go to state 12
    output_print                   shift and go to state 22

state 113

    (55) else_block -> ELSE START NEWLINE language STOP .

    NEWLINE         reduce using rule 55 (else_block -> ELSE START NEWLINE language STOP .)
    $end            reduce using rule 55 (else_block -> ELSE START NEWLINE language STOP .)
    STOP            reduce using rule 55 (else_block -> ELSE START NEWLINE language STOP .)


state 114

    (54) else_if_block -> ELSE_IF expression START NEWLINE language . STOP
    (3) language -> language . NEWLINE line

    STOP            shift and go to state 115
    NEWLINE         shift and go to state 26


state 115

    (54) else_if_block -> ELSE_IF expression START NEWLINE language STOP .

    ELSE            reduce using rule 54 (else_if_block -> ELSE_IF expression START NEWLINE language STOP .)
    ELSE_IF         reduce using rule 54 (else_if_block -> ELSE_IF expression START NEWLINE language STOP .)
    NEWLINE         reduce using rule 54 (else_if_block -> ELSE_IF expression START NEWLINE language STOP .)
    $end            reduce using rule 54 (else_if_block -> ELSE_IF expression START NEWLINE language STOP .)
    STOP            reduce using rule 54 (else_if_block -> ELSE_IF expression START NEWLINE language STOP .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 3 resolved using rule (start -> empty)
WARNING: rejected rule (line -> empty) in state 3
WARNING: reduce/reduce conflict in state 45 resolved using rule (int_type_array -> empty)
WARNING: rejected rule (float_type_array -> empty) in state 45
WARNING: reduce/reduce conflict in state 45 resolved using rule (int_type_array -> empty)
WARNING: rejected rule (string_type_array -> empty) in state 45
WARNING: reduce/reduce conflict in state 45 resolved using rule (int_type_array -> empty)
WARNING: rejected rule (bool_type_array -> empty) in state 45
