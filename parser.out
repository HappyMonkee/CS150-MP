Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> language
Rule 2     start -> empty
Rule 3     language -> language line
Rule 4     language -> line
Rule 5     line -> expression
Rule 6     line -> var_assign
Rule 7     line -> iterative
Rule 8     line -> conditional
Rule 9     line -> output
Rule 10    line -> input
Rule 11    input -> READ LPAREN NAME RPAREN
Rule 12    output -> output_print
Rule 13    output_print -> PRINT LPAREN expression RPAREN
Rule 14    expression -> NAME
Rule 15    var_assign -> NAME EQUALS expression
Rule 16    expression -> expression_operation
Rule 17    expression_operation -> expression MULTIPLY expression
Rule 18    expression_operation -> expression DIVIDE expression
Rule 19    expression_operation -> expression MODULO expression
Rule 20    expression_operation -> expression PLUS expression
Rule 21    expression_operation -> expression MINUS expression
Rule 22    expression_operation -> expression LD expression
Rule 23    expression_operation -> expression LDEQ expression
Rule 24    expression_operation -> expression GD expression
Rule 25    expression_operation -> expression GDEQ expression
Rule 26    expression_operation -> expression EQUALEQUAL expression
Rule 27    expression_operation -> expression NOTEQ expression
Rule 28    expression_operation -> expression AND expression
Rule 29    expression_operation -> expression OR expression
Rule 30    expression_operation -> NOT expression
Rule 31    expression -> INT
Rule 32    expression -> FLOAT
Rule 33    expression -> STRING
Rule 34    expression -> TRUE
Rule 35    expression -> FALSE
Rule 36    expression -> LPAREN expression RPAREN
Rule 37    conditional -> IF expression THEN language else_if_blocks else_block STOP
Rule 38    else_if_blocks -> empty
Rule 39    else_if_blocks -> else_if_blocks else_if_block
Rule 40    else_if_block -> ELSE_IF expression THEN language
Rule 41    else_block -> ELSE language
Rule 42    else_block -> empty
Rule 43    iterative -> WHILE expression THEN language STOP
Rule 44    empty -> <empty>

Terminals, with rules where they appear

AND                  : 28
DIVIDE               : 18
ELSE                 : 41
ELSE_IF              : 40
EQUALEQUAL           : 26
EQUALS               : 15
FALSE                : 35
FLOAT                : 32
GD                   : 24
GDEQ                 : 25
IF                   : 37
INT                  : 31
LD                   : 22
LDEQ                 : 23
LPAREN               : 11 13 36
MINUS                : 21
MODULO               : 19
MULTIPLY             : 17
NAME                 : 11 14 15
NOT                  : 30
NOTEQ                : 27
OR                   : 29
PLUS                 : 20
PRINT                : 13
READ                 : 11
RPAREN               : 11 13 36
STOP                 : 37 43
STRING               : 33
THEN                 : 37 40 43
TRUE                 : 34
WHILE                : 43
error                : 

Nonterminals, with rules where they appear

conditional          : 8
else_block           : 37
else_if_block        : 39
else_if_blocks       : 37 39
empty                : 2 38 42
expression           : 5 13 15 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 36 37 40 43
expression_operation : 16
input                : 10
iterative            : 7
language             : 1 3 37 40 41 43
line                 : 3 4
output               : 9
output_print         : 12
start                : 0
var_assign           : 6

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . language
    (2) start -> . empty
    (3) language -> . language line
    (4) language -> . line
    (44) empty -> .
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . iterative
    (8) line -> . conditional
    (9) line -> . output
    (10) line -> . input
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (15) var_assign -> . NAME EQUALS expression
    (43) iterative -> . WHILE expression THEN language STOP
    (37) conditional -> . IF expression THEN language else_if_blocks else_block STOP
    (12) output -> . output_print
    (11) input -> . READ LPAREN NAME RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression
    (13) output_print -> . PRINT LPAREN expression RPAREN

    $end            reduce using rule 44 (empty -> .)
    NAME            shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 22
    NOT             shift and go to state 23
    PRINT           shift and go to state 24

    start                          shift and go to state 1
    language                       shift and go to state 2
    empty                          shift and go to state 3
    line                           shift and go to state 4
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    iterative                      shift and go to state 7
    conditional                    shift and go to state 8
    output                         shift and go to state 9
    input                          shift and go to state 10
    expression_operation           shift and go to state 12
    output_print                   shift and go to state 21

state 1

    (0) S' -> start .



state 2

    (1) start -> language .
    (3) language -> language . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . iterative
    (8) line -> . conditional
    (9) line -> . output
    (10) line -> . input
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (15) var_assign -> . NAME EQUALS expression
    (43) iterative -> . WHILE expression THEN language STOP
    (37) conditional -> . IF expression THEN language else_if_blocks else_block STOP
    (12) output -> . output_print
    (11) input -> . READ LPAREN NAME RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression
    (13) output_print -> . PRINT LPAREN expression RPAREN

    $end            reduce using rule 1 (start -> language .)
    NAME            shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 22
    NOT             shift and go to state 23
    PRINT           shift and go to state 24

    line                           shift and go to state 25
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    iterative                      shift and go to state 7
    conditional                    shift and go to state 8
    output                         shift and go to state 9
    input                          shift and go to state 10
    expression_operation           shift and go to state 12
    output_print                   shift and go to state 21

state 3

    (2) start -> empty .

    $end            reduce using rule 2 (start -> empty .)


state 4

    (4) language -> line .

    NAME            reduce using rule 4 (language -> line .)
    INT             reduce using rule 4 (language -> line .)
    FLOAT           reduce using rule 4 (language -> line .)
    STRING          reduce using rule 4 (language -> line .)
    TRUE            reduce using rule 4 (language -> line .)
    FALSE           reduce using rule 4 (language -> line .)
    LPAREN          reduce using rule 4 (language -> line .)
    WHILE           reduce using rule 4 (language -> line .)
    IF              reduce using rule 4 (language -> line .)
    READ            reduce using rule 4 (language -> line .)
    NOT             reduce using rule 4 (language -> line .)
    PRINT           reduce using rule 4 (language -> line .)
    $end            reduce using rule 4 (language -> line .)
    STOP            reduce using rule 4 (language -> line .)
    ELSE            reduce using rule 4 (language -> line .)
    ELSE_IF         reduce using rule 4 (language -> line .)


state 5

    (5) line -> expression .
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    NAME            reduce using rule 5 (line -> expression .)
    INT             reduce using rule 5 (line -> expression .)
    FLOAT           reduce using rule 5 (line -> expression .)
    STRING          reduce using rule 5 (line -> expression .)
    TRUE            reduce using rule 5 (line -> expression .)
    FALSE           reduce using rule 5 (line -> expression .)
    LPAREN          reduce using rule 5 (line -> expression .)
    WHILE           reduce using rule 5 (line -> expression .)
    IF              reduce using rule 5 (line -> expression .)
    READ            reduce using rule 5 (line -> expression .)
    NOT             reduce using rule 5 (line -> expression .)
    PRINT           reduce using rule 5 (line -> expression .)
    $end            reduce using rule 5 (line -> expression .)
    STOP            reduce using rule 5 (line -> expression .)
    ELSE            reduce using rule 5 (line -> expression .)
    ELSE_IF         reduce using rule 5 (line -> expression .)
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULO          shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    LD              shift and go to state 31
    LDEQ            shift and go to state 32
    GD              shift and go to state 33
    GDEQ            shift and go to state 34
    EQUALEQUAL      shift and go to state 35
    NOTEQ           shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 6

    (6) line -> var_assign .

    NAME            reduce using rule 6 (line -> var_assign .)
    INT             reduce using rule 6 (line -> var_assign .)
    FLOAT           reduce using rule 6 (line -> var_assign .)
    STRING          reduce using rule 6 (line -> var_assign .)
    TRUE            reduce using rule 6 (line -> var_assign .)
    FALSE           reduce using rule 6 (line -> var_assign .)
    LPAREN          reduce using rule 6 (line -> var_assign .)
    WHILE           reduce using rule 6 (line -> var_assign .)
    IF              reduce using rule 6 (line -> var_assign .)
    READ            reduce using rule 6 (line -> var_assign .)
    NOT             reduce using rule 6 (line -> var_assign .)
    PRINT           reduce using rule 6 (line -> var_assign .)
    $end            reduce using rule 6 (line -> var_assign .)
    STOP            reduce using rule 6 (line -> var_assign .)
    ELSE            reduce using rule 6 (line -> var_assign .)
    ELSE_IF         reduce using rule 6 (line -> var_assign .)


state 7

    (7) line -> iterative .

    NAME            reduce using rule 7 (line -> iterative .)
    INT             reduce using rule 7 (line -> iterative .)
    FLOAT           reduce using rule 7 (line -> iterative .)
    STRING          reduce using rule 7 (line -> iterative .)
    TRUE            reduce using rule 7 (line -> iterative .)
    FALSE           reduce using rule 7 (line -> iterative .)
    LPAREN          reduce using rule 7 (line -> iterative .)
    WHILE           reduce using rule 7 (line -> iterative .)
    IF              reduce using rule 7 (line -> iterative .)
    READ            reduce using rule 7 (line -> iterative .)
    NOT             reduce using rule 7 (line -> iterative .)
    PRINT           reduce using rule 7 (line -> iterative .)
    $end            reduce using rule 7 (line -> iterative .)
    STOP            reduce using rule 7 (line -> iterative .)
    ELSE            reduce using rule 7 (line -> iterative .)
    ELSE_IF         reduce using rule 7 (line -> iterative .)


state 8

    (8) line -> conditional .

    NAME            reduce using rule 8 (line -> conditional .)
    INT             reduce using rule 8 (line -> conditional .)
    FLOAT           reduce using rule 8 (line -> conditional .)
    STRING          reduce using rule 8 (line -> conditional .)
    TRUE            reduce using rule 8 (line -> conditional .)
    FALSE           reduce using rule 8 (line -> conditional .)
    LPAREN          reduce using rule 8 (line -> conditional .)
    WHILE           reduce using rule 8 (line -> conditional .)
    IF              reduce using rule 8 (line -> conditional .)
    READ            reduce using rule 8 (line -> conditional .)
    NOT             reduce using rule 8 (line -> conditional .)
    PRINT           reduce using rule 8 (line -> conditional .)
    $end            reduce using rule 8 (line -> conditional .)
    STOP            reduce using rule 8 (line -> conditional .)
    ELSE            reduce using rule 8 (line -> conditional .)
    ELSE_IF         reduce using rule 8 (line -> conditional .)


state 9

    (9) line -> output .

    NAME            reduce using rule 9 (line -> output .)
    INT             reduce using rule 9 (line -> output .)
    FLOAT           reduce using rule 9 (line -> output .)
    STRING          reduce using rule 9 (line -> output .)
    TRUE            reduce using rule 9 (line -> output .)
    FALSE           reduce using rule 9 (line -> output .)
    LPAREN          reduce using rule 9 (line -> output .)
    WHILE           reduce using rule 9 (line -> output .)
    IF              reduce using rule 9 (line -> output .)
    READ            reduce using rule 9 (line -> output .)
    NOT             reduce using rule 9 (line -> output .)
    PRINT           reduce using rule 9 (line -> output .)
    $end            reduce using rule 9 (line -> output .)
    STOP            reduce using rule 9 (line -> output .)
    ELSE            reduce using rule 9 (line -> output .)
    ELSE_IF         reduce using rule 9 (line -> output .)


state 10

    (10) line -> input .

    NAME            reduce using rule 10 (line -> input .)
    INT             reduce using rule 10 (line -> input .)
    FLOAT           reduce using rule 10 (line -> input .)
    STRING          reduce using rule 10 (line -> input .)
    TRUE            reduce using rule 10 (line -> input .)
    FALSE           reduce using rule 10 (line -> input .)
    LPAREN          reduce using rule 10 (line -> input .)
    WHILE           reduce using rule 10 (line -> input .)
    IF              reduce using rule 10 (line -> input .)
    READ            reduce using rule 10 (line -> input .)
    NOT             reduce using rule 10 (line -> input .)
    PRINT           reduce using rule 10 (line -> input .)
    $end            reduce using rule 10 (line -> input .)
    STOP            reduce using rule 10 (line -> input .)
    ELSE            reduce using rule 10 (line -> input .)
    ELSE_IF         reduce using rule 10 (line -> input .)


state 11

    (14) expression -> NAME .
    (15) var_assign -> NAME . EQUALS expression

    MULTIPLY        reduce using rule 14 (expression -> NAME .)
    DIVIDE          reduce using rule 14 (expression -> NAME .)
    MODULO          reduce using rule 14 (expression -> NAME .)
    PLUS            reduce using rule 14 (expression -> NAME .)
    MINUS           reduce using rule 14 (expression -> NAME .)
    LD              reduce using rule 14 (expression -> NAME .)
    LDEQ            reduce using rule 14 (expression -> NAME .)
    GD              reduce using rule 14 (expression -> NAME .)
    GDEQ            reduce using rule 14 (expression -> NAME .)
    EQUALEQUAL      reduce using rule 14 (expression -> NAME .)
    NOTEQ           reduce using rule 14 (expression -> NAME .)
    AND             reduce using rule 14 (expression -> NAME .)
    OR              reduce using rule 14 (expression -> NAME .)
    NAME            reduce using rule 14 (expression -> NAME .)
    INT             reduce using rule 14 (expression -> NAME .)
    FLOAT           reduce using rule 14 (expression -> NAME .)
    STRING          reduce using rule 14 (expression -> NAME .)
    TRUE            reduce using rule 14 (expression -> NAME .)
    FALSE           reduce using rule 14 (expression -> NAME .)
    LPAREN          reduce using rule 14 (expression -> NAME .)
    WHILE           reduce using rule 14 (expression -> NAME .)
    IF              reduce using rule 14 (expression -> NAME .)
    READ            reduce using rule 14 (expression -> NAME .)
    NOT             reduce using rule 14 (expression -> NAME .)
    PRINT           reduce using rule 14 (expression -> NAME .)
    $end            reduce using rule 14 (expression -> NAME .)
    STOP            reduce using rule 14 (expression -> NAME .)
    ELSE            reduce using rule 14 (expression -> NAME .)
    ELSE_IF         reduce using rule 14 (expression -> NAME .)
    EQUALS          shift and go to state 39


state 12

    (16) expression -> expression_operation .

    MULTIPLY        reduce using rule 16 (expression -> expression_operation .)
    DIVIDE          reduce using rule 16 (expression -> expression_operation .)
    MODULO          reduce using rule 16 (expression -> expression_operation .)
    PLUS            reduce using rule 16 (expression -> expression_operation .)
    MINUS           reduce using rule 16 (expression -> expression_operation .)
    LD              reduce using rule 16 (expression -> expression_operation .)
    LDEQ            reduce using rule 16 (expression -> expression_operation .)
    GD              reduce using rule 16 (expression -> expression_operation .)
    GDEQ            reduce using rule 16 (expression -> expression_operation .)
    EQUALEQUAL      reduce using rule 16 (expression -> expression_operation .)
    NOTEQ           reduce using rule 16 (expression -> expression_operation .)
    AND             reduce using rule 16 (expression -> expression_operation .)
    OR              reduce using rule 16 (expression -> expression_operation .)
    NAME            reduce using rule 16 (expression -> expression_operation .)
    INT             reduce using rule 16 (expression -> expression_operation .)
    FLOAT           reduce using rule 16 (expression -> expression_operation .)
    STRING          reduce using rule 16 (expression -> expression_operation .)
    TRUE            reduce using rule 16 (expression -> expression_operation .)
    FALSE           reduce using rule 16 (expression -> expression_operation .)
    LPAREN          reduce using rule 16 (expression -> expression_operation .)
    WHILE           reduce using rule 16 (expression -> expression_operation .)
    IF              reduce using rule 16 (expression -> expression_operation .)
    READ            reduce using rule 16 (expression -> expression_operation .)
    NOT             reduce using rule 16 (expression -> expression_operation .)
    PRINT           reduce using rule 16 (expression -> expression_operation .)
    $end            reduce using rule 16 (expression -> expression_operation .)
    RPAREN          reduce using rule 16 (expression -> expression_operation .)
    THEN            reduce using rule 16 (expression -> expression_operation .)
    STOP            reduce using rule 16 (expression -> expression_operation .)
    ELSE            reduce using rule 16 (expression -> expression_operation .)
    ELSE_IF         reduce using rule 16 (expression -> expression_operation .)


state 13

    (31) expression -> INT .

    MULTIPLY        reduce using rule 31 (expression -> INT .)
    DIVIDE          reduce using rule 31 (expression -> INT .)
    MODULO          reduce using rule 31 (expression -> INT .)
    PLUS            reduce using rule 31 (expression -> INT .)
    MINUS           reduce using rule 31 (expression -> INT .)
    LD              reduce using rule 31 (expression -> INT .)
    LDEQ            reduce using rule 31 (expression -> INT .)
    GD              reduce using rule 31 (expression -> INT .)
    GDEQ            reduce using rule 31 (expression -> INT .)
    EQUALEQUAL      reduce using rule 31 (expression -> INT .)
    NOTEQ           reduce using rule 31 (expression -> INT .)
    AND             reduce using rule 31 (expression -> INT .)
    OR              reduce using rule 31 (expression -> INT .)
    NAME            reduce using rule 31 (expression -> INT .)
    INT             reduce using rule 31 (expression -> INT .)
    FLOAT           reduce using rule 31 (expression -> INT .)
    STRING          reduce using rule 31 (expression -> INT .)
    TRUE            reduce using rule 31 (expression -> INT .)
    FALSE           reduce using rule 31 (expression -> INT .)
    LPAREN          reduce using rule 31 (expression -> INT .)
    WHILE           reduce using rule 31 (expression -> INT .)
    IF              reduce using rule 31 (expression -> INT .)
    READ            reduce using rule 31 (expression -> INT .)
    NOT             reduce using rule 31 (expression -> INT .)
    PRINT           reduce using rule 31 (expression -> INT .)
    $end            reduce using rule 31 (expression -> INT .)
    RPAREN          reduce using rule 31 (expression -> INT .)
    THEN            reduce using rule 31 (expression -> INT .)
    STOP            reduce using rule 31 (expression -> INT .)
    ELSE            reduce using rule 31 (expression -> INT .)
    ELSE_IF         reduce using rule 31 (expression -> INT .)


state 14

    (32) expression -> FLOAT .

    MULTIPLY        reduce using rule 32 (expression -> FLOAT .)
    DIVIDE          reduce using rule 32 (expression -> FLOAT .)
    MODULO          reduce using rule 32 (expression -> FLOAT .)
    PLUS            reduce using rule 32 (expression -> FLOAT .)
    MINUS           reduce using rule 32 (expression -> FLOAT .)
    LD              reduce using rule 32 (expression -> FLOAT .)
    LDEQ            reduce using rule 32 (expression -> FLOAT .)
    GD              reduce using rule 32 (expression -> FLOAT .)
    GDEQ            reduce using rule 32 (expression -> FLOAT .)
    EQUALEQUAL      reduce using rule 32 (expression -> FLOAT .)
    NOTEQ           reduce using rule 32 (expression -> FLOAT .)
    AND             reduce using rule 32 (expression -> FLOAT .)
    OR              reduce using rule 32 (expression -> FLOAT .)
    NAME            reduce using rule 32 (expression -> FLOAT .)
    INT             reduce using rule 32 (expression -> FLOAT .)
    FLOAT           reduce using rule 32 (expression -> FLOAT .)
    STRING          reduce using rule 32 (expression -> FLOAT .)
    TRUE            reduce using rule 32 (expression -> FLOAT .)
    FALSE           reduce using rule 32 (expression -> FLOAT .)
    LPAREN          reduce using rule 32 (expression -> FLOAT .)
    WHILE           reduce using rule 32 (expression -> FLOAT .)
    IF              reduce using rule 32 (expression -> FLOAT .)
    READ            reduce using rule 32 (expression -> FLOAT .)
    NOT             reduce using rule 32 (expression -> FLOAT .)
    PRINT           reduce using rule 32 (expression -> FLOAT .)
    $end            reduce using rule 32 (expression -> FLOAT .)
    RPAREN          reduce using rule 32 (expression -> FLOAT .)
    THEN            reduce using rule 32 (expression -> FLOAT .)
    STOP            reduce using rule 32 (expression -> FLOAT .)
    ELSE            reduce using rule 32 (expression -> FLOAT .)
    ELSE_IF         reduce using rule 32 (expression -> FLOAT .)


state 15

    (33) expression -> STRING .

    MULTIPLY        reduce using rule 33 (expression -> STRING .)
    DIVIDE          reduce using rule 33 (expression -> STRING .)
    MODULO          reduce using rule 33 (expression -> STRING .)
    PLUS            reduce using rule 33 (expression -> STRING .)
    MINUS           reduce using rule 33 (expression -> STRING .)
    LD              reduce using rule 33 (expression -> STRING .)
    LDEQ            reduce using rule 33 (expression -> STRING .)
    GD              reduce using rule 33 (expression -> STRING .)
    GDEQ            reduce using rule 33 (expression -> STRING .)
    EQUALEQUAL      reduce using rule 33 (expression -> STRING .)
    NOTEQ           reduce using rule 33 (expression -> STRING .)
    AND             reduce using rule 33 (expression -> STRING .)
    OR              reduce using rule 33 (expression -> STRING .)
    NAME            reduce using rule 33 (expression -> STRING .)
    INT             reduce using rule 33 (expression -> STRING .)
    FLOAT           reduce using rule 33 (expression -> STRING .)
    STRING          reduce using rule 33 (expression -> STRING .)
    TRUE            reduce using rule 33 (expression -> STRING .)
    FALSE           reduce using rule 33 (expression -> STRING .)
    LPAREN          reduce using rule 33 (expression -> STRING .)
    WHILE           reduce using rule 33 (expression -> STRING .)
    IF              reduce using rule 33 (expression -> STRING .)
    READ            reduce using rule 33 (expression -> STRING .)
    NOT             reduce using rule 33 (expression -> STRING .)
    PRINT           reduce using rule 33 (expression -> STRING .)
    $end            reduce using rule 33 (expression -> STRING .)
    RPAREN          reduce using rule 33 (expression -> STRING .)
    THEN            reduce using rule 33 (expression -> STRING .)
    STOP            reduce using rule 33 (expression -> STRING .)
    ELSE            reduce using rule 33 (expression -> STRING .)
    ELSE_IF         reduce using rule 33 (expression -> STRING .)


state 16

    (34) expression -> TRUE .

    MULTIPLY        reduce using rule 34 (expression -> TRUE .)
    DIVIDE          reduce using rule 34 (expression -> TRUE .)
    MODULO          reduce using rule 34 (expression -> TRUE .)
    PLUS            reduce using rule 34 (expression -> TRUE .)
    MINUS           reduce using rule 34 (expression -> TRUE .)
    LD              reduce using rule 34 (expression -> TRUE .)
    LDEQ            reduce using rule 34 (expression -> TRUE .)
    GD              reduce using rule 34 (expression -> TRUE .)
    GDEQ            reduce using rule 34 (expression -> TRUE .)
    EQUALEQUAL      reduce using rule 34 (expression -> TRUE .)
    NOTEQ           reduce using rule 34 (expression -> TRUE .)
    AND             reduce using rule 34 (expression -> TRUE .)
    OR              reduce using rule 34 (expression -> TRUE .)
    NAME            reduce using rule 34 (expression -> TRUE .)
    INT             reduce using rule 34 (expression -> TRUE .)
    FLOAT           reduce using rule 34 (expression -> TRUE .)
    STRING          reduce using rule 34 (expression -> TRUE .)
    TRUE            reduce using rule 34 (expression -> TRUE .)
    FALSE           reduce using rule 34 (expression -> TRUE .)
    LPAREN          reduce using rule 34 (expression -> TRUE .)
    WHILE           reduce using rule 34 (expression -> TRUE .)
    IF              reduce using rule 34 (expression -> TRUE .)
    READ            reduce using rule 34 (expression -> TRUE .)
    NOT             reduce using rule 34 (expression -> TRUE .)
    PRINT           reduce using rule 34 (expression -> TRUE .)
    $end            reduce using rule 34 (expression -> TRUE .)
    RPAREN          reduce using rule 34 (expression -> TRUE .)
    THEN            reduce using rule 34 (expression -> TRUE .)
    STOP            reduce using rule 34 (expression -> TRUE .)
    ELSE            reduce using rule 34 (expression -> TRUE .)
    ELSE_IF         reduce using rule 34 (expression -> TRUE .)


state 17

    (35) expression -> FALSE .

    MULTIPLY        reduce using rule 35 (expression -> FALSE .)
    DIVIDE          reduce using rule 35 (expression -> FALSE .)
    MODULO          reduce using rule 35 (expression -> FALSE .)
    PLUS            reduce using rule 35 (expression -> FALSE .)
    MINUS           reduce using rule 35 (expression -> FALSE .)
    LD              reduce using rule 35 (expression -> FALSE .)
    LDEQ            reduce using rule 35 (expression -> FALSE .)
    GD              reduce using rule 35 (expression -> FALSE .)
    GDEQ            reduce using rule 35 (expression -> FALSE .)
    EQUALEQUAL      reduce using rule 35 (expression -> FALSE .)
    NOTEQ           reduce using rule 35 (expression -> FALSE .)
    AND             reduce using rule 35 (expression -> FALSE .)
    OR              reduce using rule 35 (expression -> FALSE .)
    NAME            reduce using rule 35 (expression -> FALSE .)
    INT             reduce using rule 35 (expression -> FALSE .)
    FLOAT           reduce using rule 35 (expression -> FALSE .)
    STRING          reduce using rule 35 (expression -> FALSE .)
    TRUE            reduce using rule 35 (expression -> FALSE .)
    FALSE           reduce using rule 35 (expression -> FALSE .)
    LPAREN          reduce using rule 35 (expression -> FALSE .)
    WHILE           reduce using rule 35 (expression -> FALSE .)
    IF              reduce using rule 35 (expression -> FALSE .)
    READ            reduce using rule 35 (expression -> FALSE .)
    NOT             reduce using rule 35 (expression -> FALSE .)
    PRINT           reduce using rule 35 (expression -> FALSE .)
    $end            reduce using rule 35 (expression -> FALSE .)
    RPAREN          reduce using rule 35 (expression -> FALSE .)
    THEN            reduce using rule 35 (expression -> FALSE .)
    STOP            reduce using rule 35 (expression -> FALSE .)
    ELSE            reduce using rule 35 (expression -> FALSE .)
    ELSE_IF         reduce using rule 35 (expression -> FALSE .)


state 18

    (36) expression -> LPAREN . expression RPAREN
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 40
    expression_operation           shift and go to state 12

state 19

    (43) iterative -> WHILE . expression THEN language STOP
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 42
    expression_operation           shift and go to state 12

state 20

    (37) conditional -> IF . expression THEN language else_if_blocks else_block STOP
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 43
    expression_operation           shift and go to state 12

state 21

    (12) output -> output_print .

    NAME            reduce using rule 12 (output -> output_print .)
    INT             reduce using rule 12 (output -> output_print .)
    FLOAT           reduce using rule 12 (output -> output_print .)
    STRING          reduce using rule 12 (output -> output_print .)
    TRUE            reduce using rule 12 (output -> output_print .)
    FALSE           reduce using rule 12 (output -> output_print .)
    LPAREN          reduce using rule 12 (output -> output_print .)
    WHILE           reduce using rule 12 (output -> output_print .)
    IF              reduce using rule 12 (output -> output_print .)
    READ            reduce using rule 12 (output -> output_print .)
    NOT             reduce using rule 12 (output -> output_print .)
    PRINT           reduce using rule 12 (output -> output_print .)
    $end            reduce using rule 12 (output -> output_print .)
    STOP            reduce using rule 12 (output -> output_print .)
    ELSE            reduce using rule 12 (output -> output_print .)
    ELSE_IF         reduce using rule 12 (output -> output_print .)


state 22

    (11) input -> READ . LPAREN NAME RPAREN

    LPAREN          shift and go to state 44


state 23

    (30) expression_operation -> NOT . expression
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 45
    expression_operation           shift and go to state 12

state 24

    (13) output_print -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 46


state 25

    (3) language -> language line .

    NAME            reduce using rule 3 (language -> language line .)
    INT             reduce using rule 3 (language -> language line .)
    FLOAT           reduce using rule 3 (language -> language line .)
    STRING          reduce using rule 3 (language -> language line .)
    TRUE            reduce using rule 3 (language -> language line .)
    FALSE           reduce using rule 3 (language -> language line .)
    LPAREN          reduce using rule 3 (language -> language line .)
    WHILE           reduce using rule 3 (language -> language line .)
    IF              reduce using rule 3 (language -> language line .)
    READ            reduce using rule 3 (language -> language line .)
    NOT             reduce using rule 3 (language -> language line .)
    PRINT           reduce using rule 3 (language -> language line .)
    $end            reduce using rule 3 (language -> language line .)
    STOP            reduce using rule 3 (language -> language line .)
    ELSE            reduce using rule 3 (language -> language line .)
    ELSE_IF         reduce using rule 3 (language -> language line .)


state 26

    (17) expression_operation -> expression MULTIPLY . expression
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 47
    expression_operation           shift and go to state 12

state 27

    (18) expression_operation -> expression DIVIDE . expression
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 48
    expression_operation           shift and go to state 12

state 28

    (19) expression_operation -> expression MODULO . expression
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 49
    expression_operation           shift and go to state 12

state 29

    (20) expression_operation -> expression PLUS . expression
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 50
    expression_operation           shift and go to state 12

state 30

    (21) expression_operation -> expression MINUS . expression
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 51
    expression_operation           shift and go to state 12

state 31

    (22) expression_operation -> expression LD . expression
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 52
    expression_operation           shift and go to state 12

state 32

    (23) expression_operation -> expression LDEQ . expression
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 53
    expression_operation           shift and go to state 12

state 33

    (24) expression_operation -> expression GD . expression
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 54
    expression_operation           shift and go to state 12

state 34

    (25) expression_operation -> expression GDEQ . expression
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 55
    expression_operation           shift and go to state 12

state 35

    (26) expression_operation -> expression EQUALEQUAL . expression
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 56
    expression_operation           shift and go to state 12

state 36

    (27) expression_operation -> expression NOTEQ . expression
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 57
    expression_operation           shift and go to state 12

state 37

    (28) expression_operation -> expression AND . expression
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 58
    expression_operation           shift and go to state 12

state 38

    (29) expression_operation -> expression OR . expression
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 59
    expression_operation           shift and go to state 12

state 39

    (15) var_assign -> NAME EQUALS . expression
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 60
    expression_operation           shift and go to state 12

state 40

    (36) expression -> LPAREN expression . RPAREN
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    RPAREN          shift and go to state 61
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULO          shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    LD              shift and go to state 31
    LDEQ            shift and go to state 32
    GD              shift and go to state 33
    GDEQ            shift and go to state 34
    EQUALEQUAL      shift and go to state 35
    NOTEQ           shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 41

    (14) expression -> NAME .

    RPAREN          reduce using rule 14 (expression -> NAME .)
    MULTIPLY        reduce using rule 14 (expression -> NAME .)
    DIVIDE          reduce using rule 14 (expression -> NAME .)
    MODULO          reduce using rule 14 (expression -> NAME .)
    PLUS            reduce using rule 14 (expression -> NAME .)
    MINUS           reduce using rule 14 (expression -> NAME .)
    LD              reduce using rule 14 (expression -> NAME .)
    LDEQ            reduce using rule 14 (expression -> NAME .)
    GD              reduce using rule 14 (expression -> NAME .)
    GDEQ            reduce using rule 14 (expression -> NAME .)
    EQUALEQUAL      reduce using rule 14 (expression -> NAME .)
    NOTEQ           reduce using rule 14 (expression -> NAME .)
    AND             reduce using rule 14 (expression -> NAME .)
    OR              reduce using rule 14 (expression -> NAME .)
    THEN            reduce using rule 14 (expression -> NAME .)
    NAME            reduce using rule 14 (expression -> NAME .)
    INT             reduce using rule 14 (expression -> NAME .)
    FLOAT           reduce using rule 14 (expression -> NAME .)
    STRING          reduce using rule 14 (expression -> NAME .)
    TRUE            reduce using rule 14 (expression -> NAME .)
    FALSE           reduce using rule 14 (expression -> NAME .)
    LPAREN          reduce using rule 14 (expression -> NAME .)
    WHILE           reduce using rule 14 (expression -> NAME .)
    IF              reduce using rule 14 (expression -> NAME .)
    READ            reduce using rule 14 (expression -> NAME .)
    NOT             reduce using rule 14 (expression -> NAME .)
    PRINT           reduce using rule 14 (expression -> NAME .)
    $end            reduce using rule 14 (expression -> NAME .)
    STOP            reduce using rule 14 (expression -> NAME .)
    ELSE            reduce using rule 14 (expression -> NAME .)
    ELSE_IF         reduce using rule 14 (expression -> NAME .)


state 42

    (43) iterative -> WHILE expression . THEN language STOP
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    THEN            shift and go to state 62
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULO          shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    LD              shift and go to state 31
    LDEQ            shift and go to state 32
    GD              shift and go to state 33
    GDEQ            shift and go to state 34
    EQUALEQUAL      shift and go to state 35
    NOTEQ           shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 43

    (37) conditional -> IF expression . THEN language else_if_blocks else_block STOP
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    THEN            shift and go to state 63
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULO          shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    LD              shift and go to state 31
    LDEQ            shift and go to state 32
    GD              shift and go to state 33
    GDEQ            shift and go to state 34
    EQUALEQUAL      shift and go to state 35
    NOTEQ           shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 44

    (11) input -> READ LPAREN . NAME RPAREN

    NAME            shift and go to state 64


state 45

    (30) expression_operation -> NOT expression .
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    MULTIPLY        reduce using rule 30 (expression_operation -> NOT expression .)
    DIVIDE          reduce using rule 30 (expression_operation -> NOT expression .)
    MODULO          reduce using rule 30 (expression_operation -> NOT expression .)
    PLUS            reduce using rule 30 (expression_operation -> NOT expression .)
    MINUS           reduce using rule 30 (expression_operation -> NOT expression .)
    LD              reduce using rule 30 (expression_operation -> NOT expression .)
    LDEQ            reduce using rule 30 (expression_operation -> NOT expression .)
    GD              reduce using rule 30 (expression_operation -> NOT expression .)
    GDEQ            reduce using rule 30 (expression_operation -> NOT expression .)
    EQUALEQUAL      reduce using rule 30 (expression_operation -> NOT expression .)
    NOTEQ           reduce using rule 30 (expression_operation -> NOT expression .)
    AND             reduce using rule 30 (expression_operation -> NOT expression .)
    OR              reduce using rule 30 (expression_operation -> NOT expression .)
    NAME            reduce using rule 30 (expression_operation -> NOT expression .)
    INT             reduce using rule 30 (expression_operation -> NOT expression .)
    FLOAT           reduce using rule 30 (expression_operation -> NOT expression .)
    STRING          reduce using rule 30 (expression_operation -> NOT expression .)
    TRUE            reduce using rule 30 (expression_operation -> NOT expression .)
    FALSE           reduce using rule 30 (expression_operation -> NOT expression .)
    LPAREN          reduce using rule 30 (expression_operation -> NOT expression .)
    WHILE           reduce using rule 30 (expression_operation -> NOT expression .)
    IF              reduce using rule 30 (expression_operation -> NOT expression .)
    READ            reduce using rule 30 (expression_operation -> NOT expression .)
    NOT             reduce using rule 30 (expression_operation -> NOT expression .)
    PRINT           reduce using rule 30 (expression_operation -> NOT expression .)
    $end            reduce using rule 30 (expression_operation -> NOT expression .)
    RPAREN          reduce using rule 30 (expression_operation -> NOT expression .)
    THEN            reduce using rule 30 (expression_operation -> NOT expression .)
    STOP            reduce using rule 30 (expression_operation -> NOT expression .)
    ELSE            reduce using rule 30 (expression_operation -> NOT expression .)
    ELSE_IF         reduce using rule 30 (expression_operation -> NOT expression .)

  ! MULTIPLY        [ shift and go to state 26 ]
  ! DIVIDE          [ shift and go to state 27 ]
  ! MODULO          [ shift and go to state 28 ]
  ! PLUS            [ shift and go to state 29 ]
  ! MINUS           [ shift and go to state 30 ]
  ! LD              [ shift and go to state 31 ]
  ! LDEQ            [ shift and go to state 32 ]
  ! GD              [ shift and go to state 33 ]
  ! GDEQ            [ shift and go to state 34 ]
  ! EQUALEQUAL      [ shift and go to state 35 ]
  ! NOTEQ           [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 46

    (13) output_print -> PRINT LPAREN . expression RPAREN
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 65
    expression_operation           shift and go to state 12

state 47

    (17) expression_operation -> expression MULTIPLY expression .
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    MULTIPLY        reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    MODULO          reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    PLUS            reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    MINUS           reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    LD              reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    LDEQ            reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    GD              reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    GDEQ            reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    EQUALEQUAL      reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    NOTEQ           reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    AND             reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    OR              reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    NAME            reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    INT             reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    FLOAT           reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    STRING          reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    TRUE            reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    FALSE           reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    LPAREN          reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    WHILE           reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    IF              reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    READ            reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    NOT             reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    PRINT           reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    $end            reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    THEN            reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    STOP            reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    ELSE            reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)
    ELSE_IF         reduce using rule 17 (expression_operation -> expression MULTIPLY expression .)

  ! MULTIPLY        [ shift and go to state 26 ]
  ! DIVIDE          [ shift and go to state 27 ]
  ! MODULO          [ shift and go to state 28 ]
  ! PLUS            [ shift and go to state 29 ]
  ! MINUS           [ shift and go to state 30 ]
  ! LD              [ shift and go to state 31 ]
  ! LDEQ            [ shift and go to state 32 ]
  ! GD              [ shift and go to state 33 ]
  ! GDEQ            [ shift and go to state 34 ]
  ! EQUALEQUAL      [ shift and go to state 35 ]
  ! NOTEQ           [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 48

    (18) expression_operation -> expression DIVIDE expression .
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    MULTIPLY        reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    MODULO          reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    PLUS            reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    MINUS           reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    LD              reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    LDEQ            reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    GD              reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    GDEQ            reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    EQUALEQUAL      reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    NOTEQ           reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    AND             reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    OR              reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    NAME            reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    INT             reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    FLOAT           reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    STRING          reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    TRUE            reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    FALSE           reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    LPAREN          reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    WHILE           reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    IF              reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    READ            reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    NOT             reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    PRINT           reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    $end            reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    RPAREN          reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    THEN            reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    STOP            reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    ELSE            reduce using rule 18 (expression_operation -> expression DIVIDE expression .)
    ELSE_IF         reduce using rule 18 (expression_operation -> expression DIVIDE expression .)

  ! MULTIPLY        [ shift and go to state 26 ]
  ! DIVIDE          [ shift and go to state 27 ]
  ! MODULO          [ shift and go to state 28 ]
  ! PLUS            [ shift and go to state 29 ]
  ! MINUS           [ shift and go to state 30 ]
  ! LD              [ shift and go to state 31 ]
  ! LDEQ            [ shift and go to state 32 ]
  ! GD              [ shift and go to state 33 ]
  ! GDEQ            [ shift and go to state 34 ]
  ! EQUALEQUAL      [ shift and go to state 35 ]
  ! NOTEQ           [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 49

    (19) expression_operation -> expression MODULO expression .
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    MULTIPLY        reduce using rule 19 (expression_operation -> expression MODULO expression .)
    DIVIDE          reduce using rule 19 (expression_operation -> expression MODULO expression .)
    MODULO          reduce using rule 19 (expression_operation -> expression MODULO expression .)
    PLUS            reduce using rule 19 (expression_operation -> expression MODULO expression .)
    MINUS           reduce using rule 19 (expression_operation -> expression MODULO expression .)
    LD              reduce using rule 19 (expression_operation -> expression MODULO expression .)
    LDEQ            reduce using rule 19 (expression_operation -> expression MODULO expression .)
    GD              reduce using rule 19 (expression_operation -> expression MODULO expression .)
    GDEQ            reduce using rule 19 (expression_operation -> expression MODULO expression .)
    EQUALEQUAL      reduce using rule 19 (expression_operation -> expression MODULO expression .)
    NOTEQ           reduce using rule 19 (expression_operation -> expression MODULO expression .)
    AND             reduce using rule 19 (expression_operation -> expression MODULO expression .)
    OR              reduce using rule 19 (expression_operation -> expression MODULO expression .)
    NAME            reduce using rule 19 (expression_operation -> expression MODULO expression .)
    INT             reduce using rule 19 (expression_operation -> expression MODULO expression .)
    FLOAT           reduce using rule 19 (expression_operation -> expression MODULO expression .)
    STRING          reduce using rule 19 (expression_operation -> expression MODULO expression .)
    TRUE            reduce using rule 19 (expression_operation -> expression MODULO expression .)
    FALSE           reduce using rule 19 (expression_operation -> expression MODULO expression .)
    LPAREN          reduce using rule 19 (expression_operation -> expression MODULO expression .)
    WHILE           reduce using rule 19 (expression_operation -> expression MODULO expression .)
    IF              reduce using rule 19 (expression_operation -> expression MODULO expression .)
    READ            reduce using rule 19 (expression_operation -> expression MODULO expression .)
    NOT             reduce using rule 19 (expression_operation -> expression MODULO expression .)
    PRINT           reduce using rule 19 (expression_operation -> expression MODULO expression .)
    $end            reduce using rule 19 (expression_operation -> expression MODULO expression .)
    RPAREN          reduce using rule 19 (expression_operation -> expression MODULO expression .)
    THEN            reduce using rule 19 (expression_operation -> expression MODULO expression .)
    STOP            reduce using rule 19 (expression_operation -> expression MODULO expression .)
    ELSE            reduce using rule 19 (expression_operation -> expression MODULO expression .)
    ELSE_IF         reduce using rule 19 (expression_operation -> expression MODULO expression .)

  ! MULTIPLY        [ shift and go to state 26 ]
  ! DIVIDE          [ shift and go to state 27 ]
  ! MODULO          [ shift and go to state 28 ]
  ! PLUS            [ shift and go to state 29 ]
  ! MINUS           [ shift and go to state 30 ]
  ! LD              [ shift and go to state 31 ]
  ! LDEQ            [ shift and go to state 32 ]
  ! GD              [ shift and go to state 33 ]
  ! GDEQ            [ shift and go to state 34 ]
  ! EQUALEQUAL      [ shift and go to state 35 ]
  ! NOTEQ           [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 50

    (20) expression_operation -> expression PLUS expression .
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    PLUS            reduce using rule 20 (expression_operation -> expression PLUS expression .)
    MINUS           reduce using rule 20 (expression_operation -> expression PLUS expression .)
    LD              reduce using rule 20 (expression_operation -> expression PLUS expression .)
    LDEQ            reduce using rule 20 (expression_operation -> expression PLUS expression .)
    GD              reduce using rule 20 (expression_operation -> expression PLUS expression .)
    GDEQ            reduce using rule 20 (expression_operation -> expression PLUS expression .)
    EQUALEQUAL      reduce using rule 20 (expression_operation -> expression PLUS expression .)
    NOTEQ           reduce using rule 20 (expression_operation -> expression PLUS expression .)
    AND             reduce using rule 20 (expression_operation -> expression PLUS expression .)
    OR              reduce using rule 20 (expression_operation -> expression PLUS expression .)
    NAME            reduce using rule 20 (expression_operation -> expression PLUS expression .)
    INT             reduce using rule 20 (expression_operation -> expression PLUS expression .)
    FLOAT           reduce using rule 20 (expression_operation -> expression PLUS expression .)
    STRING          reduce using rule 20 (expression_operation -> expression PLUS expression .)
    TRUE            reduce using rule 20 (expression_operation -> expression PLUS expression .)
    FALSE           reduce using rule 20 (expression_operation -> expression PLUS expression .)
    LPAREN          reduce using rule 20 (expression_operation -> expression PLUS expression .)
    WHILE           reduce using rule 20 (expression_operation -> expression PLUS expression .)
    IF              reduce using rule 20 (expression_operation -> expression PLUS expression .)
    READ            reduce using rule 20 (expression_operation -> expression PLUS expression .)
    NOT             reduce using rule 20 (expression_operation -> expression PLUS expression .)
    PRINT           reduce using rule 20 (expression_operation -> expression PLUS expression .)
    $end            reduce using rule 20 (expression_operation -> expression PLUS expression .)
    RPAREN          reduce using rule 20 (expression_operation -> expression PLUS expression .)
    THEN            reduce using rule 20 (expression_operation -> expression PLUS expression .)
    STOP            reduce using rule 20 (expression_operation -> expression PLUS expression .)
    ELSE            reduce using rule 20 (expression_operation -> expression PLUS expression .)
    ELSE_IF         reduce using rule 20 (expression_operation -> expression PLUS expression .)
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULO          shift and go to state 28

  ! MULTIPLY        [ reduce using rule 20 (expression_operation -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 20 (expression_operation -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 20 (expression_operation -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 29 ]
  ! MINUS           [ shift and go to state 30 ]
  ! LD              [ shift and go to state 31 ]
  ! LDEQ            [ shift and go to state 32 ]
  ! GD              [ shift and go to state 33 ]
  ! GDEQ            [ shift and go to state 34 ]
  ! EQUALEQUAL      [ shift and go to state 35 ]
  ! NOTEQ           [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 51

    (21) expression_operation -> expression MINUS expression .
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    PLUS            reduce using rule 21 (expression_operation -> expression MINUS expression .)
    MINUS           reduce using rule 21 (expression_operation -> expression MINUS expression .)
    LD              reduce using rule 21 (expression_operation -> expression MINUS expression .)
    LDEQ            reduce using rule 21 (expression_operation -> expression MINUS expression .)
    GD              reduce using rule 21 (expression_operation -> expression MINUS expression .)
    GDEQ            reduce using rule 21 (expression_operation -> expression MINUS expression .)
    EQUALEQUAL      reduce using rule 21 (expression_operation -> expression MINUS expression .)
    NOTEQ           reduce using rule 21 (expression_operation -> expression MINUS expression .)
    AND             reduce using rule 21 (expression_operation -> expression MINUS expression .)
    OR              reduce using rule 21 (expression_operation -> expression MINUS expression .)
    NAME            reduce using rule 21 (expression_operation -> expression MINUS expression .)
    INT             reduce using rule 21 (expression_operation -> expression MINUS expression .)
    FLOAT           reduce using rule 21 (expression_operation -> expression MINUS expression .)
    STRING          reduce using rule 21 (expression_operation -> expression MINUS expression .)
    TRUE            reduce using rule 21 (expression_operation -> expression MINUS expression .)
    FALSE           reduce using rule 21 (expression_operation -> expression MINUS expression .)
    LPAREN          reduce using rule 21 (expression_operation -> expression MINUS expression .)
    WHILE           reduce using rule 21 (expression_operation -> expression MINUS expression .)
    IF              reduce using rule 21 (expression_operation -> expression MINUS expression .)
    READ            reduce using rule 21 (expression_operation -> expression MINUS expression .)
    NOT             reduce using rule 21 (expression_operation -> expression MINUS expression .)
    PRINT           reduce using rule 21 (expression_operation -> expression MINUS expression .)
    $end            reduce using rule 21 (expression_operation -> expression MINUS expression .)
    RPAREN          reduce using rule 21 (expression_operation -> expression MINUS expression .)
    THEN            reduce using rule 21 (expression_operation -> expression MINUS expression .)
    STOP            reduce using rule 21 (expression_operation -> expression MINUS expression .)
    ELSE            reduce using rule 21 (expression_operation -> expression MINUS expression .)
    ELSE_IF         reduce using rule 21 (expression_operation -> expression MINUS expression .)
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULO          shift and go to state 28

  ! MULTIPLY        [ reduce using rule 21 (expression_operation -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 21 (expression_operation -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 21 (expression_operation -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 29 ]
  ! MINUS           [ shift and go to state 30 ]
  ! LD              [ shift and go to state 31 ]
  ! LDEQ            [ shift and go to state 32 ]
  ! GD              [ shift and go to state 33 ]
  ! GDEQ            [ shift and go to state 34 ]
  ! EQUALEQUAL      [ shift and go to state 35 ]
  ! NOTEQ           [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 52

    (22) expression_operation -> expression LD expression .
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    LD              reduce using rule 22 (expression_operation -> expression LD expression .)
    LDEQ            reduce using rule 22 (expression_operation -> expression LD expression .)
    GD              reduce using rule 22 (expression_operation -> expression LD expression .)
    GDEQ            reduce using rule 22 (expression_operation -> expression LD expression .)
    EQUALEQUAL      reduce using rule 22 (expression_operation -> expression LD expression .)
    NOTEQ           reduce using rule 22 (expression_operation -> expression LD expression .)
    AND             reduce using rule 22 (expression_operation -> expression LD expression .)
    OR              reduce using rule 22 (expression_operation -> expression LD expression .)
    NAME            reduce using rule 22 (expression_operation -> expression LD expression .)
    INT             reduce using rule 22 (expression_operation -> expression LD expression .)
    FLOAT           reduce using rule 22 (expression_operation -> expression LD expression .)
    STRING          reduce using rule 22 (expression_operation -> expression LD expression .)
    TRUE            reduce using rule 22 (expression_operation -> expression LD expression .)
    FALSE           reduce using rule 22 (expression_operation -> expression LD expression .)
    LPAREN          reduce using rule 22 (expression_operation -> expression LD expression .)
    WHILE           reduce using rule 22 (expression_operation -> expression LD expression .)
    IF              reduce using rule 22 (expression_operation -> expression LD expression .)
    READ            reduce using rule 22 (expression_operation -> expression LD expression .)
    NOT             reduce using rule 22 (expression_operation -> expression LD expression .)
    PRINT           reduce using rule 22 (expression_operation -> expression LD expression .)
    $end            reduce using rule 22 (expression_operation -> expression LD expression .)
    RPAREN          reduce using rule 22 (expression_operation -> expression LD expression .)
    THEN            reduce using rule 22 (expression_operation -> expression LD expression .)
    STOP            reduce using rule 22 (expression_operation -> expression LD expression .)
    ELSE            reduce using rule 22 (expression_operation -> expression LD expression .)
    ELSE_IF         reduce using rule 22 (expression_operation -> expression LD expression .)
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULO          shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30

  ! MULTIPLY        [ reduce using rule 22 (expression_operation -> expression LD expression .) ]
  ! DIVIDE          [ reduce using rule 22 (expression_operation -> expression LD expression .) ]
  ! MODULO          [ reduce using rule 22 (expression_operation -> expression LD expression .) ]
  ! PLUS            [ reduce using rule 22 (expression_operation -> expression LD expression .) ]
  ! MINUS           [ reduce using rule 22 (expression_operation -> expression LD expression .) ]
  ! LD              [ shift and go to state 31 ]
  ! LDEQ            [ shift and go to state 32 ]
  ! GD              [ shift and go to state 33 ]
  ! GDEQ            [ shift and go to state 34 ]
  ! EQUALEQUAL      [ shift and go to state 35 ]
  ! NOTEQ           [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 53

    (23) expression_operation -> expression LDEQ expression .
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    LD              reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    LDEQ            reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    GD              reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    GDEQ            reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    EQUALEQUAL      reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    NOTEQ           reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    AND             reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    OR              reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    NAME            reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    INT             reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    FLOAT           reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    STRING          reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    TRUE            reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    FALSE           reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    LPAREN          reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    WHILE           reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    IF              reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    READ            reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    NOT             reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    PRINT           reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    $end            reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    RPAREN          reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    THEN            reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    STOP            reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    ELSE            reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    ELSE_IF         reduce using rule 23 (expression_operation -> expression LDEQ expression .)
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULO          shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30

  ! MULTIPLY        [ reduce using rule 23 (expression_operation -> expression LDEQ expression .) ]
  ! DIVIDE          [ reduce using rule 23 (expression_operation -> expression LDEQ expression .) ]
  ! MODULO          [ reduce using rule 23 (expression_operation -> expression LDEQ expression .) ]
  ! PLUS            [ reduce using rule 23 (expression_operation -> expression LDEQ expression .) ]
  ! MINUS           [ reduce using rule 23 (expression_operation -> expression LDEQ expression .) ]
  ! LD              [ shift and go to state 31 ]
  ! LDEQ            [ shift and go to state 32 ]
  ! GD              [ shift and go to state 33 ]
  ! GDEQ            [ shift and go to state 34 ]
  ! EQUALEQUAL      [ shift and go to state 35 ]
  ! NOTEQ           [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 54

    (24) expression_operation -> expression GD expression .
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    LD              reduce using rule 24 (expression_operation -> expression GD expression .)
    LDEQ            reduce using rule 24 (expression_operation -> expression GD expression .)
    GD              reduce using rule 24 (expression_operation -> expression GD expression .)
    GDEQ            reduce using rule 24 (expression_operation -> expression GD expression .)
    EQUALEQUAL      reduce using rule 24 (expression_operation -> expression GD expression .)
    NOTEQ           reduce using rule 24 (expression_operation -> expression GD expression .)
    AND             reduce using rule 24 (expression_operation -> expression GD expression .)
    OR              reduce using rule 24 (expression_operation -> expression GD expression .)
    NAME            reduce using rule 24 (expression_operation -> expression GD expression .)
    INT             reduce using rule 24 (expression_operation -> expression GD expression .)
    FLOAT           reduce using rule 24 (expression_operation -> expression GD expression .)
    STRING          reduce using rule 24 (expression_operation -> expression GD expression .)
    TRUE            reduce using rule 24 (expression_operation -> expression GD expression .)
    FALSE           reduce using rule 24 (expression_operation -> expression GD expression .)
    LPAREN          reduce using rule 24 (expression_operation -> expression GD expression .)
    WHILE           reduce using rule 24 (expression_operation -> expression GD expression .)
    IF              reduce using rule 24 (expression_operation -> expression GD expression .)
    READ            reduce using rule 24 (expression_operation -> expression GD expression .)
    NOT             reduce using rule 24 (expression_operation -> expression GD expression .)
    PRINT           reduce using rule 24 (expression_operation -> expression GD expression .)
    $end            reduce using rule 24 (expression_operation -> expression GD expression .)
    RPAREN          reduce using rule 24 (expression_operation -> expression GD expression .)
    THEN            reduce using rule 24 (expression_operation -> expression GD expression .)
    STOP            reduce using rule 24 (expression_operation -> expression GD expression .)
    ELSE            reduce using rule 24 (expression_operation -> expression GD expression .)
    ELSE_IF         reduce using rule 24 (expression_operation -> expression GD expression .)
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULO          shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30

  ! MULTIPLY        [ reduce using rule 24 (expression_operation -> expression GD expression .) ]
  ! DIVIDE          [ reduce using rule 24 (expression_operation -> expression GD expression .) ]
  ! MODULO          [ reduce using rule 24 (expression_operation -> expression GD expression .) ]
  ! PLUS            [ reduce using rule 24 (expression_operation -> expression GD expression .) ]
  ! MINUS           [ reduce using rule 24 (expression_operation -> expression GD expression .) ]
  ! LD              [ shift and go to state 31 ]
  ! LDEQ            [ shift and go to state 32 ]
  ! GD              [ shift and go to state 33 ]
  ! GDEQ            [ shift and go to state 34 ]
  ! EQUALEQUAL      [ shift and go to state 35 ]
  ! NOTEQ           [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 55

    (25) expression_operation -> expression GDEQ expression .
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    LD              reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    LDEQ            reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    GD              reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    GDEQ            reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    EQUALEQUAL      reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    NOTEQ           reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    AND             reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    OR              reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    NAME            reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    INT             reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    FLOAT           reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    STRING          reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    TRUE            reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    FALSE           reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    LPAREN          reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    WHILE           reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    IF              reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    READ            reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    NOT             reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    PRINT           reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    $end            reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    RPAREN          reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    THEN            reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    STOP            reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    ELSE            reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    ELSE_IF         reduce using rule 25 (expression_operation -> expression GDEQ expression .)
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULO          shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30

  ! MULTIPLY        [ reduce using rule 25 (expression_operation -> expression GDEQ expression .) ]
  ! DIVIDE          [ reduce using rule 25 (expression_operation -> expression GDEQ expression .) ]
  ! MODULO          [ reduce using rule 25 (expression_operation -> expression GDEQ expression .) ]
  ! PLUS            [ reduce using rule 25 (expression_operation -> expression GDEQ expression .) ]
  ! MINUS           [ reduce using rule 25 (expression_operation -> expression GDEQ expression .) ]
  ! LD              [ shift and go to state 31 ]
  ! LDEQ            [ shift and go to state 32 ]
  ! GD              [ shift and go to state 33 ]
  ! GDEQ            [ shift and go to state 34 ]
  ! EQUALEQUAL      [ shift and go to state 35 ]
  ! NOTEQ           [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 56

    (26) expression_operation -> expression EQUALEQUAL expression .
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    EQUALEQUAL      reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    NOTEQ           reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    AND             reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    OR              reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    NAME            reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    INT             reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    FLOAT           reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    STRING          reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    TRUE            reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    FALSE           reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    LPAREN          reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    WHILE           reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    IF              reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    READ            reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    NOT             reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    PRINT           reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    $end            reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    RPAREN          reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    THEN            reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    STOP            reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    ELSE            reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    ELSE_IF         reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .)
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULO          shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    LD              shift and go to state 31
    LDEQ            shift and go to state 32
    GD              shift and go to state 33
    GDEQ            shift and go to state 34

  ! MULTIPLY        [ reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! MODULO          [ reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! PLUS            [ reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! MINUS           [ reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! LD              [ reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! LDEQ            [ reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! GD              [ reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! GDEQ            [ reduce using rule 26 (expression_operation -> expression EQUALEQUAL expression .) ]
  ! EQUALEQUAL      [ shift and go to state 35 ]
  ! NOTEQ           [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 57

    (27) expression_operation -> expression NOTEQ expression .
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    EQUALEQUAL      reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    NOTEQ           reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    AND             reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    OR              reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    NAME            reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    INT             reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    FLOAT           reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    STRING          reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    TRUE            reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    FALSE           reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    LPAREN          reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    WHILE           reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    IF              reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    READ            reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    NOT             reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    PRINT           reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    $end            reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    RPAREN          reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    THEN            reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    STOP            reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    ELSE            reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    ELSE_IF         reduce using rule 27 (expression_operation -> expression NOTEQ expression .)
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULO          shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    LD              shift and go to state 31
    LDEQ            shift and go to state 32
    GD              shift and go to state 33
    GDEQ            shift and go to state 34

  ! MULTIPLY        [ reduce using rule 27 (expression_operation -> expression NOTEQ expression .) ]
  ! DIVIDE          [ reduce using rule 27 (expression_operation -> expression NOTEQ expression .) ]
  ! MODULO          [ reduce using rule 27 (expression_operation -> expression NOTEQ expression .) ]
  ! PLUS            [ reduce using rule 27 (expression_operation -> expression NOTEQ expression .) ]
  ! MINUS           [ reduce using rule 27 (expression_operation -> expression NOTEQ expression .) ]
  ! LD              [ reduce using rule 27 (expression_operation -> expression NOTEQ expression .) ]
  ! LDEQ            [ reduce using rule 27 (expression_operation -> expression NOTEQ expression .) ]
  ! GD              [ reduce using rule 27 (expression_operation -> expression NOTEQ expression .) ]
  ! GDEQ            [ reduce using rule 27 (expression_operation -> expression NOTEQ expression .) ]
  ! EQUALEQUAL      [ shift and go to state 35 ]
  ! NOTEQ           [ shift and go to state 36 ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 58

    (28) expression_operation -> expression AND expression .
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    AND             reduce using rule 28 (expression_operation -> expression AND expression .)
    OR              reduce using rule 28 (expression_operation -> expression AND expression .)
    NAME            reduce using rule 28 (expression_operation -> expression AND expression .)
    INT             reduce using rule 28 (expression_operation -> expression AND expression .)
    FLOAT           reduce using rule 28 (expression_operation -> expression AND expression .)
    STRING          reduce using rule 28 (expression_operation -> expression AND expression .)
    TRUE            reduce using rule 28 (expression_operation -> expression AND expression .)
    FALSE           reduce using rule 28 (expression_operation -> expression AND expression .)
    LPAREN          reduce using rule 28 (expression_operation -> expression AND expression .)
    WHILE           reduce using rule 28 (expression_operation -> expression AND expression .)
    IF              reduce using rule 28 (expression_operation -> expression AND expression .)
    READ            reduce using rule 28 (expression_operation -> expression AND expression .)
    NOT             reduce using rule 28 (expression_operation -> expression AND expression .)
    PRINT           reduce using rule 28 (expression_operation -> expression AND expression .)
    $end            reduce using rule 28 (expression_operation -> expression AND expression .)
    RPAREN          reduce using rule 28 (expression_operation -> expression AND expression .)
    THEN            reduce using rule 28 (expression_operation -> expression AND expression .)
    STOP            reduce using rule 28 (expression_operation -> expression AND expression .)
    ELSE            reduce using rule 28 (expression_operation -> expression AND expression .)
    ELSE_IF         reduce using rule 28 (expression_operation -> expression AND expression .)
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULO          shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    LD              shift and go to state 31
    LDEQ            shift and go to state 32
    GD              shift and go to state 33
    GDEQ            shift and go to state 34
    EQUALEQUAL      shift and go to state 35
    NOTEQ           shift and go to state 36

  ! MULTIPLY        [ reduce using rule 28 (expression_operation -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 28 (expression_operation -> expression AND expression .) ]
  ! MODULO          [ reduce using rule 28 (expression_operation -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 28 (expression_operation -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 28 (expression_operation -> expression AND expression .) ]
  ! LD              [ reduce using rule 28 (expression_operation -> expression AND expression .) ]
  ! LDEQ            [ reduce using rule 28 (expression_operation -> expression AND expression .) ]
  ! GD              [ reduce using rule 28 (expression_operation -> expression AND expression .) ]
  ! GDEQ            [ reduce using rule 28 (expression_operation -> expression AND expression .) ]
  ! EQUALEQUAL      [ reduce using rule 28 (expression_operation -> expression AND expression .) ]
  ! NOTEQ           [ reduce using rule 28 (expression_operation -> expression AND expression .) ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 59

    (29) expression_operation -> expression OR expression .
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    AND             reduce using rule 29 (expression_operation -> expression OR expression .)
    OR              reduce using rule 29 (expression_operation -> expression OR expression .)
    NAME            reduce using rule 29 (expression_operation -> expression OR expression .)
    INT             reduce using rule 29 (expression_operation -> expression OR expression .)
    FLOAT           reduce using rule 29 (expression_operation -> expression OR expression .)
    STRING          reduce using rule 29 (expression_operation -> expression OR expression .)
    TRUE            reduce using rule 29 (expression_operation -> expression OR expression .)
    FALSE           reduce using rule 29 (expression_operation -> expression OR expression .)
    LPAREN          reduce using rule 29 (expression_operation -> expression OR expression .)
    WHILE           reduce using rule 29 (expression_operation -> expression OR expression .)
    IF              reduce using rule 29 (expression_operation -> expression OR expression .)
    READ            reduce using rule 29 (expression_operation -> expression OR expression .)
    NOT             reduce using rule 29 (expression_operation -> expression OR expression .)
    PRINT           reduce using rule 29 (expression_operation -> expression OR expression .)
    $end            reduce using rule 29 (expression_operation -> expression OR expression .)
    RPAREN          reduce using rule 29 (expression_operation -> expression OR expression .)
    THEN            reduce using rule 29 (expression_operation -> expression OR expression .)
    STOP            reduce using rule 29 (expression_operation -> expression OR expression .)
    ELSE            reduce using rule 29 (expression_operation -> expression OR expression .)
    ELSE_IF         reduce using rule 29 (expression_operation -> expression OR expression .)
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULO          shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    LD              shift and go to state 31
    LDEQ            shift and go to state 32
    GD              shift and go to state 33
    GDEQ            shift and go to state 34
    EQUALEQUAL      shift and go to state 35
    NOTEQ           shift and go to state 36

  ! MULTIPLY        [ reduce using rule 29 (expression_operation -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 29 (expression_operation -> expression OR expression .) ]
  ! MODULO          [ reduce using rule 29 (expression_operation -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 29 (expression_operation -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 29 (expression_operation -> expression OR expression .) ]
  ! LD              [ reduce using rule 29 (expression_operation -> expression OR expression .) ]
  ! LDEQ            [ reduce using rule 29 (expression_operation -> expression OR expression .) ]
  ! GD              [ reduce using rule 29 (expression_operation -> expression OR expression .) ]
  ! GDEQ            [ reduce using rule 29 (expression_operation -> expression OR expression .) ]
  ! EQUALEQUAL      [ reduce using rule 29 (expression_operation -> expression OR expression .) ]
  ! NOTEQ           [ reduce using rule 29 (expression_operation -> expression OR expression .) ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 60

    (15) var_assign -> NAME EQUALS expression .
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    NAME            reduce using rule 15 (var_assign -> NAME EQUALS expression .)
    INT             reduce using rule 15 (var_assign -> NAME EQUALS expression .)
    FLOAT           reduce using rule 15 (var_assign -> NAME EQUALS expression .)
    STRING          reduce using rule 15 (var_assign -> NAME EQUALS expression .)
    TRUE            reduce using rule 15 (var_assign -> NAME EQUALS expression .)
    FALSE           reduce using rule 15 (var_assign -> NAME EQUALS expression .)
    LPAREN          reduce using rule 15 (var_assign -> NAME EQUALS expression .)
    WHILE           reduce using rule 15 (var_assign -> NAME EQUALS expression .)
    IF              reduce using rule 15 (var_assign -> NAME EQUALS expression .)
    READ            reduce using rule 15 (var_assign -> NAME EQUALS expression .)
    NOT             reduce using rule 15 (var_assign -> NAME EQUALS expression .)
    PRINT           reduce using rule 15 (var_assign -> NAME EQUALS expression .)
    $end            reduce using rule 15 (var_assign -> NAME EQUALS expression .)
    STOP            reduce using rule 15 (var_assign -> NAME EQUALS expression .)
    ELSE            reduce using rule 15 (var_assign -> NAME EQUALS expression .)
    ELSE_IF         reduce using rule 15 (var_assign -> NAME EQUALS expression .)
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULO          shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    LD              shift and go to state 31
    LDEQ            shift and go to state 32
    GD              shift and go to state 33
    GDEQ            shift and go to state 34
    EQUALEQUAL      shift and go to state 35
    NOTEQ           shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 61

    (36) expression -> LPAREN expression RPAREN .

    MULTIPLY        reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    LD              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    LDEQ            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    GD              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    GDEQ            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    EQUALEQUAL      reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    NOTEQ           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    NAME            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    INT             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    READ            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    STOP            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    ELSE_IF         reduce using rule 36 (expression -> LPAREN expression RPAREN .)


state 62

    (43) iterative -> WHILE expression THEN . language STOP
    (3) language -> . language line
    (4) language -> . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . iterative
    (8) line -> . conditional
    (9) line -> . output
    (10) line -> . input
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (15) var_assign -> . NAME EQUALS expression
    (43) iterative -> . WHILE expression THEN language STOP
    (37) conditional -> . IF expression THEN language else_if_blocks else_block STOP
    (12) output -> . output_print
    (11) input -> . READ LPAREN NAME RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression
    (13) output_print -> . PRINT LPAREN expression RPAREN

    NAME            shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 22
    NOT             shift and go to state 23
    PRINT           shift and go to state 24

    expression                     shift and go to state 5
    language                       shift and go to state 66
    line                           shift and go to state 4
    var_assign                     shift and go to state 6
    iterative                      shift and go to state 7
    conditional                    shift and go to state 8
    output                         shift and go to state 9
    input                          shift and go to state 10
    expression_operation           shift and go to state 12
    output_print                   shift and go to state 21

state 63

    (37) conditional -> IF expression THEN . language else_if_blocks else_block STOP
    (3) language -> . language line
    (4) language -> . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . iterative
    (8) line -> . conditional
    (9) line -> . output
    (10) line -> . input
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (15) var_assign -> . NAME EQUALS expression
    (43) iterative -> . WHILE expression THEN language STOP
    (37) conditional -> . IF expression THEN language else_if_blocks else_block STOP
    (12) output -> . output_print
    (11) input -> . READ LPAREN NAME RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression
    (13) output_print -> . PRINT LPAREN expression RPAREN

    NAME            shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 22
    NOT             shift and go to state 23
    PRINT           shift and go to state 24

    expression                     shift and go to state 5
    language                       shift and go to state 67
    line                           shift and go to state 4
    var_assign                     shift and go to state 6
    iterative                      shift and go to state 7
    conditional                    shift and go to state 8
    output                         shift and go to state 9
    input                          shift and go to state 10
    expression_operation           shift and go to state 12
    output_print                   shift and go to state 21

state 64

    (11) input -> READ LPAREN NAME . RPAREN

    RPAREN          shift and go to state 68


state 65

    (13) output_print -> PRINT LPAREN expression . RPAREN
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    RPAREN          shift and go to state 69
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULO          shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    LD              shift and go to state 31
    LDEQ            shift and go to state 32
    GD              shift and go to state 33
    GDEQ            shift and go to state 34
    EQUALEQUAL      shift and go to state 35
    NOTEQ           shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 66

    (43) iterative -> WHILE expression THEN language . STOP
    (3) language -> language . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . iterative
    (8) line -> . conditional
    (9) line -> . output
    (10) line -> . input
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (15) var_assign -> . NAME EQUALS expression
    (43) iterative -> . WHILE expression THEN language STOP
    (37) conditional -> . IF expression THEN language else_if_blocks else_block STOP
    (12) output -> . output_print
    (11) input -> . READ LPAREN NAME RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression
    (13) output_print -> . PRINT LPAREN expression RPAREN

    STOP            shift and go to state 70
    NAME            shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 22
    NOT             shift and go to state 23
    PRINT           shift and go to state 24

    expression                     shift and go to state 5
    line                           shift and go to state 25
    var_assign                     shift and go to state 6
    iterative                      shift and go to state 7
    conditional                    shift and go to state 8
    output                         shift and go to state 9
    input                          shift and go to state 10
    expression_operation           shift and go to state 12
    output_print                   shift and go to state 21

state 67

    (37) conditional -> IF expression THEN language . else_if_blocks else_block STOP
    (3) language -> language . line
    (38) else_if_blocks -> . empty
    (39) else_if_blocks -> . else_if_blocks else_if_block
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . iterative
    (8) line -> . conditional
    (9) line -> . output
    (10) line -> . input
    (44) empty -> .
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (15) var_assign -> . NAME EQUALS expression
    (43) iterative -> . WHILE expression THEN language STOP
    (37) conditional -> . IF expression THEN language else_if_blocks else_block STOP
    (12) output -> . output_print
    (11) input -> . READ LPAREN NAME RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression
    (13) output_print -> . PRINT LPAREN expression RPAREN

    ELSE            reduce using rule 44 (empty -> .)
    ELSE_IF         reduce using rule 44 (empty -> .)
    STOP            reduce using rule 44 (empty -> .)
    NAME            shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 22
    NOT             shift and go to state 23
    PRINT           shift and go to state 24

    expression                     shift and go to state 5
    else_if_blocks                 shift and go to state 71
    line                           shift and go to state 25
    empty                          shift and go to state 72
    var_assign                     shift and go to state 6
    iterative                      shift and go to state 7
    conditional                    shift and go to state 8
    output                         shift and go to state 9
    input                          shift and go to state 10
    expression_operation           shift and go to state 12
    output_print                   shift and go to state 21

state 68

    (11) input -> READ LPAREN NAME RPAREN .

    NAME            reduce using rule 11 (input -> READ LPAREN NAME RPAREN .)
    INT             reduce using rule 11 (input -> READ LPAREN NAME RPAREN .)
    FLOAT           reduce using rule 11 (input -> READ LPAREN NAME RPAREN .)
    STRING          reduce using rule 11 (input -> READ LPAREN NAME RPAREN .)
    TRUE            reduce using rule 11 (input -> READ LPAREN NAME RPAREN .)
    FALSE           reduce using rule 11 (input -> READ LPAREN NAME RPAREN .)
    LPAREN          reduce using rule 11 (input -> READ LPAREN NAME RPAREN .)
    WHILE           reduce using rule 11 (input -> READ LPAREN NAME RPAREN .)
    IF              reduce using rule 11 (input -> READ LPAREN NAME RPAREN .)
    READ            reduce using rule 11 (input -> READ LPAREN NAME RPAREN .)
    NOT             reduce using rule 11 (input -> READ LPAREN NAME RPAREN .)
    PRINT           reduce using rule 11 (input -> READ LPAREN NAME RPAREN .)
    $end            reduce using rule 11 (input -> READ LPAREN NAME RPAREN .)
    STOP            reduce using rule 11 (input -> READ LPAREN NAME RPAREN .)
    ELSE            reduce using rule 11 (input -> READ LPAREN NAME RPAREN .)
    ELSE_IF         reduce using rule 11 (input -> READ LPAREN NAME RPAREN .)


state 69

    (13) output_print -> PRINT LPAREN expression RPAREN .

    NAME            reduce using rule 13 (output_print -> PRINT LPAREN expression RPAREN .)
    INT             reduce using rule 13 (output_print -> PRINT LPAREN expression RPAREN .)
    FLOAT           reduce using rule 13 (output_print -> PRINT LPAREN expression RPAREN .)
    STRING          reduce using rule 13 (output_print -> PRINT LPAREN expression RPAREN .)
    TRUE            reduce using rule 13 (output_print -> PRINT LPAREN expression RPAREN .)
    FALSE           reduce using rule 13 (output_print -> PRINT LPAREN expression RPAREN .)
    LPAREN          reduce using rule 13 (output_print -> PRINT LPAREN expression RPAREN .)
    WHILE           reduce using rule 13 (output_print -> PRINT LPAREN expression RPAREN .)
    IF              reduce using rule 13 (output_print -> PRINT LPAREN expression RPAREN .)
    READ            reduce using rule 13 (output_print -> PRINT LPAREN expression RPAREN .)
    NOT             reduce using rule 13 (output_print -> PRINT LPAREN expression RPAREN .)
    PRINT           reduce using rule 13 (output_print -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 13 (output_print -> PRINT LPAREN expression RPAREN .)
    STOP            reduce using rule 13 (output_print -> PRINT LPAREN expression RPAREN .)
    ELSE            reduce using rule 13 (output_print -> PRINT LPAREN expression RPAREN .)
    ELSE_IF         reduce using rule 13 (output_print -> PRINT LPAREN expression RPAREN .)


state 70

    (43) iterative -> WHILE expression THEN language STOP .

    NAME            reduce using rule 43 (iterative -> WHILE expression THEN language STOP .)
    INT             reduce using rule 43 (iterative -> WHILE expression THEN language STOP .)
    FLOAT           reduce using rule 43 (iterative -> WHILE expression THEN language STOP .)
    STRING          reduce using rule 43 (iterative -> WHILE expression THEN language STOP .)
    TRUE            reduce using rule 43 (iterative -> WHILE expression THEN language STOP .)
    FALSE           reduce using rule 43 (iterative -> WHILE expression THEN language STOP .)
    LPAREN          reduce using rule 43 (iterative -> WHILE expression THEN language STOP .)
    WHILE           reduce using rule 43 (iterative -> WHILE expression THEN language STOP .)
    IF              reduce using rule 43 (iterative -> WHILE expression THEN language STOP .)
    READ            reduce using rule 43 (iterative -> WHILE expression THEN language STOP .)
    NOT             reduce using rule 43 (iterative -> WHILE expression THEN language STOP .)
    PRINT           reduce using rule 43 (iterative -> WHILE expression THEN language STOP .)
    $end            reduce using rule 43 (iterative -> WHILE expression THEN language STOP .)
    STOP            reduce using rule 43 (iterative -> WHILE expression THEN language STOP .)
    ELSE            reduce using rule 43 (iterative -> WHILE expression THEN language STOP .)
    ELSE_IF         reduce using rule 43 (iterative -> WHILE expression THEN language STOP .)


state 71

    (37) conditional -> IF expression THEN language else_if_blocks . else_block STOP
    (39) else_if_blocks -> else_if_blocks . else_if_block
    (41) else_block -> . ELSE language
    (42) else_block -> . empty
    (40) else_if_block -> . ELSE_IF expression THEN language
    (44) empty -> .

    ELSE            shift and go to state 75
    ELSE_IF         shift and go to state 77
    STOP            reduce using rule 44 (empty -> .)

    else_block                     shift and go to state 73
    else_if_block                  shift and go to state 74
    empty                          shift and go to state 76

state 72

    (38) else_if_blocks -> empty .

    ELSE            reduce using rule 38 (else_if_blocks -> empty .)
    ELSE_IF         reduce using rule 38 (else_if_blocks -> empty .)
    STOP            reduce using rule 38 (else_if_blocks -> empty .)


state 73

    (37) conditional -> IF expression THEN language else_if_blocks else_block . STOP

    STOP            shift and go to state 78


state 74

    (39) else_if_blocks -> else_if_blocks else_if_block .

    ELSE            reduce using rule 39 (else_if_blocks -> else_if_blocks else_if_block .)
    ELSE_IF         reduce using rule 39 (else_if_blocks -> else_if_blocks else_if_block .)
    STOP            reduce using rule 39 (else_if_blocks -> else_if_blocks else_if_block .)


state 75

    (41) else_block -> ELSE . language
    (3) language -> . language line
    (4) language -> . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . iterative
    (8) line -> . conditional
    (9) line -> . output
    (10) line -> . input
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (15) var_assign -> . NAME EQUALS expression
    (43) iterative -> . WHILE expression THEN language STOP
    (37) conditional -> . IF expression THEN language else_if_blocks else_block STOP
    (12) output -> . output_print
    (11) input -> . READ LPAREN NAME RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression
    (13) output_print -> . PRINT LPAREN expression RPAREN

    NAME            shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 22
    NOT             shift and go to state 23
    PRINT           shift and go to state 24

    language                       shift and go to state 79
    line                           shift and go to state 4
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    iterative                      shift and go to state 7
    conditional                    shift and go to state 8
    output                         shift and go to state 9
    input                          shift and go to state 10
    expression_operation           shift and go to state 12
    output_print                   shift and go to state 21

state 76

    (42) else_block -> empty .

    STOP            reduce using rule 42 (else_block -> empty .)


state 77

    (40) else_if_block -> ELSE_IF . expression THEN language
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression

    NAME            shift and go to state 41
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    NOT             shift and go to state 23

    expression                     shift and go to state 80
    expression_operation           shift and go to state 12

state 78

    (37) conditional -> IF expression THEN language else_if_blocks else_block STOP .

    NAME            reduce using rule 37 (conditional -> IF expression THEN language else_if_blocks else_block STOP .)
    INT             reduce using rule 37 (conditional -> IF expression THEN language else_if_blocks else_block STOP .)
    FLOAT           reduce using rule 37 (conditional -> IF expression THEN language else_if_blocks else_block STOP .)
    STRING          reduce using rule 37 (conditional -> IF expression THEN language else_if_blocks else_block STOP .)
    TRUE            reduce using rule 37 (conditional -> IF expression THEN language else_if_blocks else_block STOP .)
    FALSE           reduce using rule 37 (conditional -> IF expression THEN language else_if_blocks else_block STOP .)
    LPAREN          reduce using rule 37 (conditional -> IF expression THEN language else_if_blocks else_block STOP .)
    WHILE           reduce using rule 37 (conditional -> IF expression THEN language else_if_blocks else_block STOP .)
    IF              reduce using rule 37 (conditional -> IF expression THEN language else_if_blocks else_block STOP .)
    READ            reduce using rule 37 (conditional -> IF expression THEN language else_if_blocks else_block STOP .)
    NOT             reduce using rule 37 (conditional -> IF expression THEN language else_if_blocks else_block STOP .)
    PRINT           reduce using rule 37 (conditional -> IF expression THEN language else_if_blocks else_block STOP .)
    $end            reduce using rule 37 (conditional -> IF expression THEN language else_if_blocks else_block STOP .)
    STOP            reduce using rule 37 (conditional -> IF expression THEN language else_if_blocks else_block STOP .)
    ELSE            reduce using rule 37 (conditional -> IF expression THEN language else_if_blocks else_block STOP .)
    ELSE_IF         reduce using rule 37 (conditional -> IF expression THEN language else_if_blocks else_block STOP .)


state 79

    (41) else_block -> ELSE language .
    (3) language -> language . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . iterative
    (8) line -> . conditional
    (9) line -> . output
    (10) line -> . input
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (15) var_assign -> . NAME EQUALS expression
    (43) iterative -> . WHILE expression THEN language STOP
    (37) conditional -> . IF expression THEN language else_if_blocks else_block STOP
    (12) output -> . output_print
    (11) input -> . READ LPAREN NAME RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression
    (13) output_print -> . PRINT LPAREN expression RPAREN

    STOP            reduce using rule 41 (else_block -> ELSE language .)
    NAME            shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 22
    NOT             shift and go to state 23
    PRINT           shift and go to state 24

    line                           shift and go to state 25
    expression                     shift and go to state 5
    var_assign                     shift and go to state 6
    iterative                      shift and go to state 7
    conditional                    shift and go to state 8
    output                         shift and go to state 9
    input                          shift and go to state 10
    expression_operation           shift and go to state 12
    output_print                   shift and go to state 21

state 80

    (40) else_if_block -> ELSE_IF expression . THEN language
    (17) expression_operation -> expression . MULTIPLY expression
    (18) expression_operation -> expression . DIVIDE expression
    (19) expression_operation -> expression . MODULO expression
    (20) expression_operation -> expression . PLUS expression
    (21) expression_operation -> expression . MINUS expression
    (22) expression_operation -> expression . LD expression
    (23) expression_operation -> expression . LDEQ expression
    (24) expression_operation -> expression . GD expression
    (25) expression_operation -> expression . GDEQ expression
    (26) expression_operation -> expression . EQUALEQUAL expression
    (27) expression_operation -> expression . NOTEQ expression
    (28) expression_operation -> expression . AND expression
    (29) expression_operation -> expression . OR expression

    THEN            shift and go to state 81
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULO          shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    LD              shift and go to state 31
    LDEQ            shift and go to state 32
    GD              shift and go to state 33
    GDEQ            shift and go to state 34
    EQUALEQUAL      shift and go to state 35
    NOTEQ           shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 81

    (40) else_if_block -> ELSE_IF expression THEN . language
    (3) language -> . language line
    (4) language -> . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . iterative
    (8) line -> . conditional
    (9) line -> . output
    (10) line -> . input
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (15) var_assign -> . NAME EQUALS expression
    (43) iterative -> . WHILE expression THEN language STOP
    (37) conditional -> . IF expression THEN language else_if_blocks else_block STOP
    (12) output -> . output_print
    (11) input -> . READ LPAREN NAME RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression
    (13) output_print -> . PRINT LPAREN expression RPAREN

    NAME            shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 22
    NOT             shift and go to state 23
    PRINT           shift and go to state 24

    expression                     shift and go to state 5
    language                       shift and go to state 82
    line                           shift and go to state 4
    var_assign                     shift and go to state 6
    iterative                      shift and go to state 7
    conditional                    shift and go to state 8
    output                         shift and go to state 9
    input                          shift and go to state 10
    expression_operation           shift and go to state 12
    output_print                   shift and go to state 21

state 82

    (40) else_if_block -> ELSE_IF expression THEN language .
    (3) language -> language . line
    (5) line -> . expression
    (6) line -> . var_assign
    (7) line -> . iterative
    (8) line -> . conditional
    (9) line -> . output
    (10) line -> . input
    (14) expression -> . NAME
    (16) expression -> . expression_operation
    (31) expression -> . INT
    (32) expression -> . FLOAT
    (33) expression -> . STRING
    (34) expression -> . TRUE
    (35) expression -> . FALSE
    (36) expression -> . LPAREN expression RPAREN
    (15) var_assign -> . NAME EQUALS expression
    (43) iterative -> . WHILE expression THEN language STOP
    (37) conditional -> . IF expression THEN language else_if_blocks else_block STOP
    (12) output -> . output_print
    (11) input -> . READ LPAREN NAME RPAREN
    (17) expression_operation -> . expression MULTIPLY expression
    (18) expression_operation -> . expression DIVIDE expression
    (19) expression_operation -> . expression MODULO expression
    (20) expression_operation -> . expression PLUS expression
    (21) expression_operation -> . expression MINUS expression
    (22) expression_operation -> . expression LD expression
    (23) expression_operation -> . expression LDEQ expression
    (24) expression_operation -> . expression GD expression
    (25) expression_operation -> . expression GDEQ expression
    (26) expression_operation -> . expression EQUALEQUAL expression
    (27) expression_operation -> . expression NOTEQ expression
    (28) expression_operation -> . expression AND expression
    (29) expression_operation -> . expression OR expression
    (30) expression_operation -> . NOT expression
    (13) output_print -> . PRINT LPAREN expression RPAREN

    ELSE            reduce using rule 40 (else_if_block -> ELSE_IF expression THEN language .)
    ELSE_IF         reduce using rule 40 (else_if_block -> ELSE_IF expression THEN language .)
    STOP            reduce using rule 40 (else_if_block -> ELSE_IF expression THEN language .)
    NAME            shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 22
    NOT             shift and go to state 23
    PRINT           shift and go to state 24

    expression                     shift and go to state 5
    line                           shift and go to state 25
    var_assign                     shift and go to state 6
    iterative                      shift and go to state 7
    conditional                    shift and go to state 8
    output                         shift and go to state 9
    input                          shift and go to state 10
    expression_operation           shift and go to state 12
    output_print                   shift and go to state 21
